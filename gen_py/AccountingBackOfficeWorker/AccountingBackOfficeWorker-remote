# -*- coding: utf-8 -*-
#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from gen_py.AccountingBackOfficeWorker import AccountingBackOfficeWorker
from gen_py.AccountingBackOfficeWorker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  UserDto updateUserPwd(UserPasswordRequest request)'
  print '  UserDto updateUserFields(UserFieldsRequest request)'
  print '  UserDto createWithPwd(UserDto user, string password)'
  print '  UserResponse createUser(CreateUserRequest request)'
  print '  UserDto findUserByPhone(string phone)'
  print '  UserResponse findUser(FindUserRequest request)'
  print '   findAllAccountIds()'
  print '   findAllAccountsId(PaginationDto pagination)'
  print '   findAllBuyerIds(PaginationDto pagination)'
  print '   findAllSellerIds(PaginationDto pagination)'
  print '  PermissionDto createPermission(PermissionDto permission)'
  print '  PermissionListResponse findPermissionByParams(PermissionParamsRequest request)'
  print '  PermissionDto updatePermission(PermissionUpdateRequest request)'
  print '  ReIndexResponse reIndex(ReIndexRequest request)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AccountingBackOfficeWorker.Client(protocol)
transport.open()

if cmd == 'updateUserPwd':
  if len(args) != 1:
    print 'updateUserPwd requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateUserPwd(eval(args[0]),))

elif cmd == 'updateUserFields':
  if len(args) != 1:
    print 'updateUserFields requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateUserFields(eval(args[0]),))

elif cmd == 'createWithPwd':
  if len(args) != 2:
    print 'createWithPwd requires 2 args'
    sys.exit(1)
  pp.pprint(client.createWithPwd(eval(args[0]),args[1],))

elif cmd == 'createUser':
  if len(args) != 1:
    print 'createUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.createUser(eval(args[0]),))

elif cmd == 'findUserByPhone':
  if len(args) != 1:
    print 'findUserByPhone requires 1 args'
    sys.exit(1)
  pp.pprint(client.findUserByPhone(args[0],))

elif cmd == 'findUser':
  if len(args) != 1:
    print 'findUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.findUser(eval(args[0]),))

elif cmd == 'findAllAccountIds':
  if len(args) != 0:
    print 'findAllAccountIds requires 0 args'
    sys.exit(1)
  pp.pprint(client.findAllAccountIds())

elif cmd == 'findAllAccountsId':
  if len(args) != 1:
    print 'findAllAccountsId requires 1 args'
    sys.exit(1)
  pp.pprint(client.findAllAccountsId(eval(args[0]),))

elif cmd == 'findAllBuyerIds':
  if len(args) != 1:
    print 'findAllBuyerIds requires 1 args'
    sys.exit(1)
  pp.pprint(client.findAllBuyerIds(eval(args[0]),))

elif cmd == 'findAllSellerIds':
  if len(args) != 1:
    print 'findAllSellerIds requires 1 args'
    sys.exit(1)
  pp.pprint(client.findAllSellerIds(eval(args[0]),))

elif cmd == 'createPermission':
  if len(args) != 1:
    print 'createPermission requires 1 args'
    sys.exit(1)
  pp.pprint(client.createPermission(eval(args[0]),))

elif cmd == 'findPermissionByParams':
  if len(args) != 1:
    print 'findPermissionByParams requires 1 args'
    sys.exit(1)
  pp.pprint(client.findPermissionByParams(eval(args[0]),))

elif cmd == 'updatePermission':
  if len(args) != 1:
    print 'updatePermission requires 1 args'
    sys.exit(1)
  pp.pprint(client.updatePermission(eval(args[0]),))

elif cmd == 'reIndex':
  if len(args) != 1:
    print 'reIndex requires 1 args'
    sys.exit(1)
  pp.pprint(client.reIndex(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
