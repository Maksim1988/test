# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import Exceptions
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  ********************************
               SERVICE
  *********************************
  """
  def updateUserPwd(self, request):
    """
    (since 1.23.0) при обновлении берется значение из таблички "auths" ассоциированное с данным пользователем,
    в выборке учавствует тип AuthType.AUTHORIZATION и поле "userId".
    Returns updated User DTO.


    Parameters:
     - request
    """
    pass

  def updateUserFields(self, request):
    """
    Updates User fields populated in the request. Uses "userId" field to find the user.
    Returns updated User DTO.


    Parameters:
     - request
    """
    pass

  def createWithPwd(self, user, password):
    """
    Parameters:
     - user
     - password
    """
    pass

  def createUser(self, request):
    """
    Parameters:
     - request
    """
    pass

  def findUserByPhone(self, phone):
    """
    Parameters:
     - phone
    """
    pass

  def findUser(self, request):
    """
    Parameters:
     - request
    """
    pass

  def findAllAccountIds(self):
    pass

  def findAllAccountsId(self, pagination):
    """
    Parameters:
     - pagination
    """
    pass

  def findAllBuyerIds(self, pagination):
    """
    Parameters:
     - pagination
    """
    pass

  def findAllSellerIds(self, pagination):
    """
    Parameters:
     - pagination
    """
    pass

  def createPermission(self, permission):
    """
    Parameters:
     - permission
    """
    pass

  def findPermissionByParams(self, request):
    """
    Parameters:
     - request
    """
    pass

  def updatePermission(self, request):
    """
    Parameters:
     - request
    """
    pass

  def reIndex(self, request):
    """
    Переиндексировать пользователей системы заново.
    При асинхронном использовании в ReIndexResponse вернется только totalCount.
    При синхронном использовании ReIndexResponse вернется с totalCount и заполненным userIds.


    Parameters:
     - request
    """
    pass


class Client(Iface):
  """
  ********************************
               SERVICE
  *********************************
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def updateUserPwd(self, request):
    """
    (since 1.23.0) при обновлении берется значение из таблички "auths" ассоциированное с данным пользователем,
    в выборке учавствует тип AuthType.AUTHORIZATION и поле "userId".
    Returns updated User DTO.


    Parameters:
     - request
    """
    self.send_updateUserPwd(request)
    return self.recv_updateUserPwd()

  def send_updateUserPwd(self, request):
    self._oprot.writeMessageBegin('updateUserPwd', TMessageType.CALL, self._seqid)
    args = updateUserPwd_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUserPwd(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateUserPwd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUserPwd failed: unknown result");

  def updateUserFields(self, request):
    """
    Updates User fields populated in the request. Uses "userId" field to find the user.
    Returns updated User DTO.


    Parameters:
     - request
    """
    self.send_updateUserFields(request)
    return self.recv_updateUserFields()

  def send_updateUserFields(self, request):
    self._oprot.writeMessageBegin('updateUserFields', TMessageType.CALL, self._seqid)
    args = updateUserFields_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUserFields(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateUserFields_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUserFields failed: unknown result");

  def createWithPwd(self, user, password):
    """
    Parameters:
     - user
     - password
    """
    self.send_createWithPwd(user, password)
    return self.recv_createWithPwd()

  def send_createWithPwd(self, user, password):
    self._oprot.writeMessageBegin('createWithPwd', TMessageType.CALL, self._seqid)
    args = createWithPwd_args()
    args.user = user
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createWithPwd(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createWithPwd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.bEx is not None:
      raise result.bEx
    if result.aEx is not None:
      raise result.aEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createWithPwd failed: unknown result");

  def createUser(self, request):
    """
    Parameters:
     - request
    """
    self.send_createUser(request)
    return self.recv_createUser()

  def send_createUser(self, request):
    self._oprot.writeMessageBegin('createUser', TMessageType.CALL, self._seqid)
    args = createUser_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createUser(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.bEx is not None:
      raise result.bEx
    if result.aEx is not None:
      raise result.aEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createUser failed: unknown result");

  def findUserByPhone(self, phone):
    """
    Parameters:
     - phone
    """
    self.send_findUserByPhone(phone)
    return self.recv_findUserByPhone()

  def send_findUserByPhone(self, phone):
    self._oprot.writeMessageBegin('findUserByPhone', TMessageType.CALL, self._seqid)
    args = findUserByPhone_args()
    args.phone = phone
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findUserByPhone(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findUserByPhone_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findUserByPhone failed: unknown result");

  def findUser(self, request):
    """
    Parameters:
     - request
    """
    self.send_findUser(request)
    return self.recv_findUser()

  def send_findUser(self, request):
    self._oprot.writeMessageBegin('findUser', TMessageType.CALL, self._seqid)
    args = findUser_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findUser(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findUser failed: unknown result");

  def findAllAccountIds(self):
    self.send_findAllAccountIds()
    return self.recv_findAllAccountIds()

  def send_findAllAccountIds(self):
    self._oprot.writeMessageBegin('findAllAccountIds', TMessageType.CALL, self._seqid)
    args = findAllAccountIds_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findAllAccountIds(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findAllAccountIds_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findAllAccountIds failed: unknown result");

  def findAllAccountsId(self, pagination):
    """
    Parameters:
     - pagination
    """
    self.send_findAllAccountsId(pagination)
    return self.recv_findAllAccountsId()

  def send_findAllAccountsId(self, pagination):
    self._oprot.writeMessageBegin('findAllAccountsId', TMessageType.CALL, self._seqid)
    args = findAllAccountsId_args()
    args.pagination = pagination
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findAllAccountsId(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findAllAccountsId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findAllAccountsId failed: unknown result");

  def findAllBuyerIds(self, pagination):
    """
    Parameters:
     - pagination
    """
    self.send_findAllBuyerIds(pagination)
    return self.recv_findAllBuyerIds()

  def send_findAllBuyerIds(self, pagination):
    self._oprot.writeMessageBegin('findAllBuyerIds', TMessageType.CALL, self._seqid)
    args = findAllBuyerIds_args()
    args.pagination = pagination
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findAllBuyerIds(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findAllBuyerIds_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findAllBuyerIds failed: unknown result");

  def findAllSellerIds(self, pagination):
    """
    Parameters:
     - pagination
    """
    self.send_findAllSellerIds(pagination)
    return self.recv_findAllSellerIds()

  def send_findAllSellerIds(self, pagination):
    self._oprot.writeMessageBegin('findAllSellerIds', TMessageType.CALL, self._seqid)
    args = findAllSellerIds_args()
    args.pagination = pagination
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findAllSellerIds(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findAllSellerIds_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findAllSellerIds failed: unknown result");

  def createPermission(self, permission):
    """
    Parameters:
     - permission
    """
    self.send_createPermission(permission)
    return self.recv_createPermission()

  def send_createPermission(self, permission):
    self._oprot.writeMessageBegin('createPermission', TMessageType.CALL, self._seqid)
    args = createPermission_args()
    args.permission = permission
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createPermission(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createPermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.uEx is not None:
      raise result.uEx
    if result.aEx is not None:
      raise result.aEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createPermission failed: unknown result");

  def findPermissionByParams(self, request):
    """
    Parameters:
     - request
    """
    self.send_findPermissionByParams(request)
    return self.recv_findPermissionByParams()

  def send_findPermissionByParams(self, request):
    self._oprot.writeMessageBegin('findPermissionByParams', TMessageType.CALL, self._seqid)
    args = findPermissionByParams_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findPermissionByParams(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findPermissionByParams_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findPermissionByParams failed: unknown result");

  def updatePermission(self, request):
    """
    Parameters:
     - request
    """
    self.send_updatePermission(request)
    return self.recv_updatePermission()

  def send_updatePermission(self, request):
    self._oprot.writeMessageBegin('updatePermission', TMessageType.CALL, self._seqid)
    args = updatePermission_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updatePermission(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updatePermission_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.uEx is not None:
      raise result.uEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updatePermission failed: unknown result");

  def reIndex(self, request):
    """
    Переиндексировать пользователей системы заново.
    При асинхронном использовании в ReIndexResponse вернется только totalCount.
    При синхронном использовании ReIndexResponse вернется с totalCount и заполненным userIds.


    Parameters:
     - request
    """
    self.send_reIndex(request)
    return self.recv_reIndex()

  def send_reIndex(self, request):
    self._oprot.writeMessageBegin('reIndex', TMessageType.CALL, self._seqid)
    args = reIndex_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reIndex(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reIndex_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reIndex failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["updateUserPwd"] = Processor.process_updateUserPwd
    self._processMap["updateUserFields"] = Processor.process_updateUserFields
    self._processMap["createWithPwd"] = Processor.process_createWithPwd
    self._processMap["createUser"] = Processor.process_createUser
    self._processMap["findUserByPhone"] = Processor.process_findUserByPhone
    self._processMap["findUser"] = Processor.process_findUser
    self._processMap["findAllAccountIds"] = Processor.process_findAllAccountIds
    self._processMap["findAllAccountsId"] = Processor.process_findAllAccountsId
    self._processMap["findAllBuyerIds"] = Processor.process_findAllBuyerIds
    self._processMap["findAllSellerIds"] = Processor.process_findAllSellerIds
    self._processMap["createPermission"] = Processor.process_createPermission
    self._processMap["findPermissionByParams"] = Processor.process_findPermissionByParams
    self._processMap["updatePermission"] = Processor.process_updatePermission
    self._processMap["reIndex"] = Processor.process_reIndex

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_updateUserPwd(self, seqid, iprot, oprot):
    args = updateUserPwd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUserPwd_result()
    try:
      result.success = self._handler.updateUserPwd(args.request)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("updateUserPwd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUserFields(self, seqid, iprot, oprot):
    args = updateUserFields_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUserFields_result()
    try:
      result.success = self._handler.updateUserFields(args.request)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("updateUserFields", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWithPwd(self, seqid, iprot, oprot):
    args = createWithPwd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWithPwd_result()
    try:
      result.success = self._handler.createWithPwd(args.user, args.password)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.AlreadyExistsException, aEx:
      result.aEx = aEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("createWithPwd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createUser(self, seqid, iprot, oprot):
    args = createUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createUser_result()
    try:
      result.success = self._handler.createUser(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.AlreadyExistsException, aEx:
      result.aEx = aEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("createUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findUserByPhone(self, seqid, iprot, oprot):
    args = findUserByPhone_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findUserByPhone_result()
    try:
      result.success = self._handler.findUserByPhone(args.phone)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NullResultException, nEx:
      result.nEx = nEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("findUserByPhone", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findUser(self, seqid, iprot, oprot):
    args = findUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findUser_result()
    try:
      result.success = self._handler.findUser(args.request)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NullResultException, nEx:
      result.nEx = nEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("findUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findAllAccountIds(self, seqid, iprot, oprot):
    args = findAllAccountIds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findAllAccountIds_result()
    try:
      result.success = self._handler.findAllAccountIds()
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("findAllAccountIds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findAllAccountsId(self, seqid, iprot, oprot):
    args = findAllAccountsId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findAllAccountsId_result()
    try:
      result.success = self._handler.findAllAccountsId(args.pagination)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("findAllAccountsId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findAllBuyerIds(self, seqid, iprot, oprot):
    args = findAllBuyerIds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findAllBuyerIds_result()
    try:
      result.success = self._handler.findAllBuyerIds(args.pagination)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("findAllBuyerIds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findAllSellerIds(self, seqid, iprot, oprot):
    args = findAllSellerIds_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findAllSellerIds_result()
    try:
      result.success = self._handler.findAllSellerIds(args.pagination)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("findAllSellerIds", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createPermission(self, seqid, iprot, oprot):
    args = createPermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createPermission_result()
    try:
      result.success = self._handler.createPermission(args.permission)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.AlreadyExistsException, aEx:
      result.aEx = aEx
    oprot.writeMessageBegin("createPermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findPermissionByParams(self, seqid, iprot, oprot):
    args = findPermissionByParams_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findPermissionByParams_result()
    try:
      result.success = self._handler.findPermissionByParams(args.request)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    oprot.writeMessageBegin("findPermissionByParams", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updatePermission(self, seqid, iprot, oprot):
    args = updatePermission_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updatePermission_result()
    try:
      result.success = self._handler.updatePermission(args.request)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("updatePermission", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reIndex(self, seqid, iprot, oprot):
    args = reIndex_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reIndex_result()
    try:
      result.success = self._handler.reIndex(args.request)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("reIndex", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class updateUserPwd_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (UserPasswordRequest, UserPasswordRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = UserPasswordRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserPwd_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserPwd_result:
  """
  Attributes:
   - success
   - bEx
   - nEx
   - uEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (AccountingWorker.ttypes.UserDto, AccountingWorker.ttypes.UserDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, nEx=None, uEx=None,):
    self.success = success
    self.bEx = bEx
    self.nEx = nEx
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = AccountingWorker.ttypes.UserDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserPwd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 2)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 3)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserFields_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (UserFieldsRequest, UserFieldsRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = UserFieldsRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserFields_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserFields_result:
  """
  Attributes:
   - success
   - bEx
   - nEx
   - uEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (AccountingWorker.ttypes.UserDto, AccountingWorker.ttypes.UserDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, nEx=None, uEx=None,):
    self.success = success
    self.bEx = bEx
    self.nEx = nEx
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = AccountingWorker.ttypes.UserDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserFields_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 2)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 3)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWithPwd_args:
  """
  Attributes:
   - user
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'user', (AccountingWorker.ttypes.UserDto, AccountingWorker.ttypes.UserDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
  )

  def __init__(self, user=None, password=None,):
    self.user = user
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.user = AccountingWorker.ttypes.UserDto()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWithPwd_args')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 1)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWithPwd_result:
  """
  Attributes:
   - success
   - uEx
   - bEx
   - aEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (AccountingWorker.ttypes.UserDto, AccountingWorker.ttypes.UserDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'aEx', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, bEx=None, aEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.bEx = bEx
    self.aEx = aEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = AccountingWorker.ttypes.UserDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.aEx = Exceptions.ttypes.AlreadyExistsException()
          self.aEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWithPwd_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 2)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.aEx is not None:
      oprot.writeFieldBegin('aEx', TType.STRUCT, 3)
      self.aEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUser_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (CreateUserRequest, CreateUserRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = CreateUserRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUser_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUser_result:
  """
  Attributes:
   - success
   - uEx
   - bEx
   - aEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UserResponse, UserResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'aEx', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, bEx=None, aEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.bEx = bEx
    self.aEx = aEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = UserResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.aEx = Exceptions.ttypes.AlreadyExistsException()
          self.aEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUser_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 2)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.aEx is not None:
      oprot.writeFieldBegin('aEx', TType.STRUCT, 3)
      self.aEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findUserByPhone_args:
  """
  Attributes:
   - phone
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'phone', None, None, ), # 1
  )

  def __init__(self, phone=None,):
    self.phone = phone

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findUserByPhone_args')
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 1)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findUserByPhone_result:
  """
  Attributes:
   - success
   - bEx
   - nEx
   - uEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (AccountingWorker.ttypes.UserDto, AccountingWorker.ttypes.UserDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nEx', (Exceptions.ttypes.NullResultException, Exceptions.ttypes.NullResultException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, nEx=None, uEx=None,):
    self.success = success
    self.bEx = bEx
    self.nEx = nEx
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = AccountingWorker.ttypes.UserDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NullResultException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findUserByPhone_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 2)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 3)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findUser_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (FindUserRequest, FindUserRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = FindUserRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findUser_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findUser_result:
  """
  Attributes:
   - success
   - bEx
   - nEx
   - uEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UserResponse, UserResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nEx', (Exceptions.ttypes.NullResultException, Exceptions.ttypes.NullResultException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, nEx=None, uEx=None,):
    self.success = success
    self.bEx = bEx
    self.nEx = nEx
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = UserResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NullResultException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findUser_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 2)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 3)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllAccountIds_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllAccountIds_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllAccountIds_result:
  """
  Attributes:
   - success
   - uEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, uEx=None,):
    self.success = success
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = iprot.readI32();
            self.success.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllAccountIds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter57 in self.success:
        oprot.writeI32(iter57)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllAccountsId_args:
  """
  Attributes:
   - pagination
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pagination', (Common.ttypes.PaginationDto, Common.ttypes.PaginationDto.thrift_spec), None, ), # 1
  )

  def __init__(self, pagination=None,):
    self.pagination = pagination

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pagination = Common.ttypes.PaginationDto()
          self.pagination.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllAccountsId_args')
    if self.pagination is not None:
      oprot.writeFieldBegin('pagination', TType.STRUCT, 1)
      self.pagination.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllAccountsId_result:
  """
  Attributes:
   - success
   - uEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, uEx=None,):
    self.success = success
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = iprot.readI32();
            self.success.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllAccountsId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter64 in self.success:
        oprot.writeI32(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllBuyerIds_args:
  """
  Attributes:
   - pagination
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pagination', (Common.ttypes.PaginationDto, Common.ttypes.PaginationDto.thrift_spec), None, ), # 1
  )

  def __init__(self, pagination=None,):
    self.pagination = pagination

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pagination = Common.ttypes.PaginationDto()
          self.pagination.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllBuyerIds_args')
    if self.pagination is not None:
      oprot.writeFieldBegin('pagination', TType.STRUCT, 1)
      self.pagination.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllBuyerIds_result:
  """
  Attributes:
   - success
   - uEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, uEx=None,):
    self.success = success
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = iprot.readI32();
            self.success.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllBuyerIds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter71 in self.success:
        oprot.writeI32(iter71)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllSellerIds_args:
  """
  Attributes:
   - pagination
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pagination', (Common.ttypes.PaginationDto, Common.ttypes.PaginationDto.thrift_spec), None, ), # 1
  )

  def __init__(self, pagination=None,):
    self.pagination = pagination

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pagination = Common.ttypes.PaginationDto()
          self.pagination.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllSellerIds_args')
    if self.pagination is not None:
      oprot.writeFieldBegin('pagination', TType.STRUCT, 1)
      self.pagination.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findAllSellerIds_result:
  """
  Attributes:
   - success
   - uEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, uEx=None,):
    self.success = success
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = iprot.readI32();
            self.success.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findAllSellerIds_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I32, len(self.success))
      for iter78 in self.success:
        oprot.writeI32(iter78)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createPermission_args:
  """
  Attributes:
   - permission
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'permission', (PermissionDto, PermissionDto.thrift_spec), None, ), # 1
  )

  def __init__(self, permission=None,):
    self.permission = permission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.permission = PermissionDto()
          self.permission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createPermission_args')
    if self.permission is not None:
      oprot.writeFieldBegin('permission', TType.STRUCT, 1)
      self.permission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createPermission_result:
  """
  Attributes:
   - success
   - bEx
   - uEx
   - aEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PermissionDto, PermissionDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'aEx', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, uEx=None, aEx=None,):
    self.success = success
    self.bEx = bEx
    self.uEx = uEx
    self.aEx = aEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PermissionDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.aEx = Exceptions.ttypes.AlreadyExistsException()
          self.aEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createPermission_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 2)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.aEx is not None:
      oprot.writeFieldBegin('aEx', TType.STRUCT, 3)
      self.aEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPermissionByParams_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (PermissionParamsRequest, PermissionParamsRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = PermissionParamsRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPermissionByParams_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findPermissionByParams_result:
  """
  Attributes:
   - success
   - bEx
   - uEx
   - mEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PermissionListResponse, PermissionListResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, uEx=None, mEx=None,):
    self.success = success
    self.bEx = bEx
    self.uEx = uEx
    self.mEx = mEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PermissionListResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findPermissionByParams_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 2)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 3)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updatePermission_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (PermissionUpdateRequest, PermissionUpdateRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = PermissionUpdateRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updatePermission_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updatePermission_result:
  """
  Attributes:
   - success
   - bEx
   - uEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PermissionDto, PermissionDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, uEx=None, nEx=None,):
    self.success = success
    self.bEx = bEx
    self.uEx = uEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PermissionDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updatePermission_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 2)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 3)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reIndex_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ReIndexRequest, ReIndexRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ReIndexRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reIndex_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reIndex_result:
  """
  Attributes:
   - success
   - bEx
   - uEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ReIndexResponse, ReIndexResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, bEx=None, uEx=None,):
    self.success = success
    self.bEx = bEx
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ReIndexResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reIndex_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 2)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
