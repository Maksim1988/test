# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import Common
import gen_py.Exceptions.ttypes
import gen_py.Common.ttypes
import gen_py.AccountingWorkerConstants.ttypes
import gen_py.AccountingWorker.ttypes
import gen_py.AccountingSearchWorkerConstants.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
from gen_py2 import AccountingWorker

try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class DateRange:
  """
  DTO


  Attributes:
   - dateFrom
   - dateTo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dateFrom', None, None, ), # 1
    (2, TType.I64, 'dateTo', None, None, ), # 2
  )

  def __init__(self, dateFrom=None, dateTo=None,):
    self.dateFrom = dateFrom
    self.dateTo = dateTo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dateFrom = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.dateTo = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DateRange')
    if self.dateFrom is not None:
      oprot.writeFieldBegin('dateFrom', TType.I64, 1)
      oprot.writeI64(self.dateFrom)
      oprot.writeFieldEnd()
    if self.dateTo is not None:
      oprot.writeFieldBegin('dateTo', TType.I64, 2)
      oprot.writeI64(self.dateTo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserSearchRequest:
  """
  REQUESTS


  Attributes:
   - pagination
   - ordering
   - textStringSearch
   - authorities
   - WantsToBeSeller
   - registrationTimestampRange
   - accountStatuses
   - loginSet
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pagination', (Common.ttypes.PaginationDto, Common.ttypes.PaginationDto.thrift_spec), None, ), # 1
    (2, TType.I32, 'ordering', None, None, ), # 2
    (3, TType.STRING, 'textStringSearch', None, None, ), # 3
    (4, TType.SET, 'authorities', (TType.STRING,None), None, ), # 4
    (5, TType.BOOL, 'WantsToBeSeller', None, None, ), # 5
    (6, TType.STRUCT, 'registrationTimestampRange', (DateRange, DateRange.thrift_spec), None, ), # 6
    (7, TType.SET, 'accountStatuses', (TType.I32,None), None, ), # 7
    (8, TType.SET, 'loginSet', (TType.STRING,None), None, ), # 8
  )

  def __init__(self, pagination=None, ordering=None, textStringSearch=None, authorities=None, WantsToBeSeller=None, registrationTimestampRange=None, accountStatuses=None, loginSet=None,):
    self.pagination = pagination
    self.ordering = ordering
    self.textStringSearch = textStringSearch
    self.authorities = authorities
    self.WantsToBeSeller = WantsToBeSeller
    self.registrationTimestampRange = registrationTimestampRange
    self.accountStatuses = accountStatuses
    self.loginSet = loginSet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pagination = Common.ttypes.PaginationDto()
          self.pagination.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ordering = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.textStringSearch = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.authorities = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.authorities.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.WantsToBeSeller = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.registrationTimestampRange = DateRange()
          self.registrationTimestampRange.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.accountStatuses = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.accountStatuses.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.SET:
          self.loginSet = set()
          (_etype15, _size12) = iprot.readSetBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.loginSet.add(_elem17)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserSearchRequest')
    if self.pagination is not None:
      oprot.writeFieldBegin('pagination', TType.STRUCT, 1)
      self.pagination.write(oprot)
      oprot.writeFieldEnd()
    if self.ordering is not None:
      oprot.writeFieldBegin('ordering', TType.I32, 2)
      oprot.writeI32(self.ordering)
      oprot.writeFieldEnd()
    if self.textStringSearch is not None:
      oprot.writeFieldBegin('textStringSearch', TType.STRING, 3)
      oprot.writeString(self.textStringSearch)
      oprot.writeFieldEnd()
    if self.authorities is not None:
      oprot.writeFieldBegin('authorities', TType.SET, 4)
      oprot.writeSetBegin(TType.STRING, len(self.authorities))
      for iter18 in self.authorities:
        oprot.writeString(iter18)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.WantsToBeSeller is not None:
      oprot.writeFieldBegin('WantsToBeSeller', TType.BOOL, 5)
      oprot.writeBool(self.WantsToBeSeller)
      oprot.writeFieldEnd()
    if self.registrationTimestampRange is not None:
      oprot.writeFieldBegin('registrationTimestampRange', TType.STRUCT, 6)
      self.registrationTimestampRange.write(oprot)
      oprot.writeFieldEnd()
    if self.accountStatuses is not None:
      oprot.writeFieldBegin('accountStatuses', TType.SET, 7)
      oprot.writeSetBegin(TType.I32, len(self.accountStatuses))
      for iter19 in self.accountStatuses:
        oprot.writeI32(iter19)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.loginSet is not None:
      oprot.writeFieldBegin('loginSet', TType.SET, 8)
      oprot.writeSetBegin(TType.STRING, len(self.loginSet))
      for iter20 in self.loginSet:
        oprot.writeString(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IndexUsersRequest:
  """
  Attributes:
   - userList
   - onlyEnabled
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userList', (TType.STRUCT,(AccountingWorker.ttypes.UserDto, AccountingWorker.ttypes.UserDto.thrift_spec)), None, ), # 1
    (2, TType.BOOL, 'onlyEnabled', None, None, ), # 2
  )

  def __init__(self, userList=None, onlyEnabled=None,):
    self.userList = userList
    self.onlyEnabled = onlyEnabled

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = AccountingWorker.ttypes.UserDto()
            _elem26.read(iprot)
            self.userList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.onlyEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IndexUsersRequest')
    if self.userList is not None:
      oprot.writeFieldBegin('userList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.userList))
      for iter27 in self.userList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.onlyEnabled is not None:
      oprot.writeFieldBegin('onlyEnabled', TType.BOOL, 2)
      oprot.writeBool(self.onlyEnabled)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserListResponseDeprecated:
  """
  RESPONSES


  Attributes:
   - dtoList
   - totalCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'dtoList', (TType.STRUCT,(AccountingWorker.ttypes.UserInfoDto, AccountingWorker.ttypes.UserInfoDto.thrift_spec)), None, ), # 1
    (2, TType.I32, 'totalCount', None, None, ), # 2
  )

  def __init__(self, dtoList=None, totalCount=None,):
    self.dtoList = dtoList
    self.totalCount = totalCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.dtoList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = AccountingWorker.ttypes.UserInfoDto()
            _elem33.read(iprot)
            self.dtoList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserListResponseDeprecated')
    if self.dtoList is not None:
      oprot.writeFieldBegin('dtoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.dtoList))
      for iter34 in self.dtoList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 2)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
