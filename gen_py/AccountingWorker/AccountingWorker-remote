# -*- coding: utf-8 -*-
#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from gen_py.AccountingWorker import AccountingWorker
from gen_py.AccountingWorker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool checkAuthCode(AuthCodeCheckRequest request)'
  print '  UserDto createUserNSendCredentials(UserDto user)'
  print '  UserDto registerUser(RegisterRequest request)'
  print '  UserDto loginUser(LoginRequest request)'
  print '  UserDto updateUser(UserDto user)'
  print '  bool checkUserPassword(string phone, string password)'
  print '  void updateUserStatus(UserId userId, AccountStatus newStatus)'
  print '  void updateUserPassword(UserId userId, string oldPassword, string newPassword)'
  print '  void resetUserPassword(UserId userId)'
  print '  UserDto findUserById(UserId userId)'
  print '  UserListResponse findUsersByParams(UsersParamsRequest request)'
  print '  void changeOnlineStatus(UserOnlineStatusRequest request)'
  print '  OnlineStatus getOnlineStatus(UserId userId)'
  print '  void validateEmail(ValidateEmailRequest request)'
  print '  ValidateEmailCheckResponse validateEmailCheck(TokenRequest request)'
  print '  UserDto getUserByToken(TokenRequest request)'
  print '  void changePassword(ChangePasswordRequest request)'
  print '   getPaymentGrid()'
  print '   getDeliveryGrid()'
  print '  void updateUserPasswordWithoutVerification(UserId userId, string newPassword, bool sendToUser)'
  print '  UserDto createWithCredentials(UserDto user, string password)'
  print '  i64 getTotalUsers()'
  print '  i64 getTotalGroupUsers(string group)'
  print '  UserDto auth(string phone, string password, string sessionId)'
  print '  UserInfoDto authenticate(string phone, string password, string sessionId)'
  print '  UserInfoDto createUserAndSendCredentials(UserProfileDto profile)'
  print '  UserInfoDto createUserWithCredentials(UserProfileDto profile, string password)'
  print '  UserInfoDto getUserDetailsById(UserId userId, Locale locale)'
  print '  UserInfoDto getUserDetailsByLogin(string login, Locale locale)'
  print '  UserInfoDto getUserDetailsByPhone(string login, Locale locale)'
  print '   findUserDetails(FindUserRequestDto request)'
  print '   findUsersDetailsByParams(UsersParamsRequest request)'
  print '  void updateUserProfile(UserId userId, UserProfileDto newUserProfile)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AccountingWorker.Client(protocol)
transport.open()

if cmd == 'checkAuthCode':
  if len(args) != 1:
    print 'checkAuthCode requires 1 args'
    sys.exit(1)
  pp.pprint(client.checkAuthCode(eval(args[0]),))

elif cmd == 'createUserNSendCredentials':
  if len(args) != 1:
    print 'createUserNSendCredentials requires 1 args'
    sys.exit(1)
  pp.pprint(client.createUserNSendCredentials(eval(args[0]),))

elif cmd == 'registerUser':
  if len(args) != 1:
    print 'registerUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerUser(eval(args[0]),))

elif cmd == 'loginUser':
  if len(args) != 1:
    print 'loginUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.loginUser(eval(args[0]),))

elif cmd == 'updateUser':
  if len(args) != 1:
    print 'updateUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateUser(eval(args[0]),))

elif cmd == 'checkUserPassword':
  if len(args) != 2:
    print 'checkUserPassword requires 2 args'
    sys.exit(1)
  pp.pprint(client.checkUserPassword(args[0],args[1],))

elif cmd == 'updateUserStatus':
  if len(args) != 2:
    print 'updateUserStatus requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateUserStatus(eval(args[0]),eval(args[1]),))

elif cmd == 'updateUserPassword':
  if len(args) != 3:
    print 'updateUserPassword requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateUserPassword(eval(args[0]),args[1],args[2],))

elif cmd == 'resetUserPassword':
  if len(args) != 1:
    print 'resetUserPassword requires 1 args'
    sys.exit(1)
  pp.pprint(client.resetUserPassword(eval(args[0]),))

elif cmd == 'findUserById':
  if len(args) != 1:
    print 'findUserById requires 1 args'
    sys.exit(1)
  pp.pprint(client.findUserById(eval(args[0]),))

elif cmd == 'findUsersByParams':
  if len(args) != 1:
    print 'findUsersByParams requires 1 args'
    sys.exit(1)
  pp.pprint(client.findUsersByParams(eval(args[0]),))

elif cmd == 'changeOnlineStatus':
  if len(args) != 1:
    print 'changeOnlineStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.changeOnlineStatus(eval(args[0]),))

elif cmd == 'getOnlineStatus':
  if len(args) != 1:
    print 'getOnlineStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.getOnlineStatus(eval(args[0]),))

elif cmd == 'validateEmail':
  if len(args) != 1:
    print 'validateEmail requires 1 args'
    sys.exit(1)
  pp.pprint(client.validateEmail(eval(args[0]),))

elif cmd == 'validateEmailCheck':
  if len(args) != 1:
    print 'validateEmailCheck requires 1 args'
    sys.exit(1)
  pp.pprint(client.validateEmailCheck(eval(args[0]),))

elif cmd == 'getUserByToken':
  if len(args) != 1:
    print 'getUserByToken requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUserByToken(eval(args[0]),))

elif cmd == 'changePassword':
  if len(args) != 1:
    print 'changePassword requires 1 args'
    sys.exit(1)
  pp.pprint(client.changePassword(eval(args[0]),))

elif cmd == 'getPaymentGrid':
  if len(args) != 0:
    print 'getPaymentGrid requires 0 args'
    sys.exit(1)
  pp.pprint(client.getPaymentGrid())

elif cmd == 'getDeliveryGrid':
  if len(args) != 0:
    print 'getDeliveryGrid requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDeliveryGrid())

elif cmd == 'updateUserPasswordWithoutVerification':
  if len(args) != 3:
    print 'updateUserPasswordWithoutVerification requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateUserPasswordWithoutVerification(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'createWithCredentials':
  if len(args) != 2:
    print 'createWithCredentials requires 2 args'
    sys.exit(1)
  pp.pprint(client.createWithCredentials(eval(args[0]),args[1],))

elif cmd == 'getTotalUsers':
  if len(args) != 0:
    print 'getTotalUsers requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTotalUsers())

elif cmd == 'getTotalGroupUsers':
  if len(args) != 1:
    print 'getTotalGroupUsers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTotalGroupUsers(args[0],))

elif cmd == 'auth':
  if len(args) != 3:
    print 'auth requires 3 args'
    sys.exit(1)
  pp.pprint(client.auth(args[0],args[1],args[2],))

elif cmd == 'authenticate':
  if len(args) != 3:
    print 'authenticate requires 3 args'
    sys.exit(1)
  pp.pprint(client.authenticate(args[0],args[1],args[2],))

elif cmd == 'createUserAndSendCredentials':
  if len(args) != 1:
    print 'createUserAndSendCredentials requires 1 args'
    sys.exit(1)
  pp.pprint(client.createUserAndSendCredentials(eval(args[0]),))

elif cmd == 'createUserWithCredentials':
  if len(args) != 2:
    print 'createUserWithCredentials requires 2 args'
    sys.exit(1)
  pp.pprint(client.createUserWithCredentials(eval(args[0]),args[1],))

elif cmd == 'getUserDetailsById':
  if len(args) != 2:
    print 'getUserDetailsById requires 2 args'
    sys.exit(1)
  pp.pprint(client.getUserDetailsById(eval(args[0]),eval(args[1]),))

elif cmd == 'getUserDetailsByLogin':
  if len(args) != 2:
    print 'getUserDetailsByLogin requires 2 args'
    sys.exit(1)
  pp.pprint(client.getUserDetailsByLogin(args[0],eval(args[1]),))

elif cmd == 'getUserDetailsByPhone':
  if len(args) != 2:
    print 'getUserDetailsByPhone requires 2 args'
    sys.exit(1)
  pp.pprint(client.getUserDetailsByPhone(args[0],eval(args[1]),))

elif cmd == 'findUserDetails':
  if len(args) != 1:
    print 'findUserDetails requires 1 args'
    sys.exit(1)
  pp.pprint(client.findUserDetails(eval(args[0]),))

elif cmd == 'findUsersDetailsByParams':
  if len(args) != 1:
    print 'findUsersDetailsByParams requires 1 args'
    sys.exit(1)
  pp.pprint(client.findUsersDetailsByParams(eval(args[0]),))

elif cmd == 'updateUserProfile':
  if len(args) != 2:
    print 'updateUserProfile requires 2 args'
    sys.exit(1)
  pp.pprint(client.updateUserProfile(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
