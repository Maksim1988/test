# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import Common
import gen_py.Exceptions.ttypes
import gen_py.Common.ttypes
import gen_py.AccountingWorkerConstants.ttypes
import gen_py.StaticStorageWorker.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ShopDto:
  """
  Attributes:
   - shopId
   - name
   - address
   - description
   - logoId
   - city
   - phone
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'shopId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'address', None, None, ), # 3
    (4, TType.STRING, 'description', None, None, ), # 4
    (5, TType.STRING, 'logoId', None, None, ), # 5
    (6, TType.STRING, 'city', None, None, ), # 6
    (7, TType.STRING, 'phone', None, None, ), # 7
  )

  def __init__(self, shopId=None, name=None, address=None, description=None, logoId=None, city=None, phone=None,):
    self.shopId = shopId
    self.name = name
    self.address = address
    self.description = description
    self.logoId = logoId
    self.city = city
    self.phone = phone

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.shopId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.logoId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShopDto')
    if self.shopId is not None:
      oprot.writeFieldBegin('shopId', TType.I64, 1)
      oprot.writeI64(self.shopId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 3)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 4)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.logoId is not None:
      oprot.writeFieldBegin('logoId', TType.STRING, 5)
      oprot.writeString(self.logoId)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 6)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 7)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PaymentDto:
  """
  ********************************
               DTO
  *********************************

  Attributes:
   - userId
   - type
   - text
   - requiredText
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'text', None, None, ), # 3
    (4, TType.BOOL, 'requiredText', None, None, ), # 4
  )

  def __init__(self, userId=None, type=None, text=None, requiredText=None,):
    self.userId = userId
    self.type = type
    self.text = text
    self.requiredText = requiredText

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.requiredText = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PaymentDto')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 3)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.requiredText is not None:
      oprot.writeFieldBegin('requiredText', TType.BOOL, 4)
      oprot.writeBool(self.requiredText)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeliveryDto:
  """
  Attributes:
   - userId
   - type
   - text
   - requiredText
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'text', None, None, ), # 3
    (4, TType.BOOL, 'requiredText', None, None, ), # 4
  )

  def __init__(self, userId=None, type=None, text=None, requiredText=None,):
    self.userId = userId
    self.type = type
    self.text = text
    self.requiredText = requiredText

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.requiredText = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeliveryDto')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 3)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.requiredText is not None:
      oprot.writeFieldBegin('requiredText', TType.BOOL, 4)
      oprot.writeBool(self.requiredText)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserDto:
  """
  Attributes:
   - userId
   - registrationTimestamp
   - lastLoginTimestamp
   - lastActivityTimestamp
   - accountStatus
   - onlineStatus
   - authorities
   - login
   - authType
   - avatarId
   - gender
   - phone
   - email
   - firstName
   - lastName
   - displayName
   - city
   - country
   - shopAddress
   - inn
   - kpp
   - ogrn
   - legalAddress
   - actualAddress
   - bankBic
   - bankNameAndAddress
   - bankAccount
   - bankCorrespondentAccount
   - legalName
   - receiveSiteNews
   - receiveNotifications
   - receiveReminders
   - wantsToBeSeller
   - accountNonExpired
   - accountNonLocked
   - locale
   - shop
   - updatePayments
   - payments
   - updateDeliveries
   - deliveries
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.I64, 'registrationTimestamp', None, None, ), # 2
    (3, TType.I64, 'lastLoginTimestamp', None, None, ), # 3
    (4, TType.I64, 'lastActivityTimestamp', None, None, ), # 4
    (5, TType.I32, 'accountStatus', None, None, ), # 5
    (6, TType.I32, 'onlineStatus', None, None, ), # 6
    (7, TType.LIST, 'authorities', (TType.STRING,None), None, ), # 7
    (8, TType.STRING, 'login', None, None, ), # 8
    (9, TType.STRING, 'avatarId', None, None, ), # 9
    (10, TType.I32, 'gender', None, None, ), # 10
    (11, TType.STRING, 'phone', None, None, ), # 11
    (12, TType.STRING, 'email', None, None, ), # 12
    (13, TType.STRING, 'firstName', None, None, ), # 13
    (14, TType.STRING, 'lastName', None, None, ), # 14
    (15, TType.STRING, 'displayName', None, None, ), # 15
    (16, TType.STRING, 'city', None, None, ), # 16
    (17, TType.STRING, 'country', None, None, ), # 17
    (18, TType.STRING, 'shopAddress', None, None, ), # 18
    (19, TType.STRING, 'inn', None, None, ), # 19
    (20, TType.STRING, 'kpp', None, None, ), # 20
    (21, TType.STRING, 'ogrn', None, None, ), # 21
    (22, TType.STRING, 'legalAddress', None, None, ), # 22
    (23, TType.STRING, 'actualAddress', None, None, ), # 23
    (24, TType.STRING, 'bankBic', None, None, ), # 24
    (25, TType.STRING, 'bankNameAndAddress', None, None, ), # 25
    (26, TType.STRING, 'bankAccount', None, None, ), # 26
    (27, TType.STRING, 'bankCorrespondentAccount', None, None, ), # 27
    (28, TType.STRING, 'legalName', None, None, ), # 28
    (29, TType.BOOL, 'receiveSiteNews', None, None, ), # 29
    (30, TType.BOOL, 'receiveNotifications', None, None, ), # 30
    (31, TType.BOOL, 'receiveReminders', None, None, ), # 31
    (32, TType.BOOL, 'wantsToBeSeller', None, None, ), # 32
    (33, TType.BOOL, 'accountNonExpired', None, None, ), # 33
    (34, TType.BOOL, 'accountNonLocked', None, None, ), # 34
    (35, TType.I32, 'authType', None, None, ), # 35
    (36, TType.STRING, 'locale', None, None, ), # 36
    (37, TType.STRUCT, 'shop', (ShopDto, ShopDto.thrift_spec), None, ), # 37
    (38, TType.BOOL, 'updatePayments', None, None, ), # 38
    (39, TType.LIST, 'payments', (TType.STRUCT,(PaymentDto, PaymentDto.thrift_spec)), None, ), # 39
    (40, TType.BOOL, 'updateDeliveries', None, None, ), # 40
    (41, TType.LIST, 'deliveries', (TType.STRUCT,(DeliveryDto, DeliveryDto.thrift_spec)), None, ), # 41
  )

  def __init__(self, userId=None, registrationTimestamp=None, lastLoginTimestamp=None, lastActivityTimestamp=None, accountStatus=None, onlineStatus=None, authorities=None, login=None, authType=None, avatarId=None, gender=None, phone=None, email=None, firstName=None, lastName=None, displayName=None, city=None, country=None, shopAddress=None, inn=None, kpp=None, ogrn=None, legalAddress=None, actualAddress=None, bankBic=None, bankNameAndAddress=None, bankAccount=None, bankCorrespondentAccount=None, legalName=None, receiveSiteNews=None, receiveNotifications=None, receiveReminders=None, wantsToBeSeller=None, accountNonExpired=None, accountNonLocked=None, locale=None, shop=None, updatePayments=None, payments=None, updateDeliveries=None, deliveries=None,):
    self.userId = userId
    self.registrationTimestamp = registrationTimestamp
    self.lastLoginTimestamp = lastLoginTimestamp
    self.lastActivityTimestamp = lastActivityTimestamp
    self.accountStatus = accountStatus
    self.onlineStatus = onlineStatus
    self.authorities = authorities
    self.login = login
    self.authType = authType
    self.avatarId = avatarId
    self.gender = gender
    self.phone = phone
    self.email = email
    self.firstName = firstName
    self.lastName = lastName
    self.displayName = displayName
    self.city = city
    self.country = country
    self.shopAddress = shopAddress
    self.inn = inn
    self.kpp = kpp
    self.ogrn = ogrn
    self.legalAddress = legalAddress
    self.actualAddress = actualAddress
    self.bankBic = bankBic
    self.bankNameAndAddress = bankNameAndAddress
    self.bankAccount = bankAccount
    self.bankCorrespondentAccount = bankCorrespondentAccount
    self.legalName = legalName
    self.receiveSiteNews = receiveSiteNews
    self.receiveNotifications = receiveNotifications
    self.receiveReminders = receiveReminders
    self.wantsToBeSeller = wantsToBeSeller
    self.accountNonExpired = accountNonExpired
    self.accountNonLocked = accountNonLocked
    self.locale = locale
    self.shop = shop
    self.updatePayments = updatePayments
    self.payments = payments
    self.updateDeliveries = updateDeliveries
    self.deliveries = deliveries

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.registrationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.lastLoginTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.lastActivityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.accountStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.onlineStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.authorities = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.authorities.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.authType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.avatarId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.displayName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.shopAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.inn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.kpp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.ogrn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.legalAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.actualAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.bankBic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.bankNameAndAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.bankAccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.bankCorrespondentAccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.legalName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.receiveSiteNews = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.BOOL:
          self.receiveNotifications = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.receiveReminders = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.BOOL:
          self.wantsToBeSeller = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.BOOL:
          self.accountNonExpired = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.BOOL:
          self.accountNonLocked = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRUCT:
          self.shop = ShopDto()
          self.shop.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.BOOL:
          self.updatePayments = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.LIST:
          self.payments = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = PaymentDto()
            _elem11.read(iprot)
            self.payments.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.updateDeliveries = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.LIST:
          self.deliveries = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = DeliveryDto()
            _elem17.read(iprot)
            self.deliveries.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserDto')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.registrationTimestamp is not None:
      oprot.writeFieldBegin('registrationTimestamp', TType.I64, 2)
      oprot.writeI64(self.registrationTimestamp)
      oprot.writeFieldEnd()
    if self.lastLoginTimestamp is not None:
      oprot.writeFieldBegin('lastLoginTimestamp', TType.I64, 3)
      oprot.writeI64(self.lastLoginTimestamp)
      oprot.writeFieldEnd()
    if self.lastActivityTimestamp is not None:
      oprot.writeFieldBegin('lastActivityTimestamp', TType.I64, 4)
      oprot.writeI64(self.lastActivityTimestamp)
      oprot.writeFieldEnd()
    if self.accountStatus is not None:
      oprot.writeFieldBegin('accountStatus', TType.I32, 5)
      oprot.writeI32(self.accountStatus)
      oprot.writeFieldEnd()
    if self.onlineStatus is not None:
      oprot.writeFieldBegin('onlineStatus', TType.I32, 6)
      oprot.writeI32(self.onlineStatus)
      oprot.writeFieldEnd()
    if self.authorities is not None:
      oprot.writeFieldBegin('authorities', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.authorities))
      for iter18 in self.authorities:
        oprot.writeString(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 8)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.avatarId is not None:
      oprot.writeFieldBegin('avatarId', TType.STRING, 9)
      oprot.writeString(self.avatarId)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 10)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 11)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 12)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 13)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 14)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.displayName is not None:
      oprot.writeFieldBegin('displayName', TType.STRING, 15)
      oprot.writeString(self.displayName)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 16)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 17)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.shopAddress is not None:
      oprot.writeFieldBegin('shopAddress', TType.STRING, 18)
      oprot.writeString(self.shopAddress)
      oprot.writeFieldEnd()
    if self.inn is not None:
      oprot.writeFieldBegin('inn', TType.STRING, 19)
      oprot.writeString(self.inn)
      oprot.writeFieldEnd()
    if self.kpp is not None:
      oprot.writeFieldBegin('kpp', TType.STRING, 20)
      oprot.writeString(self.kpp)
      oprot.writeFieldEnd()
    if self.ogrn is not None:
      oprot.writeFieldBegin('ogrn', TType.STRING, 21)
      oprot.writeString(self.ogrn)
      oprot.writeFieldEnd()
    if self.legalAddress is not None:
      oprot.writeFieldBegin('legalAddress', TType.STRING, 22)
      oprot.writeString(self.legalAddress)
      oprot.writeFieldEnd()
    if self.actualAddress is not None:
      oprot.writeFieldBegin('actualAddress', TType.STRING, 23)
      oprot.writeString(self.actualAddress)
      oprot.writeFieldEnd()
    if self.bankBic is not None:
      oprot.writeFieldBegin('bankBic', TType.STRING, 24)
      oprot.writeString(self.bankBic)
      oprot.writeFieldEnd()
    if self.bankNameAndAddress is not None:
      oprot.writeFieldBegin('bankNameAndAddress', TType.STRING, 25)
      oprot.writeString(self.bankNameAndAddress)
      oprot.writeFieldEnd()
    if self.bankAccount is not None:
      oprot.writeFieldBegin('bankAccount', TType.STRING, 26)
      oprot.writeString(self.bankAccount)
      oprot.writeFieldEnd()
    if self.bankCorrespondentAccount is not None:
      oprot.writeFieldBegin('bankCorrespondentAccount', TType.STRING, 27)
      oprot.writeString(self.bankCorrespondentAccount)
      oprot.writeFieldEnd()
    if self.legalName is not None:
      oprot.writeFieldBegin('legalName', TType.STRING, 28)
      oprot.writeString(self.legalName)
      oprot.writeFieldEnd()
    if self.receiveSiteNews is not None:
      oprot.writeFieldBegin('receiveSiteNews', TType.BOOL, 29)
      oprot.writeBool(self.receiveSiteNews)
      oprot.writeFieldEnd()
    if self.receiveNotifications is not None:
      oprot.writeFieldBegin('receiveNotifications', TType.BOOL, 30)
      oprot.writeBool(self.receiveNotifications)
      oprot.writeFieldEnd()
    if self.receiveReminders is not None:
      oprot.writeFieldBegin('receiveReminders', TType.BOOL, 31)
      oprot.writeBool(self.receiveReminders)
      oprot.writeFieldEnd()
    if self.wantsToBeSeller is not None:
      oprot.writeFieldBegin('wantsToBeSeller', TType.BOOL, 32)
      oprot.writeBool(self.wantsToBeSeller)
      oprot.writeFieldEnd()
    if self.accountNonExpired is not None:
      oprot.writeFieldBegin('accountNonExpired', TType.BOOL, 33)
      oprot.writeBool(self.accountNonExpired)
      oprot.writeFieldEnd()
    if self.accountNonLocked is not None:
      oprot.writeFieldBegin('accountNonLocked', TType.BOOL, 34)
      oprot.writeBool(self.accountNonLocked)
      oprot.writeFieldEnd()
    if self.authType is not None:
      oprot.writeFieldBegin('authType', TType.I32, 35)
      oprot.writeI32(self.authType)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 36)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.shop is not None:
      oprot.writeFieldBegin('shop', TType.STRUCT, 37)
      self.shop.write(oprot)
      oprot.writeFieldEnd()
    if self.updatePayments is not None:
      oprot.writeFieldBegin('updatePayments', TType.BOOL, 38)
      oprot.writeBool(self.updatePayments)
      oprot.writeFieldEnd()
    if self.payments is not None:
      oprot.writeFieldBegin('payments', TType.LIST, 39)
      oprot.writeListBegin(TType.STRUCT, len(self.payments))
      for iter19 in self.payments:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.updateDeliveries is not None:
      oprot.writeFieldBegin('updateDeliveries', TType.BOOL, 40)
      oprot.writeBool(self.updateDeliveries)
      oprot.writeFieldEnd()
    if self.deliveries is not None:
      oprot.writeFieldBegin('deliveries', TType.LIST, 41)
      oprot.writeListBegin(TType.STRUCT, len(self.deliveries))
      for iter20 in self.deliveries:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileDto:
  """
  Attributes:
   - locale
   - login
   - phone
   - email
   - gender
   - displayName
   - firstName
   - lastName
   - city
   - country
   - avatarId
   - receiveSiteNews: Настройки уведомлений. Нотификации обозначают рассылки о каких-то только что совершённых действиях (получено новое
  сообщение), а напоминания - о несовершённых за последнее время действиях (пользователь забыл закрыть сделку или
  выполнить иную ожидаемую операцию).

   - receiveNotifications
   - receiveReminders
   - legalName
   - shopAddress
   - inn
   - kpp
   - ogrn
   - legalAddress
   - actualAddress
   - bankBic
   - bankNameAndAddress
   - bankAccount
   - bankCorrespondentAccount
   - wantsToBeSeller
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
    (2, TType.STRING, 'login', None, None, ), # 2
    (3, TType.STRING, 'phone', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.I32, 'gender', None, None, ), # 5
    (6, TType.STRING, 'displayName', None, None, ), # 6
    (7, TType.STRING, 'firstName', None, None, ), # 7
    (8, TType.STRING, 'lastName', None, None, ), # 8
    (9, TType.STRING, 'city', None, None, ), # 9
    (10, TType.STRING, 'country', None, None, ), # 10
    None, # 11
    (12, TType.STRING, 'avatarId', None, None, ), # 12
    (13, TType.BOOL, 'receiveSiteNews', None, None, ), # 13
    (14, TType.BOOL, 'receiveNotifications', None, None, ), # 14
    (15, TType.BOOL, 'receiveReminders', None, None, ), # 15
    (16, TType.STRING, 'inn', None, None, ), # 16
    (17, TType.STRING, 'kpp', None, None, ), # 17
    (18, TType.STRING, 'ogrn', None, None, ), # 18
    (19, TType.STRING, 'legalAddress', None, None, ), # 19
    (20, TType.STRING, 'actualAddress', None, None, ), # 20
    (21, TType.STRING, 'bankBic', None, None, ), # 21
    (22, TType.STRING, 'bankNameAndAddress', None, None, ), # 22
    (23, TType.STRING, 'bankAccount', None, None, ), # 23
    (24, TType.STRING, 'bankCorrespondentAccount', None, None, ), # 24
    (25, TType.BOOL, 'wantsToBeSeller', None, None, ), # 25
    (26, TType.STRING, 'legalName', None, None, ), # 26
    (27, TType.STRING, 'shopAddress', None, None, ), # 27
  )

  def __init__(self, locale=None, login=None, phone=None, email=None, gender=None, displayName=None, firstName=None, lastName=None, city=None, country=None, avatarId=None, receiveSiteNews=None, receiveNotifications=None, receiveReminders=None, legalName=None, shopAddress=None, inn=None, kpp=None, ogrn=None, legalAddress=None, actualAddress=None, bankBic=None, bankNameAndAddress=None, bankAccount=None, bankCorrespondentAccount=None, wantsToBeSeller=None,):
    self.locale = locale
    self.login = login
    self.phone = phone
    self.email = email
    self.gender = gender
    self.displayName = displayName
    self.firstName = firstName
    self.lastName = lastName
    self.city = city
    self.country = country
    self.avatarId = avatarId
    self.receiveSiteNews = receiveSiteNews
    self.receiveNotifications = receiveNotifications
    self.receiveReminders = receiveReminders
    self.legalName = legalName
    self.shopAddress = shopAddress
    self.inn = inn
    self.kpp = kpp
    self.ogrn = ogrn
    self.legalAddress = legalAddress
    self.actualAddress = actualAddress
    self.bankBic = bankBic
    self.bankNameAndAddress = bankNameAndAddress
    self.bankAccount = bankAccount
    self.bankCorrespondentAccount = bankCorrespondentAccount
    self.wantsToBeSeller = wantsToBeSeller

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.displayName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.avatarId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.receiveSiteNews = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.receiveNotifications = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.receiveReminders = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.legalName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.shopAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.inn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.kpp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.ogrn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.legalAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.actualAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.bankBic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.bankNameAndAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.bankAccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.bankCorrespondentAccount = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.BOOL:
          self.wantsToBeSeller = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileDto')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 2)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 3)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 5)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.displayName is not None:
      oprot.writeFieldBegin('displayName', TType.STRING, 6)
      oprot.writeString(self.displayName)
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 7)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 8)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 9)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 10)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.avatarId is not None:
      oprot.writeFieldBegin('avatarId', TType.STRING, 12)
      oprot.writeString(self.avatarId)
      oprot.writeFieldEnd()
    if self.receiveSiteNews is not None:
      oprot.writeFieldBegin('receiveSiteNews', TType.BOOL, 13)
      oprot.writeBool(self.receiveSiteNews)
      oprot.writeFieldEnd()
    if self.receiveNotifications is not None:
      oprot.writeFieldBegin('receiveNotifications', TType.BOOL, 14)
      oprot.writeBool(self.receiveNotifications)
      oprot.writeFieldEnd()
    if self.receiveReminders is not None:
      oprot.writeFieldBegin('receiveReminders', TType.BOOL, 15)
      oprot.writeBool(self.receiveReminders)
      oprot.writeFieldEnd()
    if self.inn is not None:
      oprot.writeFieldBegin('inn', TType.STRING, 16)
      oprot.writeString(self.inn)
      oprot.writeFieldEnd()
    if self.kpp is not None:
      oprot.writeFieldBegin('kpp', TType.STRING, 17)
      oprot.writeString(self.kpp)
      oprot.writeFieldEnd()
    if self.ogrn is not None:
      oprot.writeFieldBegin('ogrn', TType.STRING, 18)
      oprot.writeString(self.ogrn)
      oprot.writeFieldEnd()
    if self.legalAddress is not None:
      oprot.writeFieldBegin('legalAddress', TType.STRING, 19)
      oprot.writeString(self.legalAddress)
      oprot.writeFieldEnd()
    if self.actualAddress is not None:
      oprot.writeFieldBegin('actualAddress', TType.STRING, 20)
      oprot.writeString(self.actualAddress)
      oprot.writeFieldEnd()
    if self.bankBic is not None:
      oprot.writeFieldBegin('bankBic', TType.STRING, 21)
      oprot.writeString(self.bankBic)
      oprot.writeFieldEnd()
    if self.bankNameAndAddress is not None:
      oprot.writeFieldBegin('bankNameAndAddress', TType.STRING, 22)
      oprot.writeString(self.bankNameAndAddress)
      oprot.writeFieldEnd()
    if self.bankAccount is not None:
      oprot.writeFieldBegin('bankAccount', TType.STRING, 23)
      oprot.writeString(self.bankAccount)
      oprot.writeFieldEnd()
    if self.bankCorrespondentAccount is not None:
      oprot.writeFieldBegin('bankCorrespondentAccount', TType.STRING, 24)
      oprot.writeString(self.bankCorrespondentAccount)
      oprot.writeFieldEnd()
    if self.wantsToBeSeller is not None:
      oprot.writeFieldBegin('wantsToBeSeller', TType.BOOL, 25)
      oprot.writeBool(self.wantsToBeSeller)
      oprot.writeFieldEnd()
    if self.legalName is not None:
      oprot.writeFieldBegin('legalName', TType.STRING, 26)
      oprot.writeString(self.legalName)
      oprot.writeFieldEnd()
    if self.shopAddress is not None:
      oprot.writeFieldBegin('shopAddress', TType.STRING, 27)
      oprot.writeString(self.shopAddress)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfoDto:
  """
  @Deprecated - will be removed in future releases, please use UserDto


  Attributes:
   - userId
   - profile
   - authorities
   - accountStatus
   - lastActivityTimestamp
   - registrationTimestamp
   - onlineStatus
   - lastLoginTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.STRUCT, 'profile', (UserProfileDto, UserProfileDto.thrift_spec), None, ), # 2
    None, # 3
    (4, TType.LIST, 'authorities', (TType.STRING,None), None, ), # 4
    (5, TType.I32, 'accountStatus', None, None, ), # 5
    (6, TType.I64, 'lastActivityTimestamp', None, None, ), # 6
    (7, TType.I64, 'registrationTimestamp', None, None, ), # 7
    (8, TType.I32, 'onlineStatus', None, None, ), # 8
    (9, TType.I64, 'lastLoginTimestamp', None, None, ), # 9
  )

  def __init__(self, userId=None, profile=None, authorities=None, accountStatus=None, lastActivityTimestamp=None, registrationTimestamp=None, onlineStatus=None, lastLoginTimestamp=None,):
    self.userId = userId
    self.profile = profile
    self.authorities = authorities
    self.accountStatus = accountStatus
    self.lastActivityTimestamp = lastActivityTimestamp
    self.registrationTimestamp = registrationTimestamp
    self.onlineStatus = onlineStatus
    self.lastLoginTimestamp = lastLoginTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.profile = UserProfileDto()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.authorities = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.authorities.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.accountStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastActivityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.registrationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.onlineStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.lastLoginTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfoDto')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 2)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.authorities is not None:
      oprot.writeFieldBegin('authorities', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.authorities))
      for iter27 in self.authorities:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.accountStatus is not None:
      oprot.writeFieldBegin('accountStatus', TType.I32, 5)
      oprot.writeI32(self.accountStatus)
      oprot.writeFieldEnd()
    if self.lastActivityTimestamp is not None:
      oprot.writeFieldBegin('lastActivityTimestamp', TType.I64, 6)
      oprot.writeI64(self.lastActivityTimestamp)
      oprot.writeFieldEnd()
    if self.registrationTimestamp is not None:
      oprot.writeFieldBegin('registrationTimestamp', TType.I64, 7)
      oprot.writeI64(self.registrationTimestamp)
      oprot.writeFieldEnd()
    if self.onlineStatus is not None:
      oprot.writeFieldBegin('onlineStatus', TType.I32, 8)
      oprot.writeI32(self.onlineStatus)
      oprot.writeFieldEnd()
    if self.lastLoginTimestamp is not None:
      oprot.writeFieldBegin('lastLoginTimestamp', TType.I64, 9)
      oprot.writeI64(self.lastLoginTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FindUserRequestDto:
  """
  ********************************
               REQUESTS
  *********************************

  Attributes:
   - phone_part
   - limit
   - offset
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'phone_part', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    (8, TType.I32, 'limit', None, None, ), # 8
    (9, TType.I32, 'offset', None, None, ), # 9
    (10, TType.STRING, 'locale', None, None, ), # 10
  )

  def __init__(self, phone_part=None, limit=None, offset=None, locale=None,):
    self.phone_part = phone_part
    self.limit = limit
    self.offset = offset
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.phone_part = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FindUserRequestDto')
    if self.phone_part is not None:
      oprot.writeFieldBegin('phone_part', TType.STRING, 1)
      oprot.writeString(self.phone_part)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 8)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 9)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 10)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsersParamsRequest:
  """
  Attributes:
   - sig
   - limit
   - offset
   - userIdSet
   - phoneSet
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'limit', None, None, ), # 1
    (2, TType.I32, 'offset', None, None, ), # 2
    (3, TType.SET, 'userIdSet', (TType.I32,None), None, ), # 3
    (4, TType.SET, 'phoneSet', (TType.STRING,None), None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, limit=None, offset=None, userIdSet=None, phoneSet=None,):
    self.sig = sig
    self.limit = limit
    self.offset = offset
    self.userIdSet = userIdSet
    self.phoneSet = phoneSet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.userIdSet = set()
          (_etype31, _size28) = iprot.readSetBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.userIdSet.add(_elem33)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.phoneSet = set()
          (_etype37, _size34) = iprot.readSetBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readString();
            self.phoneSet.add(_elem39)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsersParamsRequest')
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 1)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 2)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.userIdSet is not None:
      oprot.writeFieldBegin('userIdSet', TType.SET, 3)
      oprot.writeSetBegin(TType.I32, len(self.userIdSet))
      for iter40 in self.userIdSet:
        oprot.writeI32(iter40)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.phoneSet is not None:
      oprot.writeFieldBegin('phoneSet', TType.SET, 4)
      oprot.writeSetBegin(TType.STRING, len(self.phoneSet))
      for iter41 in self.phoneSet:
        oprot.writeString(iter41)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserOnlineStatusRequest:
  """
  Attributes:
   - userId
   - onlineStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.I32, 'onlineStatus', None, None, ), # 2
  )

  def __init__(self, userId=None, onlineStatus=None,):
    self.userId = userId
    self.onlineStatus = onlineStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.onlineStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserOnlineStatusRequest')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.onlineStatus is not None:
      oprot.writeFieldBegin('onlineStatus', TType.I32, 2)
      oprot.writeI32(self.onlineStatus)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthCodeCheckRequest:
  """
  Attributes:
   - userId
   - value
   - authType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
    (3, TType.I32, 'authType', None, None, ), # 3
  )

  def __init__(self, userId=None, value=None, authType=None,):
    self.userId = userId
    self.value = value
    self.authType = authType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.authType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthCodeCheckRequest')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.authType is not None:
      oprot.writeFieldBegin('authType', TType.I32, 3)
      oprot.writeI32(self.authType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegisterRequest:
  """
  Attributes:
   - sig
   - user
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'user', (UserDto, UserDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, user=None, password=None,):
    self.sig = sig
    self.user = user
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.user = UserDto()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisterRequest')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 1)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginRequest:
  """
  Attributes:
   - sig
   - phone
   - email
   - password
   - sessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'phone', None, None, ), # 1
    (2, TType.STRING, 'email', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.STRING, 'sessionId', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, phone=None, email=None, password=None, sessionId=None,):
    self.sig = sig
    self.phone = phone
    self.email = email
    self.password = password
    self.sessionId = sessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginRequest')
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 1)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 2)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 4)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ValidateEmailRequest:
  """
  Attributes:
   - email
   - urlPrefix
   - authType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'email', None, None, ), # 1
    (2, TType.STRING, 'urlPrefix', None, None, ), # 2
    (3, TType.I32, 'authType', None, None, ), # 3
  )

  def __init__(self, email=None, urlPrefix=None, authType=None,):
    self.email = email
    self.urlPrefix = urlPrefix
    self.authType = authType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.urlPrefix = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.authType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ValidateEmailRequest')
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 1)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.urlPrefix is not None:
      oprot.writeFieldBegin('urlPrefix', TType.STRING, 2)
      oprot.writeString(self.urlPrefix)
      oprot.writeFieldEnd()
    if self.authType is not None:
      oprot.writeFieldBegin('authType', TType.I32, 3)
      oprot.writeI32(self.authType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TokenRequest:
  """
  Attributes:
   - token
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
  )

  def __init__(self, token=None,):
    self.token = token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TokenRequest')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChangePasswordRequest:
  """
  Attributes:
   - token
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
  )

  def __init__(self, token=None, password=None,):
    self.token = token
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChangePasswordRequest')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserListResponse:
  """
  ********************************
               RESPONSES
  *********************************

  Attributes:
   - sig
   - dtoList
   - totalCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'dtoList', (TType.STRUCT,(UserDto, UserDto.thrift_spec)), None, ), # 1
    (2, TType.I32, 'totalCount', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, dtoList=None, totalCount=None,):
    self.sig = sig
    self.dtoList = dtoList
    self.totalCount = totalCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.LIST:
          self.dtoList = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = UserDto()
            _elem47.read(iprot)
            self.dtoList.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserListResponse')
    if self.dtoList is not None:
      oprot.writeFieldBegin('dtoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.dtoList))
      for iter48 in self.dtoList:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 2)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ValidateEmailCheckResponse:
  """
  Attributes:
   - success
   - user
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'success', None, None, ), # 1
    (2, TType.STRUCT, 'user', (UserDto, UserDto.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, user=None,):
    self.success = success
    self.user = user

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user = UserDto()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ValidateEmailCheckResponse')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 1)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 2)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthenticationException(TException):
  """
  ********************************
               EXCEPTIONS
  *********************************

  Attributes:
   - reason
   - failure
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'reason', None, None, ), # 1
    (2, TType.I32, 'failure', None, None, ), # 2
  )

  def __init__(self, reason=None, failure=None,):
    self.reason = reason
    self.failure = failure

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.failure = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthenticationException')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 1)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.failure is not None:
      oprot.writeFieldBegin('failure', TType.I32, 2)
      oprot.writeI32(self.failure)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserRolesChangedEvent:
  """
  Attributes:
   - userId
   - oldRoles
   - newRoles
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.LIST, 'oldRoles', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'newRoles', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, userId=None, oldRoles=None, newRoles=None,):
    self.userId = userId
    self.oldRoles = oldRoles
    self.newRoles = newRoles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.oldRoles = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readString();
            self.oldRoles.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.newRoles = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readString();
            self.newRoles.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserRolesChangedEvent')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.oldRoles is not None:
      oprot.writeFieldBegin('oldRoles', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.oldRoles))
      for iter61 in self.oldRoles:
        oprot.writeString(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.newRoles is not None:
      oprot.writeFieldBegin('newRoles', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.newRoles))
      for iter62 in self.newRoles:
        oprot.writeString(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
