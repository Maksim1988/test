# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def createFieldDefinition(self, definitionWrapper, locale):
    """
    Field Definitions CRUD


    Parameters:
     - definitionWrapper
     - locale
    """
    pass

  def getAllFieldDefinitions(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def updateFieldDefinition(self, definitionWrapper, locale):
    """
    Parameters:
     - definitionWrapper
     - locale
    """
    pass

  def deleteFieldDefinition(self, name):
    """
    Parameters:
     - name
    """
    pass

  def createManagementCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    pass

  def getAllManagementCategories(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getManagementCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    pass

  def updateManagementCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    pass

  def deleteManagementCategory(self, id):
    """
    Parameters:
     - id
    """
    pass

  def createCatalogCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    pass

  def getAllCatalogCategories(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getCatalogCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    pass

  def updateCatalogCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    pass

  def deleteCatalogCategory(self, id):
    """
    Parameters:
     - id
    """
    pass

  def getSupportedLocales(self):
    pass

  def ensureLocale(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getFieldDefinitionLocalizedValues(self, fieldName):
    """
    Parameters:
     - fieldName
    """
    pass

  def getManagementCategoriesLocalizedValues(self, categoryId):
    """
    Parameters:
     - categoryId
    """
    pass

  def getCatalogCategoriesLocalizedValues(self, categoryId):
    """
    Parameters:
     - categoryId
    """
    pass

  def saveFieldDefinitionLocalization(self, fieldName, locale, values):
    """
    Parameters:
     - fieldName
     - locale
     - values
    """
    pass

  def saveManagementCategoryLocalization(self, categoryId, locale, values):
    """
    Parameters:
     - categoryId
     - locale
     - values
    """
    pass

  def saveCatalogCategoryLocalization(self, categoryId, locale, values):
    """
    Parameters:
     - categoryId
     - locale
     - values
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def createFieldDefinition(self, definitionWrapper, locale):
    """
    Field Definitions CRUD


    Parameters:
     - definitionWrapper
     - locale
    """
    self.send_createFieldDefinition(definitionWrapper, locale)
    self.recv_createFieldDefinition()

  def send_createFieldDefinition(self, definitionWrapper, locale):
    self._oprot.writeMessageBegin('createFieldDefinition', TMessageType.CALL, self._seqid)
    args = createFieldDefinition_args()
    args.definitionWrapper = definitionWrapper
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createFieldDefinition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createFieldDefinition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aee is not None:
      raise result.aee
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def getAllFieldDefinitions(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getAllFieldDefinitions(locale)
    return self.recv_getAllFieldDefinitions()

  def send_getAllFieldDefinitions(self, locale):
    self._oprot.writeMessageBegin('getAllFieldDefinitions', TMessageType.CALL, self._seqid)
    args = getAllFieldDefinitions_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllFieldDefinitions(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllFieldDefinitions_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.me is not None:
      raise result.me
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllFieldDefinitions failed: unknown result");

  def updateFieldDefinition(self, definitionWrapper, locale):
    """
    Parameters:
     - definitionWrapper
     - locale
    """
    self.send_updateFieldDefinition(definitionWrapper, locale)
    self.recv_updateFieldDefinition()

  def send_updateFieldDefinition(self, definitionWrapper, locale):
    self._oprot.writeMessageBegin('updateFieldDefinition', TMessageType.CALL, self._seqid)
    args = updateFieldDefinition_args()
    args.definitionWrapper = definitionWrapper
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateFieldDefinition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateFieldDefinition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def deleteFieldDefinition(self, name):
    """
    Parameters:
     - name
    """
    self.send_deleteFieldDefinition(name)
    self.recv_deleteFieldDefinition()

  def send_deleteFieldDefinition(self, name):
    self._oprot.writeMessageBegin('deleteFieldDefinition', TMessageType.CALL, self._seqid)
    args = deleteFieldDefinition_args()
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteFieldDefinition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteFieldDefinition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def createManagementCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    self.send_createManagementCategory(category, locale)
    return self.recv_createManagementCategory()

  def send_createManagementCategory(self, category, locale):
    self._oprot.writeMessageBegin('createManagementCategory', TMessageType.CALL, self._seqid)
    args = createManagementCategory_args()
    args.category = category
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createManagementCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createManagementCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.aee is not None:
      raise result.aee
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createManagementCategory failed: unknown result");

  def getAllManagementCategories(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getAllManagementCategories(locale)
    return self.recv_getAllManagementCategories()

  def send_getAllManagementCategories(self, locale):
    self._oprot.writeMessageBegin('getAllManagementCategories', TMessageType.CALL, self._seqid)
    args = getAllManagementCategories_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllManagementCategories(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllManagementCategories_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllManagementCategories failed: unknown result");

  def getManagementCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    self.send_getManagementCategory(categoryId, locale)
    return self.recv_getManagementCategory()

  def send_getManagementCategory(self, categoryId, locale):
    self._oprot.writeMessageBegin('getManagementCategory', TMessageType.CALL, self._seqid)
    args = getManagementCategory_args()
    args.categoryId = categoryId
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getManagementCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getManagementCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getManagementCategory failed: unknown result");

  def updateManagementCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    self.send_updateManagementCategory(category, locale)
    self.recv_updateManagementCategory()

  def send_updateManagementCategory(self, category, locale):
    self._oprot.writeMessageBegin('updateManagementCategory', TMessageType.CALL, self._seqid)
    args = updateManagementCategory_args()
    args.category = category
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateManagementCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateManagementCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def deleteManagementCategory(self, id):
    """
    Parameters:
     - id
    """
    self.send_deleteManagementCategory(id)
    self.recv_deleteManagementCategory()

  def send_deleteManagementCategory(self, id):
    self._oprot.writeMessageBegin('deleteManagementCategory', TMessageType.CALL, self._seqid)
    args = deleteManagementCategory_args()
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteManagementCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteManagementCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def createCatalogCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    self.send_createCatalogCategory(category, locale)
    return self.recv_createCatalogCategory()

  def send_createCatalogCategory(self, category, locale):
    self._oprot.writeMessageBegin('createCatalogCategory', TMessageType.CALL, self._seqid)
    args = createCatalogCategory_args()
    args.category = category
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createCatalogCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createCatalogCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createCatalogCategory failed: unknown result");

  def getAllCatalogCategories(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getAllCatalogCategories(locale)
    return self.recv_getAllCatalogCategories()

  def send_getAllCatalogCategories(self, locale):
    self._oprot.writeMessageBegin('getAllCatalogCategories', TMessageType.CALL, self._seqid)
    args = getAllCatalogCategories_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllCatalogCategories(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllCatalogCategories_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllCatalogCategories failed: unknown result");

  def getCatalogCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    self.send_getCatalogCategory(categoryId, locale)
    return self.recv_getCatalogCategory()

  def send_getCatalogCategory(self, categoryId, locale):
    self._oprot.writeMessageBegin('getCatalogCategory', TMessageType.CALL, self._seqid)
    args = getCatalogCategory_args()
    args.categoryId = categoryId
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCatalogCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getCatalogCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCatalogCategory failed: unknown result");

  def updateCatalogCategory(self, category, locale):
    """
    Parameters:
     - category
     - locale
    """
    self.send_updateCatalogCategory(category, locale)
    self.recv_updateCatalogCategory()

  def send_updateCatalogCategory(self, category, locale):
    self._oprot.writeMessageBegin('updateCatalogCategory', TMessageType.CALL, self._seqid)
    args = updateCatalogCategory_args()
    args.category = category
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateCatalogCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateCatalogCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def deleteCatalogCategory(self, id):
    """
    Parameters:
     - id
    """
    self.send_deleteCatalogCategory(id)
    self.recv_deleteCatalogCategory()

  def send_deleteCatalogCategory(self, id):
    self._oprot.writeMessageBegin('deleteCatalogCategory', TMessageType.CALL, self._seqid)
    args = deleteCatalogCategory_args()
    args.id = id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteCatalogCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteCatalogCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def getSupportedLocales(self):
    self.send_getSupportedLocales()
    return self.recv_getSupportedLocales()

  def send_getSupportedLocales(self):
    self._oprot.writeMessageBegin('getSupportedLocales', TMessageType.CALL, self._seqid)
    args = getSupportedLocales_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSupportedLocales(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSupportedLocales_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSupportedLocales failed: unknown result");

  def ensureLocale(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_ensureLocale(locale)
    self.recv_ensureLocale()

  def send_ensureLocale(self, locale):
    self._oprot.writeMessageBegin('ensureLocale', TMessageType.CALL, self._seqid)
    args = ensureLocale_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ensureLocale(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ensureLocale_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def getFieldDefinitionLocalizedValues(self, fieldName):
    """
    Parameters:
     - fieldName
    """
    self.send_getFieldDefinitionLocalizedValues(fieldName)
    return self.recv_getFieldDefinitionLocalizedValues()

  def send_getFieldDefinitionLocalizedValues(self, fieldName):
    self._oprot.writeMessageBegin('getFieldDefinitionLocalizedValues', TMessageType.CALL, self._seqid)
    args = getFieldDefinitionLocalizedValues_args()
    args.fieldName = fieldName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFieldDefinitionLocalizedValues(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getFieldDefinitionLocalizedValues_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFieldDefinitionLocalizedValues failed: unknown result");

  def getManagementCategoriesLocalizedValues(self, categoryId):
    """
    Parameters:
     - categoryId
    """
    self.send_getManagementCategoriesLocalizedValues(categoryId)
    return self.recv_getManagementCategoriesLocalizedValues()

  def send_getManagementCategoriesLocalizedValues(self, categoryId):
    self._oprot.writeMessageBegin('getManagementCategoriesLocalizedValues', TMessageType.CALL, self._seqid)
    args = getManagementCategoriesLocalizedValues_args()
    args.categoryId = categoryId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getManagementCategoriesLocalizedValues(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getManagementCategoriesLocalizedValues_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getManagementCategoriesLocalizedValues failed: unknown result");

  def getCatalogCategoriesLocalizedValues(self, categoryId):
    """
    Parameters:
     - categoryId
    """
    self.send_getCatalogCategoriesLocalizedValues(categoryId)
    return self.recv_getCatalogCategoriesLocalizedValues()

  def send_getCatalogCategoriesLocalizedValues(self, categoryId):
    self._oprot.writeMessageBegin('getCatalogCategoriesLocalizedValues', TMessageType.CALL, self._seqid)
    args = getCatalogCategoriesLocalizedValues_args()
    args.categoryId = categoryId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCatalogCategoriesLocalizedValues(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getCatalogCategoriesLocalizedValues_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCatalogCategoriesLocalizedValues failed: unknown result");

  def saveFieldDefinitionLocalization(self, fieldName, locale, values):
    """
    Parameters:
     - fieldName
     - locale
     - values
    """
    self.send_saveFieldDefinitionLocalization(fieldName, locale, values)
    self.recv_saveFieldDefinitionLocalization()

  def send_saveFieldDefinitionLocalization(self, fieldName, locale, values):
    self._oprot.writeMessageBegin('saveFieldDefinitionLocalization', TMessageType.CALL, self._seqid)
    args = saveFieldDefinitionLocalization_args()
    args.fieldName = fieldName
    args.locale = locale
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_saveFieldDefinitionLocalization(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = saveFieldDefinitionLocalization_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def saveManagementCategoryLocalization(self, categoryId, locale, values):
    """
    Parameters:
     - categoryId
     - locale
     - values
    """
    self.send_saveManagementCategoryLocalization(categoryId, locale, values)
    self.recv_saveManagementCategoryLocalization()

  def send_saveManagementCategoryLocalization(self, categoryId, locale, values):
    self._oprot.writeMessageBegin('saveManagementCategoryLocalization', TMessageType.CALL, self._seqid)
    args = saveManagementCategoryLocalization_args()
    args.categoryId = categoryId
    args.locale = locale
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_saveManagementCategoryLocalization(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = saveManagementCategoryLocalization_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def saveCatalogCategoryLocalization(self, categoryId, locale, values):
    """
    Parameters:
     - categoryId
     - locale
     - values
    """
    self.send_saveCatalogCategoryLocalization(categoryId, locale, values)
    self.recv_saveCatalogCategoryLocalization()

  def send_saveCatalogCategoryLocalization(self, categoryId, locale, values):
    self._oprot.writeMessageBegin('saveCatalogCategoryLocalization', TMessageType.CALL, self._seqid)
    args = saveCatalogCategoryLocalization_args()
    args.categoryId = categoryId
    args.locale = locale
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_saveCatalogCategoryLocalization(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = saveCatalogCategoryLocalization_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["createFieldDefinition"] = Processor.process_createFieldDefinition
    self._processMap["getAllFieldDefinitions"] = Processor.process_getAllFieldDefinitions
    self._processMap["updateFieldDefinition"] = Processor.process_updateFieldDefinition
    self._processMap["deleteFieldDefinition"] = Processor.process_deleteFieldDefinition
    self._processMap["createManagementCategory"] = Processor.process_createManagementCategory
    self._processMap["getAllManagementCategories"] = Processor.process_getAllManagementCategories
    self._processMap["getManagementCategory"] = Processor.process_getManagementCategory
    self._processMap["updateManagementCategory"] = Processor.process_updateManagementCategory
    self._processMap["deleteManagementCategory"] = Processor.process_deleteManagementCategory
    self._processMap["createCatalogCategory"] = Processor.process_createCatalogCategory
    self._processMap["getAllCatalogCategories"] = Processor.process_getAllCatalogCategories
    self._processMap["getCatalogCategory"] = Processor.process_getCatalogCategory
    self._processMap["updateCatalogCategory"] = Processor.process_updateCatalogCategory
    self._processMap["deleteCatalogCategory"] = Processor.process_deleteCatalogCategory
    self._processMap["getSupportedLocales"] = Processor.process_getSupportedLocales
    self._processMap["ensureLocale"] = Processor.process_ensureLocale
    self._processMap["getFieldDefinitionLocalizedValues"] = Processor.process_getFieldDefinitionLocalizedValues
    self._processMap["getManagementCategoriesLocalizedValues"] = Processor.process_getManagementCategoriesLocalizedValues
    self._processMap["getCatalogCategoriesLocalizedValues"] = Processor.process_getCatalogCategoriesLocalizedValues
    self._processMap["saveFieldDefinitionLocalization"] = Processor.process_saveFieldDefinitionLocalization
    self._processMap["saveManagementCategoryLocalization"] = Processor.process_saveManagementCategoryLocalization
    self._processMap["saveCatalogCategoryLocalization"] = Processor.process_saveCatalogCategoryLocalization

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_createFieldDefinition(self, seqid, iprot, oprot):
    args = createFieldDefinition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createFieldDefinition_result()
    try:
      self._handler.createFieldDefinition(args.definitionWrapper, args.locale)
    except Exceptions.ttypes.AlreadyExistsException, aee:
      result.aee = aee
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("createFieldDefinition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllFieldDefinitions(self, seqid, iprot, oprot):
    args = getAllFieldDefinitions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllFieldDefinitions_result()
    try:
      result.success = self._handler.getAllFieldDefinitions(args.locale)
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    oprot.writeMessageBegin("getAllFieldDefinitions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateFieldDefinition(self, seqid, iprot, oprot):
    args = updateFieldDefinition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateFieldDefinition_result()
    try:
      self._handler.updateFieldDefinition(args.definitionWrapper, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("updateFieldDefinition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteFieldDefinition(self, seqid, iprot, oprot):
    args = deleteFieldDefinition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteFieldDefinition_result()
    try:
      self._handler.deleteFieldDefinition(args.name)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("deleteFieldDefinition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createManagementCategory(self, seqid, iprot, oprot):
    args = createManagementCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createManagementCategory_result()
    try:
      result.success = self._handler.createManagementCategory(args.category, args.locale)
    except Exceptions.ttypes.AlreadyExistsException, aee:
      result.aee = aee
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("createManagementCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllManagementCategories(self, seqid, iprot, oprot):
    args = getAllManagementCategories_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllManagementCategories_result()
    try:
      result.success = self._handler.getAllManagementCategories(args.locale)
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getAllManagementCategories", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getManagementCategory(self, seqid, iprot, oprot):
    args = getManagementCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getManagementCategory_result()
    try:
      result.success = self._handler.getManagementCategory(args.categoryId, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getManagementCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateManagementCategory(self, seqid, iprot, oprot):
    args = updateManagementCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateManagementCategory_result()
    try:
      self._handler.updateManagementCategory(args.category, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("updateManagementCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteManagementCategory(self, seqid, iprot, oprot):
    args = deleteManagementCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteManagementCategory_result()
    try:
      self._handler.deleteManagementCategory(args.id)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("deleteManagementCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createCatalogCategory(self, seqid, iprot, oprot):
    args = createCatalogCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createCatalogCategory_result()
    try:
      result.success = self._handler.createCatalogCategory(args.category, args.locale)
    except Exceptions.ttypes.AlreadyExistsException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("createCatalogCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllCatalogCategories(self, seqid, iprot, oprot):
    args = getAllCatalogCategories_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllCatalogCategories_result()
    try:
      result.success = self._handler.getAllCatalogCategories(args.locale)
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getAllCatalogCategories", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCatalogCategory(self, seqid, iprot, oprot):
    args = getCatalogCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCatalogCategory_result()
    try:
      result.success = self._handler.getCatalogCategory(args.categoryId, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getCatalogCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateCatalogCategory(self, seqid, iprot, oprot):
    args = updateCatalogCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateCatalogCategory_result()
    try:
      self._handler.updateCatalogCategory(args.category, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("updateCatalogCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteCatalogCategory(self, seqid, iprot, oprot):
    args = deleteCatalogCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteCatalogCategory_result()
    try:
      self._handler.deleteCatalogCategory(args.id)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("deleteCatalogCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSupportedLocales(self, seqid, iprot, oprot):
    args = getSupportedLocales_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSupportedLocales_result()
    try:
      result.success = self._handler.getSupportedLocales()
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getSupportedLocales", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_ensureLocale(self, seqid, iprot, oprot):
    args = ensureLocale_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ensureLocale_result()
    try:
      self._handler.ensureLocale(args.locale)
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("ensureLocale", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFieldDefinitionLocalizedValues(self, seqid, iprot, oprot):
    args = getFieldDefinitionLocalizedValues_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFieldDefinitionLocalizedValues_result()
    try:
      result.success = self._handler.getFieldDefinitionLocalizedValues(args.fieldName)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getFieldDefinitionLocalizedValues", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getManagementCategoriesLocalizedValues(self, seqid, iprot, oprot):
    args = getManagementCategoriesLocalizedValues_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getManagementCategoriesLocalizedValues_result()
    try:
      result.success = self._handler.getManagementCategoriesLocalizedValues(args.categoryId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getManagementCategoriesLocalizedValues", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCatalogCategoriesLocalizedValues(self, seqid, iprot, oprot):
    args = getCatalogCategoriesLocalizedValues_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCatalogCategoriesLocalizedValues_result()
    try:
      result.success = self._handler.getCatalogCategoriesLocalizedValues(args.categoryId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getCatalogCategoriesLocalizedValues", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_saveFieldDefinitionLocalization(self, seqid, iprot, oprot):
    args = saveFieldDefinitionLocalization_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = saveFieldDefinitionLocalization_result()
    try:
      self._handler.saveFieldDefinitionLocalization(args.fieldName, args.locale, args.values)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("saveFieldDefinitionLocalization", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_saveManagementCategoryLocalization(self, seqid, iprot, oprot):
    args = saveManagementCategoryLocalization_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = saveManagementCategoryLocalization_result()
    try:
      self._handler.saveManagementCategoryLocalization(args.categoryId, args.locale, args.values)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("saveManagementCategoryLocalization", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_saveCatalogCategoryLocalization(self, seqid, iprot, oprot):
    args = saveCatalogCategoryLocalization_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = saveCatalogCategoryLocalization_result()
    try:
      self._handler.saveCatalogCategoryLocalization(args.categoryId, args.locale, args.values)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("saveCatalogCategoryLocalization", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class createFieldDefinition_args:
  """
  Attributes:
   - definitionWrapper
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'definitionWrapper', (WareFieldDefinitions.ttypes.WareFieldDefinitionsDto, WareFieldDefinitions.ttypes.WareFieldDefinitionsDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, definitionWrapper=None, locale=None,):
    self.definitionWrapper = definitionWrapper
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.definitionWrapper = WareFieldDefinitions.ttypes.WareFieldDefinitionsDto()
          self.definitionWrapper.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createFieldDefinition_args')
    if self.definitionWrapper is not None:
      oprot.writeFieldBegin('definitionWrapper', TType.STRUCT, 1)
      self.definitionWrapper.write(oprot)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createFieldDefinition_result:
  """
  Attributes:
   - aee
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aee', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, aee=None, bre=None, me=None, ue=None,):
    self.aee = aee
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aee = Exceptions.ttypes.AlreadyExistsException()
          self.aee.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createFieldDefinition_result')
    if self.aee is not None:
      oprot.writeFieldBegin('aee', TType.STRUCT, 1)
      self.aee.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllFieldDefinitions_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllFieldDefinitions_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllFieldDefinitions_result:
  """
  Attributes:
   - success
   - me
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareFieldDefinitions.ttypes.WareFieldDefinitionsDto, WareFieldDefinitions.ttypes.WareFieldDefinitionsDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, me=None,):
    self.success = success
    self.me = me

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareFieldDefinitions.ttypes.WareFieldDefinitionsDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllFieldDefinitions_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 1)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateFieldDefinition_args:
  """
  Attributes:
   - definitionWrapper
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'definitionWrapper', (WareFieldDefinitions.ttypes.WareFieldDefinitionsDto, WareFieldDefinitions.ttypes.WareFieldDefinitionsDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, definitionWrapper=None, locale=None,):
    self.definitionWrapper = definitionWrapper
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.definitionWrapper = WareFieldDefinitions.ttypes.WareFieldDefinitionsDto()
          self.definitionWrapper.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateFieldDefinition_args')
    if self.definitionWrapper is not None:
      oprot.writeFieldBegin('definitionWrapper', TType.STRUCT, 1)
      self.definitionWrapper.write(oprot)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateFieldDefinition_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateFieldDefinition_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteFieldDefinition_args:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteFieldDefinition_args')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteFieldDefinition_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteFieldDefinition_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createManagementCategory_args:
  """
  Attributes:
   - category
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'category', (CategoryTreeWorker.ttypes.WareManagementCategoryDto, CategoryTreeWorker.ttypes.WareManagementCategoryDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, category=None, locale=None,):
    self.category = category
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.category = CategoryTreeWorker.ttypes.WareManagementCategoryDto()
          self.category.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createManagementCategory_args')
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRUCT, 1)
      self.category.write(oprot)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createManagementCategory_result:
  """
  Attributes:
   - success
   - aee
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aee', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, aee=None, bre=None, me=None, ue=None,):
    self.success = success
    self.aee = aee
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aee = Exceptions.ttypes.AlreadyExistsException()
          self.aee.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createManagementCategory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.aee is not None:
      oprot.writeFieldBegin('aee', TType.STRUCT, 1)
      self.aee.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllManagementCategories_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllManagementCategories_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllManagementCategories_result:
  """
  Attributes:
   - success
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(CategoryTreeWorker.ttypes.WareCategoryDto, CategoryTreeWorker.ttypes.WareCategoryDto.thrift_spec)), None, ), # 0
    None, # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, bre=None, me=None, ue=None,):
    self.success = success
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32();
            _val6 = CategoryTreeWorker.ttypes.WareCategoryDto()
            _val6.read(iprot)
            self.success[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllManagementCategories_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter7,viter8 in self.success.items():
        oprot.writeI32(kiter7)
        viter8.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementCategory_args:
  """
  Attributes:
   - categoryId
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, categoryId=None, locale=None,):
    self.categoryId = categoryId
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementCategory_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementCategory_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (CategoryTreeWorker.ttypes.WareManagementCategoryDto, CategoryTreeWorker.ttypes.WareManagementCategoryDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = CategoryTreeWorker.ttypes.WareManagementCategoryDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementCategory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateManagementCategory_args:
  """
  Attributes:
   - category
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'category', (CategoryTreeWorker.ttypes.WareManagementCategoryDto, CategoryTreeWorker.ttypes.WareManagementCategoryDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, category=None, locale=None,):
    self.category = category
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.category = CategoryTreeWorker.ttypes.WareManagementCategoryDto()
          self.category.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateManagementCategory_args')
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRUCT, 1)
      self.category.write(oprot)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateManagementCategory_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateManagementCategory_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteManagementCategory_args:
  """
  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteManagementCategory_args')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteManagementCategory_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteManagementCategory_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createCatalogCategory_args:
  """
  Attributes:
   - category
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'category', (CategoryTreeWorker.ttypes.WareCatalogCategoryDto, CategoryTreeWorker.ttypes.WareCatalogCategoryDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, category=None, locale=None,):
    self.category = category
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.category = CategoryTreeWorker.ttypes.WareCatalogCategoryDto()
          self.category.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createCatalogCategory_args')
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRUCT, 1)
      self.category.write(oprot)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createCatalogCategory_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.AlreadyExistsException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createCatalogCategory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllCatalogCategories_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllCatalogCategories_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllCatalogCategories_result:
  """
  Attributes:
   - success
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(CategoryTreeWorker.ttypes.WareCategoryDto, CategoryTreeWorker.ttypes.WareCategoryDto.thrift_spec)), None, ), # 0
    None, # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, bre=None, me=None, ue=None,):
    self.success = success
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readI32();
            _val15 = CategoryTreeWorker.ttypes.WareCategoryDto()
            _val15.read(iprot)
            self.success[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllCatalogCategories_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter16,viter17 in self.success.items():
        oprot.writeI32(kiter16)
        viter17.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogCategory_args:
  """
  Attributes:
   - categoryId
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, categoryId=None, locale=None,):
    self.categoryId = categoryId
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogCategory_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogCategory_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (CategoryTreeWorker.ttypes.WareCatalogCategoryDto, CategoryTreeWorker.ttypes.WareCatalogCategoryDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = CategoryTreeWorker.ttypes.WareCatalogCategoryDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogCategory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateCatalogCategory_args:
  """
  Attributes:
   - category
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'category', (CategoryTreeWorker.ttypes.WareCatalogCategoryDto, CategoryTreeWorker.ttypes.WareCatalogCategoryDto.thrift_spec), None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, category=None, locale=None,):
    self.category = category
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.category = CategoryTreeWorker.ttypes.WareCatalogCategoryDto()
          self.category.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateCatalogCategory_args')
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRUCT, 1)
      self.category.write(oprot)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateCatalogCategory_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateCatalogCategory_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteCatalogCategory_args:
  """
  Attributes:
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
  )

  def __init__(self, id=None,):
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteCatalogCategory_args')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteCatalogCategory_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteCatalogCategory_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSupportedLocales_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSupportedLocales_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSupportedLocales_result:
  """
  Attributes:
   - success
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    None, # 1
    None, # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, me=None, ue=None,):
    self.success = success
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString();
            self.success.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSupportedLocales_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter24 in self.success:
        oprot.writeString(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ensureLocale_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ensureLocale_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ensureLocale_result:
  """
  Attributes:
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, bre=None, me=None, ue=None,):
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ensureLocale_result')
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFieldDefinitionLocalizedValues_args:
  """
  Attributes:
   - fieldName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fieldName', None, None, ), # 1
  )

  def __init__(self, fieldName=None,):
    self.fieldName = fieldName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fieldName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFieldDefinitionLocalizedValues_args')
    if self.fieldName is not None:
      oprot.writeFieldBegin('fieldName', TType.STRING, 1)
      oprot.writeString(self.fieldName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFieldDefinitionLocalizedValues_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype26, _vtype27, _size25 ) = iprot.readMapBegin()
          for _i29 in xrange(_size25):
            _key30 = iprot.readString();
            _val31 = {}
            (_ktype33, _vtype34, _size32 ) = iprot.readMapBegin()
            for _i36 in xrange(_size32):
              _key37 = iprot.readString();
              _val38 = iprot.readString();
              _val31[_key37] = _val38
            iprot.readMapEnd()
            self.success[_key30] = _val31
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFieldDefinitionLocalizedValues_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter39,viter40 in self.success.items():
        oprot.writeString(kiter39)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter40))
        for kiter41,viter42 in viter40.items():
          oprot.writeString(kiter41)
          oprot.writeString(viter42)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementCategoriesLocalizedValues_args:
  """
  Attributes:
   - categoryId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
  )

  def __init__(self, categoryId=None,):
    self.categoryId = categoryId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementCategoriesLocalizedValues_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementCategoriesLocalizedValues_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype44, _vtype45, _size43 ) = iprot.readMapBegin()
          for _i47 in xrange(_size43):
            _key48 = iprot.readString();
            _val49 = {}
            (_ktype51, _vtype52, _size50 ) = iprot.readMapBegin()
            for _i54 in xrange(_size50):
              _key55 = iprot.readString();
              _val56 = iprot.readString();
              _val49[_key55] = _val56
            iprot.readMapEnd()
            self.success[_key48] = _val49
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementCategoriesLocalizedValues_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter57,viter58 in self.success.items():
        oprot.writeString(kiter57)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter58))
        for kiter59,viter60 in viter58.items():
          oprot.writeString(kiter59)
          oprot.writeString(viter60)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogCategoriesLocalizedValues_args:
  """
  Attributes:
   - categoryId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
  )

  def __init__(self, categoryId=None,):
    self.categoryId = categoryId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogCategoriesLocalizedValues_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogCategoriesLocalizedValues_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype62, _vtype63, _size61 ) = iprot.readMapBegin()
          for _i65 in xrange(_size61):
            _key66 = iprot.readString();
            _val67 = {}
            (_ktype69, _vtype70, _size68 ) = iprot.readMapBegin()
            for _i72 in xrange(_size68):
              _key73 = iprot.readString();
              _val74 = iprot.readString();
              _val67[_key73] = _val74
            iprot.readMapEnd()
            self.success[_key66] = _val67
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogCategoriesLocalizedValues_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.success))
      for kiter75,viter76 in self.success.items():
        oprot.writeString(kiter75)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter76))
        for kiter77,viter78 in viter76.items():
          oprot.writeString(kiter77)
          oprot.writeString(viter78)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveFieldDefinitionLocalization_args:
  """
  Attributes:
   - fieldName
   - locale
   - values
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fieldName', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
    (3, TType.MAP, 'values', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, fieldName=None, locale=None, values=None,):
    self.fieldName = fieldName
    self.locale = locale
    self.values = values

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fieldName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.values = {}
          (_ktype80, _vtype81, _size79 ) = iprot.readMapBegin()
          for _i83 in xrange(_size79):
            _key84 = iprot.readString();
            _val85 = iprot.readString();
            self.values[_key84] = _val85
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveFieldDefinitionLocalization_args')
    if self.fieldName is not None:
      oprot.writeFieldBegin('fieldName', TType.STRING, 1)
      oprot.writeString(self.fieldName)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.values))
      for kiter86,viter87 in self.values.items():
        oprot.writeString(kiter86)
        oprot.writeString(viter87)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveFieldDefinitionLocalization_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveFieldDefinitionLocalization_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveManagementCategoryLocalization_args:
  """
  Attributes:
   - categoryId
   - locale
   - values
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
    (3, TType.MAP, 'values', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, categoryId=None, locale=None, values=None,):
    self.categoryId = categoryId
    self.locale = locale
    self.values = values

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.values = {}
          (_ktype89, _vtype90, _size88 ) = iprot.readMapBegin()
          for _i92 in xrange(_size88):
            _key93 = iprot.readString();
            _val94 = iprot.readString();
            self.values[_key93] = _val94
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveManagementCategoryLocalization_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.values))
      for kiter95,viter96 in self.values.items():
        oprot.writeString(kiter95)
        oprot.writeString(viter96)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveManagementCategoryLocalization_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveManagementCategoryLocalization_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveCatalogCategoryLocalization_args:
  """
  Attributes:
   - categoryId
   - locale
   - values
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
    (3, TType.MAP, 'values', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, categoryId=None, locale=None, values=None,):
    self.categoryId = categoryId
    self.locale = locale
    self.values = values

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.values = {}
          (_ktype98, _vtype99, _size97 ) = iprot.readMapBegin()
          for _i101 in xrange(_size97):
            _key102 = iprot.readString();
            _val103 = iprot.readString();
            self.values[_key102] = _val103
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveCatalogCategoryLocalization_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.values))
      for kiter104,viter105 in self.values.items():
        oprot.writeString(kiter104)
        oprot.writeString(viter105)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class saveCatalogCategoryLocalization_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('saveCatalogCategoryLocalization_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
