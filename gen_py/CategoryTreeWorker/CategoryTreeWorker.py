# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import Exceptions
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getManagementWareCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    pass

  def getCatalogWareCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    pass

  def getCatalogCategoryTree(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getManagementCategoryTree(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getVisibleLiteCatalogTree(self, locale):
    """
    Parameters:
     - locale
    """
    pass

  def getVisibleLiteManagementTree(self, locale):
    """
    Parameters:
     - locale
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getManagementWareCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    self.send_getManagementWareCategory(categoryId, locale)
    return self.recv_getManagementWareCategory()

  def send_getManagementWareCategory(self, categoryId, locale):
    self._oprot.writeMessageBegin('getManagementWareCategory', TMessageType.CALL, self._seqid)
    args = getManagementWareCategory_args()
    args.categoryId = categoryId
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getManagementWareCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getManagementWareCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getManagementWareCategory failed: unknown result");

  def getCatalogWareCategory(self, categoryId, locale):
    """
    Parameters:
     - categoryId
     - locale
    """
    self.send_getCatalogWareCategory(categoryId, locale)
    return self.recv_getCatalogWareCategory()

  def send_getCatalogWareCategory(self, categoryId, locale):
    self._oprot.writeMessageBegin('getCatalogWareCategory', TMessageType.CALL, self._seqid)
    args = getCatalogWareCategory_args()
    args.categoryId = categoryId
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCatalogWareCategory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getCatalogWareCategory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCatalogWareCategory failed: unknown result");

  def getCatalogCategoryTree(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getCatalogCategoryTree(locale)
    return self.recv_getCatalogCategoryTree()

  def send_getCatalogCategoryTree(self, locale):
    self._oprot.writeMessageBegin('getCatalogCategoryTree', TMessageType.CALL, self._seqid)
    args = getCatalogCategoryTree_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCatalogCategoryTree(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getCatalogCategoryTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCatalogCategoryTree failed: unknown result");

  def getManagementCategoryTree(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getManagementCategoryTree(locale)
    return self.recv_getManagementCategoryTree()

  def send_getManagementCategoryTree(self, locale):
    self._oprot.writeMessageBegin('getManagementCategoryTree', TMessageType.CALL, self._seqid)
    args = getManagementCategoryTree_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getManagementCategoryTree(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getManagementCategoryTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getManagementCategoryTree failed: unknown result");

  def getVisibleLiteCatalogTree(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getVisibleLiteCatalogTree(locale)
    return self.recv_getVisibleLiteCatalogTree()

  def send_getVisibleLiteCatalogTree(self, locale):
    self._oprot.writeMessageBegin('getVisibleLiteCatalogTree', TMessageType.CALL, self._seqid)
    args = getVisibleLiteCatalogTree_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getVisibleLiteCatalogTree(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getVisibleLiteCatalogTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getVisibleLiteCatalogTree failed: unknown result");

  def getVisibleLiteManagementTree(self, locale):
    """
    Parameters:
     - locale
    """
    self.send_getVisibleLiteManagementTree(locale)
    return self.recv_getVisibleLiteManagementTree()

  def send_getVisibleLiteManagementTree(self, locale):
    self._oprot.writeMessageBegin('getVisibleLiteManagementTree', TMessageType.CALL, self._seqid)
    args = getVisibleLiteManagementTree_args()
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getVisibleLiteManagementTree(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getVisibleLiteManagementTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getVisibleLiteManagementTree failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getManagementWareCategory"] = Processor.process_getManagementWareCategory
    self._processMap["getCatalogWareCategory"] = Processor.process_getCatalogWareCategory
    self._processMap["getCatalogCategoryTree"] = Processor.process_getCatalogCategoryTree
    self._processMap["getManagementCategoryTree"] = Processor.process_getManagementCategoryTree
    self._processMap["getVisibleLiteCatalogTree"] = Processor.process_getVisibleLiteCatalogTree
    self._processMap["getVisibleLiteManagementTree"] = Processor.process_getVisibleLiteManagementTree

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getManagementWareCategory(self, seqid, iprot, oprot):
    args = getManagementWareCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getManagementWareCategory_result()
    try:
      result.success = self._handler.getManagementWareCategory(args.categoryId, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getManagementWareCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCatalogWareCategory(self, seqid, iprot, oprot):
    args = getCatalogWareCategory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCatalogWareCategory_result()
    try:
      result.success = self._handler.getCatalogWareCategory(args.categoryId, args.locale)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getCatalogWareCategory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCatalogCategoryTree(self, seqid, iprot, oprot):
    args = getCatalogCategoryTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCatalogCategoryTree_result()
    result.success = self._handler.getCatalogCategoryTree(args.locale)
    oprot.writeMessageBegin("getCatalogCategoryTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getManagementCategoryTree(self, seqid, iprot, oprot):
    args = getManagementCategoryTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getManagementCategoryTree_result()
    result.success = self._handler.getManagementCategoryTree(args.locale)
    oprot.writeMessageBegin("getManagementCategoryTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getVisibleLiteCatalogTree(self, seqid, iprot, oprot):
    args = getVisibleLiteCatalogTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getVisibleLiteCatalogTree_result()
    result.success = self._handler.getVisibleLiteCatalogTree(args.locale)
    oprot.writeMessageBegin("getVisibleLiteCatalogTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getVisibleLiteManagementTree(self, seqid, iprot, oprot):
    args = getVisibleLiteManagementTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getVisibleLiteManagementTree_result()
    result.success = self._handler.getVisibleLiteManagementTree(args.locale)
    oprot.writeMessageBegin("getVisibleLiteManagementTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getManagementWareCategory_args:
  """
  Attributes:
   - categoryId
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, categoryId=None, locale=None,):
    self.categoryId = categoryId
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementWareCategory_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementWareCategory_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareManagementCategoryDto, WareManagementCategoryDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareManagementCategoryDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementWareCategory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogWareCategory_args:
  """
  Attributes:
   - categoryId
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'locale', None, None, ), # 2
  )

  def __init__(self, categoryId=None, locale=None,):
    self.categoryId = categoryId
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogWareCategory_args')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 2)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogWareCategory_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareCatalogCategoryDto, WareCatalogCategoryDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareCatalogCategoryDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogWareCategory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogCategoryTree_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogCategoryTree_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCatalogCategoryTree_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(WareCategoryDto, WareCategoryDto.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype38, _vtype39, _size37 ) = iprot.readMapBegin()
          for _i41 in xrange(_size37):
            _key42 = iprot.readI32();
            _val43 = WareCategoryDto()
            _val43.read(iprot)
            self.success[_key42] = _val43
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCatalogCategoryTree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter44,viter45 in self.success.items():
        oprot.writeI32(kiter44)
        viter45.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementCategoryTree_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementCategoryTree_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getManagementCategoryTree_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(WareCategoryDto, WareCategoryDto.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype47, _vtype48, _size46 ) = iprot.readMapBegin()
          for _i50 in xrange(_size46):
            _key51 = iprot.readI32();
            _val52 = WareCategoryDto()
            _val52.read(iprot)
            self.success[_key51] = _val52
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getManagementCategoryTree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter53,viter54 in self.success.items():
        oprot.writeI32(kiter53)
        viter54.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVisibleLiteCatalogTree_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVisibleLiteCatalogTree_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVisibleLiteCatalogTree_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(CatalogCategoryLiteDto, CatalogCategoryLiteDto.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype56, _vtype57, _size55 ) = iprot.readMapBegin()
          for _i59 in xrange(_size55):
            _key60 = iprot.readI32();
            _val61 = CatalogCategoryLiteDto()
            _val61.read(iprot)
            self.success[_key60] = _val61
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVisibleLiteCatalogTree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter62,viter63 in self.success.items():
        oprot.writeI32(kiter62)
        viter63.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVisibleLiteManagementTree_args:
  """
  Attributes:
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'locale', None, None, ), # 1
  )

  def __init__(self, locale=None,):
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVisibleLiteManagementTree_args')
    if self.locale is not None:
      oprot.writeFieldBegin('locale', TType.STRING, 1)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getVisibleLiteManagementTree_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(ManagementCategoryLiteDto, ManagementCategoryLiteDto.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype65, _vtype66, _size64 ) = iprot.readMapBegin()
          for _i68 in xrange(_size64):
            _key69 = iprot.readI32();
            _val70 = ManagementCategoryLiteDto()
            _val70.read(iprot)
            self.success[_key69] = _val70
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getVisibleLiteManagementTree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.success))
      for kiter71,viter72 in self.success.items():
        oprot.writeI32(kiter71)
        viter72.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
