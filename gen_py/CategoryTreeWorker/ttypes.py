# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import WareFieldDefinitions
import gen_py.Common.ttypes
import gen_py.Exceptions.ttypes
import gen_py.WareFieldDefinitions.ttypes
import gen_py.WareFields.ttypes
import gen_py.WareSearchConditions.ttypes
import gen_py.StaticStorageWorker.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
from gen_py import WareFields
from gen_py import WareSearchConditions

try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class WareCategoryDto:
  """
  Attributes:
   - categoryId
   - name
   - localizedName
   - childCategories
   - visible
   - enabled
   - parentCategories
   - showOrder
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'localizedName', None, None, ), # 3
    None, # 4
    (5, TType.SET, 'childCategories', (TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'visible', None, False, ), # 6
    (7, TType.BOOL, 'enabled', None, False, ), # 7
    (8, TType.SET, 'parentCategories', (TType.I32,None), None, ), # 8
    (9, TType.I32, 'showOrder', None, None, ), # 9
  )

  def __init__(self, categoryId=None, name=None, localizedName=None, childCategories=None, visible=thrift_spec[6][4], enabled=thrift_spec[7][4], parentCategories=None, showOrder=None,):
    self.categoryId = categoryId
    self.name = name
    self.localizedName = localizedName
    self.childCategories = childCategories
    self.visible = visible
    self.enabled = enabled
    self.parentCategories = parentCategories
    self.showOrder = showOrder

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.localizedName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.childCategories = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.childCategories.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.visible = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.SET:
          self.parentCategories = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.parentCategories.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.showOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareCategoryDto')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.localizedName is not None:
      oprot.writeFieldBegin('localizedName', TType.STRING, 3)
      oprot.writeString(self.localizedName)
      oprot.writeFieldEnd()
    if self.childCategories is not None:
      oprot.writeFieldBegin('childCategories', TType.SET, 5)
      oprot.writeSetBegin(TType.I32, len(self.childCategories))
      for iter12 in self.childCategories:
        oprot.writeI32(iter12)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.visible is not None:
      oprot.writeFieldBegin('visible', TType.BOOL, 6)
      oprot.writeBool(self.visible)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 7)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.parentCategories is not None:
      oprot.writeFieldBegin('parentCategories', TType.SET, 8)
      oprot.writeSetBegin(TType.I32, len(self.parentCategories))
      for iter13 in self.parentCategories:
        oprot.writeI32(iter13)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.showOrder is not None:
      oprot.writeFieldBegin('showOrder', TType.I32, 9)
      oprot.writeI32(self.showOrder)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ManagementCategoryLiteDto:
  """
  Attributes:
   - categoryId
   - name
   - localizedName
   - childCategories
   - visible
   - enabled
   - parentId
   - catalogId
   - showOrder
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'localizedName', None, None, ), # 3
    None, # 4
    (5, TType.SET, 'childCategories', (TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'visible', None, None, ), # 6
    (7, TType.BOOL, 'enabled', None, None, ), # 7
    (8, TType.I32, 'parentId', None, None, ), # 8
    (9, TType.I32, 'catalogId', None, None, ), # 9
    (10, TType.I32, 'showOrder', None, None, ), # 10
  )

  def __init__(self, categoryId=None, name=None, localizedName=None, childCategories=None, visible=None, enabled=None, parentId=None, catalogId=None, showOrder=None,):
    self.categoryId = categoryId
    self.name = name
    self.localizedName = localizedName
    self.childCategories = childCategories
    self.visible = visible
    self.enabled = enabled
    self.parentId = parentId
    self.catalogId = catalogId
    self.showOrder = showOrder

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.localizedName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.childCategories = set()
          (_etype17, _size14) = iprot.readSetBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.childCategories.add(_elem19)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.visible = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.parentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.catalogId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.showOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ManagementCategoryLiteDto')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.localizedName is not None:
      oprot.writeFieldBegin('localizedName', TType.STRING, 3)
      oprot.writeString(self.localizedName)
      oprot.writeFieldEnd()
    if self.childCategories is not None:
      oprot.writeFieldBegin('childCategories', TType.SET, 5)
      oprot.writeSetBegin(TType.I32, len(self.childCategories))
      for iter20 in self.childCategories:
        oprot.writeI32(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.visible is not None:
      oprot.writeFieldBegin('visible', TType.BOOL, 6)
      oprot.writeBool(self.visible)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 7)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.parentId is not None:
      oprot.writeFieldBegin('parentId', TType.I32, 8)
      oprot.writeI32(self.parentId)
      oprot.writeFieldEnd()
    if self.catalogId is not None:
      oprot.writeFieldBegin('catalogId', TType.I32, 9)
      oprot.writeI32(self.catalogId)
      oprot.writeFieldEnd()
    if self.showOrder is not None:
      oprot.writeFieldBegin('showOrder', TType.I32, 10)
      oprot.writeI32(self.showOrder)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CatalogCategoryLiteDto:
  """
  Attributes:
   - categoryId
   - name
   - localizedName
   - childCategories
   - visible
   - enabled
   - parentId
   - special
   - showOrder
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'categoryId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'localizedName', None, None, ), # 3
    None, # 4
    (5, TType.SET, 'childCategories', (TType.I32,None), None, ), # 5
    (6, TType.BOOL, 'visible', None, None, ), # 6
    (7, TType.BOOL, 'enabled', None, None, ), # 7
    (8, TType.I32, 'parentId', None, None, ), # 8
    (9, TType.BOOL, 'special', None, None, ), # 9
    (10, TType.I32, 'showOrder', None, None, ), # 10
  )

  def __init__(self, categoryId=None, name=None, localizedName=None, childCategories=None, visible=None, enabled=None, parentId=None, special=None, showOrder=None,):
    self.categoryId = categoryId
    self.name = name
    self.localizedName = localizedName
    self.childCategories = childCategories
    self.visible = visible
    self.enabled = enabled
    self.parentId = parentId
    self.special = special
    self.showOrder = showOrder

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.categoryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.localizedName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.childCategories = set()
          (_etype24, _size21) = iprot.readSetBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.childCategories.add(_elem26)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.visible = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.enabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.parentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.special = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.showOrder = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CatalogCategoryLiteDto')
    if self.categoryId is not None:
      oprot.writeFieldBegin('categoryId', TType.I32, 1)
      oprot.writeI32(self.categoryId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.localizedName is not None:
      oprot.writeFieldBegin('localizedName', TType.STRING, 3)
      oprot.writeString(self.localizedName)
      oprot.writeFieldEnd()
    if self.childCategories is not None:
      oprot.writeFieldBegin('childCategories', TType.SET, 5)
      oprot.writeSetBegin(TType.I32, len(self.childCategories))
      for iter27 in self.childCategories:
        oprot.writeI32(iter27)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.visible is not None:
      oprot.writeFieldBegin('visible', TType.BOOL, 6)
      oprot.writeBool(self.visible)
      oprot.writeFieldEnd()
    if self.enabled is not None:
      oprot.writeFieldBegin('enabled', TType.BOOL, 7)
      oprot.writeBool(self.enabled)
      oprot.writeFieldEnd()
    if self.parentId is not None:
      oprot.writeFieldBegin('parentId', TType.I32, 8)
      oprot.writeI32(self.parentId)
      oprot.writeFieldEnd()
    if self.special is not None:
      oprot.writeFieldBegin('special', TType.BOOL, 9)
      oprot.writeBool(self.special)
      oprot.writeFieldEnd()
    if self.showOrder is not None:
      oprot.writeFieldBegin('showOrder', TType.I32, 10)
      oprot.writeI32(self.showOrder)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareManagementCategoryDto:
  """
  Attributes:
   - base
   - availableFields
   - providedFields
   - catalog
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (WareCategoryDto, WareCategoryDto.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'availableFields', (WareFieldDefinitions.ttypes.WareFieldDefinitionsDto, WareFieldDefinitions.ttypes.WareFieldDefinitionsDto.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'providedFields', (WareFields.ttypes.WareContentDto, WareFields.ttypes.WareContentDto.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'catalog', (WareCategoryDto, WareCategoryDto.thrift_spec), None, ), # 4
  )

  def __init__(self, base=None, availableFields=None, providedFields=None, catalog=None,):
    self.base = base
    self.availableFields = availableFields
    self.providedFields = providedFields
    self.catalog = catalog

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = WareCategoryDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.availableFields = WareFieldDefinitions.ttypes.WareFieldDefinitionsDto()
          self.availableFields.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.providedFields = WareFields.ttypes.WareContentDto()
          self.providedFields.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.catalog = WareCategoryDto()
          self.catalog.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareManagementCategoryDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.availableFields is not None:
      oprot.writeFieldBegin('availableFields', TType.STRUCT, 2)
      self.availableFields.write(oprot)
      oprot.writeFieldEnd()
    if self.providedFields is not None:
      oprot.writeFieldBegin('providedFields', TType.STRUCT, 3)
      self.providedFields.write(oprot)
      oprot.writeFieldEnd()
    if self.catalog is not None:
      oprot.writeFieldBegin('catalog', TType.STRUCT, 4)
      self.catalog.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareCatalogCategoryDto:
  """
  Attributes:
   - base
   - filterFields
   - providedSearchConditions
   - bannerPictureId
   - linkedCategories
   - special
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (WareCategoryDto, WareCategoryDto.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'filterFields', (WareFieldDefinitions.ttypes.WareFieldDefinitionsDto, WareFieldDefinitions.ttypes.WareFieldDefinitionsDto.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'providedSearchConditions', (WareSearchConditions.ttypes.WareSearchConditionsDto, WareSearchConditions.ttypes.WareSearchConditionsDto.thrift_spec), None, ), # 3
    (4, TType.STRING, 'bannerPictureId', None, None, ), # 4
    (5, TType.MAP, 'linkedCategories', (TType.I32,None,TType.STRUCT,(WareCategoryDto, WareCategoryDto.thrift_spec)), None, ), # 5
    (6, TType.BOOL, 'special', None, False, ), # 6
  )

  def __init__(self, base=None, filterFields=None, providedSearchConditions=None, bannerPictureId=None, linkedCategories=None, special=thrift_spec[6][4],):
    self.base = base
    self.filterFields = filterFields
    self.providedSearchConditions = providedSearchConditions
    self.bannerPictureId = bannerPictureId
    self.linkedCategories = linkedCategories
    self.special = special

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = WareCategoryDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.filterFields = WareFieldDefinitions.ttypes.WareFieldDefinitionsDto()
          self.filterFields.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.providedSearchConditions = WareSearchConditions.ttypes.WareSearchConditionsDto()
          self.providedSearchConditions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bannerPictureId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.linkedCategories = {}
          (_ktype29, _vtype30, _size28 ) = iprot.readMapBegin()
          for _i32 in xrange(_size28):
            _key33 = iprot.readI32();
            _val34 = WareCategoryDto()
            _val34.read(iprot)
            self.linkedCategories[_key33] = _val34
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.special = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareCatalogCategoryDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.filterFields is not None:
      oprot.writeFieldBegin('filterFields', TType.STRUCT, 2)
      self.filterFields.write(oprot)
      oprot.writeFieldEnd()
    if self.providedSearchConditions is not None:
      oprot.writeFieldBegin('providedSearchConditions', TType.STRUCT, 3)
      self.providedSearchConditions.write(oprot)
      oprot.writeFieldEnd()
    if self.bannerPictureId is not None:
      oprot.writeFieldBegin('bannerPictureId', TType.STRING, 4)
      oprot.writeString(self.bannerPictureId)
      oprot.writeFieldEnd()
    if self.linkedCategories is not None:
      oprot.writeFieldBegin('linkedCategories', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.linkedCategories))
      for kiter35,viter36 in self.linkedCategories.items():
        oprot.writeI32(kiter35)
        viter36.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.special is not None:
      oprot.writeFieldBegin('special', TType.BOOL, 6)
      oprot.writeBool(self.special)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
