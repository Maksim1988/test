#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from DealsWorker import DealsWorker
from DealsWorker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool isWareInDraftDeal(UserId buyerId, WareId wareId)'
  print '  DealDto addWareToDraftDeal(UserId buyerId, WareId wareId, i32 amount)'
  print '  DealDto updateDraftDealItem(UserId buyerId, WareId wareId, i32 amount)'
  print '  DealDto removeWareFromDraftDeal(UserId buyerId, WareId wareId)'
  print '  DealDto getDraftDeal(UserId buyerId, UserId sellerId)'
  print '  DealDto submitDraftDeal(UserId buyerId, UserId sellerId)'
  print '  void removeDraftDeal(UserId buyerId, UserId sellerId)'
  print '  DealDto getDealById(DealId dealId)'
  print '   getAllDeals(UserId userId, _DealState state)'
  print '   getDealsCounters(UserId userId)'
  print '  DealDto sendPriceResponse(DealId dealId,  changes)'
  print '  DealDto sendOffer(DealId dealId,  changes, _OfferOwner sender)'
  print '  DealDto acceptOffer(DealId dealId, _OfferOwner sender)'
  print '  DealDto commitDeal(DealId dealId)'
  print '  DealDto cancelDeal(DealId dealId, _OfferOwner sender)'
  print '  DealReportResponse getDealsStatistic(DealsReportRequest request)'
  print '  void fakeHistoty()'
  print '  void markAsRead(DealIdRequest request)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = DealsWorker.Client(protocol)
transport.open()

if cmd == 'isWareInDraftDeal':
  if len(args) != 2:
    print 'isWareInDraftDeal requires 2 args'
    sys.exit(1)
  pp.pprint(client.isWareInDraftDeal(eval(args[0]),eval(args[1]),))

elif cmd == 'addWareToDraftDeal':
  if len(args) != 3:
    print 'addWareToDraftDeal requires 3 args'
    sys.exit(1)
  pp.pprint(client.addWareToDraftDeal(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'updateDraftDealItem':
  if len(args) != 3:
    print 'updateDraftDealItem requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateDraftDealItem(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeWareFromDraftDeal':
  if len(args) != 2:
    print 'removeWareFromDraftDeal requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeWareFromDraftDeal(eval(args[0]),eval(args[1]),))

elif cmd == 'getDraftDeal':
  if len(args) != 2:
    print 'getDraftDeal requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDraftDeal(eval(args[0]),eval(args[1]),))

elif cmd == 'submitDraftDeal':
  if len(args) != 2:
    print 'submitDraftDeal requires 2 args'
    sys.exit(1)
  pp.pprint(client.submitDraftDeal(eval(args[0]),eval(args[1]),))

elif cmd == 'removeDraftDeal':
  if len(args) != 2:
    print 'removeDraftDeal requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeDraftDeal(eval(args[0]),eval(args[1]),))

elif cmd == 'getDealById':
  if len(args) != 1:
    print 'getDealById requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDealById(eval(args[0]),))

elif cmd == 'getAllDeals':
  if len(args) != 2:
    print 'getAllDeals requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAllDeals(eval(args[0]),eval(args[1]),))

elif cmd == 'getDealsCounters':
  if len(args) != 1:
    print 'getDealsCounters requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDealsCounters(eval(args[0]),))

elif cmd == 'sendPriceResponse':
  if len(args) != 2:
    print 'sendPriceResponse requires 2 args'
    sys.exit(1)
  pp.pprint(client.sendPriceResponse(eval(args[0]),eval(args[1]),))

elif cmd == 'sendOffer':
  if len(args) != 3:
    print 'sendOffer requires 3 args'
    sys.exit(1)
  pp.pprint(client.sendOffer(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'acceptOffer':
  if len(args) != 2:
    print 'acceptOffer requires 2 args'
    sys.exit(1)
  pp.pprint(client.acceptOffer(eval(args[0]),eval(args[1]),))

elif cmd == 'commitDeal':
  if len(args) != 1:
    print 'commitDeal requires 1 args'
    sys.exit(1)
  pp.pprint(client.commitDeal(eval(args[0]),))

elif cmd == 'cancelDeal':
  if len(args) != 2:
    print 'cancelDeal requires 2 args'
    sys.exit(1)
  pp.pprint(client.cancelDeal(eval(args[0]),eval(args[1]),))

elif cmd == 'getDealsStatistic':
  if len(args) != 1:
    print 'getDealsStatistic requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDealsStatistic(eval(args[0]),))

elif cmd == 'fakeHistoty':
  if len(args) != 0:
    print 'fakeHistoty requires 0 args'
    sys.exit(1)
  pp.pprint(client.fakeHistoty())

elif cmd == 'markAsRead':
  if len(args) != 1:
    print 'markAsRead requires 1 args'
    sys.exit(1)
  pp.pprint(client.markAsRead(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
