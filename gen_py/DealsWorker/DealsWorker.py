#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def isWareInDraftDeal(self, buyerId, wareId):
    """
    ********************
     DRAFTS-SPECIFIC API *
    *********************

    Parameters:
     - buyerId
     - wareId
    """
    pass

  def addWareToDraftDeal(self, buyerId, wareId, amount):
    """
    Parameters:
     - buyerId
     - wareId
     - amount
    """
    pass

  def updateDraftDealItem(self, buyerId, wareId, amount):
    """
    Parameters:
     - buyerId
     - wareId
     - amount
    """
    pass

  def removeWareFromDraftDeal(self, buyerId, wareId):
    """
    Parameters:
     - buyerId
     - wareId
    """
    pass

  def getDraftDeal(self, buyerId, sellerId):
    """
    Parameters:
     - buyerId
     - sellerId
    """
    pass

  def submitDraftDeal(self, buyerId, sellerId):
    """
    Parameters:
     - buyerId
     - sellerId
    """
    pass

  def removeDraftDeal(self, buyerId, sellerId):
    """
    Parameters:
     - buyerId
     - sellerId
    """
    pass

  def getDealById(self, dealId):
    """
    *************
     LISTINGS API *
    **************

    Parameters:
     - dealId
    """
    pass

  def getAllDeals(self, userId, state):
    """
    Parameters:
     - userId
     - state
    """
    pass

  def getDealsCounters(self, userId):
    """
    Parameters:
     - userId
    """
    pass

  def sendPriceResponse(self, dealId, changes):
    """
    ****************
     NEGOTIATION API *
    ****************

    Parameters:
     - dealId
     - changes
    """
    pass

  def sendOffer(self, dealId, changes, sender):
    """
    Parameters:
     - dealId
     - changes
     - sender
    """
    pass

  def acceptOffer(self, dealId, sender):
    """
    Parameters:
     - dealId
     - sender
    """
    pass

  def commitDeal(self, dealId):
    """
    Parameters:
     - dealId
    """
    pass

  def cancelDeal(self, dealId, sender):
    """
    Parameters:
     - dealId
     - sender
    """
    pass

  def getDealsStatistic(self, request):
    """
    ************
       REPORTS   *
    ************

    Parameters:
     - request
    """
    pass

  def fakeHistoty(self):
    """
    ************
     HISTORY API *
    ************
    """
    pass

  def markAsRead(self, request):
    """
    ************
       OTHER    *
    ************

    Parameters:
     - request
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def isWareInDraftDeal(self, buyerId, wareId):
    """
    ********************
     DRAFTS-SPECIFIC API *
    *********************

    Parameters:
     - buyerId
     - wareId
    """
    self.send_isWareInDraftDeal(buyerId, wareId)
    return self.recv_isWareInDraftDeal()

  def send_isWareInDraftDeal(self, buyerId, wareId):
    self._oprot.writeMessageBegin('isWareInDraftDeal', TMessageType.CALL, self._seqid)
    args = isWareInDraftDeal_args()
    args.buyerId = buyerId
    args.wareId = wareId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isWareInDraftDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isWareInDraftDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isWareInDraftDeal failed: unknown result");

  def addWareToDraftDeal(self, buyerId, wareId, amount):
    """
    Parameters:
     - buyerId
     - wareId
     - amount
    """
    self.send_addWareToDraftDeal(buyerId, wareId, amount)
    return self.recv_addWareToDraftDeal()

  def send_addWareToDraftDeal(self, buyerId, wareId, amount):
    self._oprot.writeMessageBegin('addWareToDraftDeal', TMessageType.CALL, self._seqid)
    args = addWareToDraftDeal_args()
    args.buyerId = buyerId
    args.wareId = wareId
    args.amount = amount
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addWareToDraftDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addWareToDraftDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    if result.aee is not None:
      raise result.aee
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addWareToDraftDeal failed: unknown result");

  def updateDraftDealItem(self, buyerId, wareId, amount):
    """
    Parameters:
     - buyerId
     - wareId
     - amount
    """
    self.send_updateDraftDealItem(buyerId, wareId, amount)
    return self.recv_updateDraftDealItem()

  def send_updateDraftDealItem(self, buyerId, wareId, amount):
    self._oprot.writeMessageBegin('updateDraftDealItem', TMessageType.CALL, self._seqid)
    args = updateDraftDealItem_args()
    args.buyerId = buyerId
    args.wareId = wareId
    args.amount = amount
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateDraftDealItem(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateDraftDealItem_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateDraftDealItem failed: unknown result");

  def removeWareFromDraftDeal(self, buyerId, wareId):
    """
    Parameters:
     - buyerId
     - wareId
    """
    self.send_removeWareFromDraftDeal(buyerId, wareId)
    return self.recv_removeWareFromDraftDeal()

  def send_removeWareFromDraftDeal(self, buyerId, wareId):
    self._oprot.writeMessageBegin('removeWareFromDraftDeal', TMessageType.CALL, self._seqid)
    args = removeWareFromDraftDeal_args()
    args.buyerId = buyerId
    args.wareId = wareId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeWareFromDraftDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeWareFromDraftDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    if result.nre is not None:
      raise result.nre
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeWareFromDraftDeal failed: unknown result");

  def getDraftDeal(self, buyerId, sellerId):
    """
    Parameters:
     - buyerId
     - sellerId
    """
    self.send_getDraftDeal(buyerId, sellerId)
    return self.recv_getDraftDeal()

  def send_getDraftDeal(self, buyerId, sellerId):
    self._oprot.writeMessageBegin('getDraftDeal', TMessageType.CALL, self._seqid)
    args = getDraftDeal_args()
    args.buyerId = buyerId
    args.sellerId = sellerId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDraftDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDraftDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    if result.nre is not None:
      raise result.nre
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDraftDeal failed: unknown result");

  def submitDraftDeal(self, buyerId, sellerId):
    """
    Parameters:
     - buyerId
     - sellerId
    """
    self.send_submitDraftDeal(buyerId, sellerId)
    return self.recv_submitDraftDeal()

  def send_submitDraftDeal(self, buyerId, sellerId):
    self._oprot.writeMessageBegin('submitDraftDeal', TMessageType.CALL, self._seqid)
    args = submitDraftDeal_args()
    args.buyerId = buyerId
    args.sellerId = sellerId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_submitDraftDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = submitDraftDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "submitDraftDeal failed: unknown result");

  def removeDraftDeal(self, buyerId, sellerId):
    """
    Parameters:
     - buyerId
     - sellerId
    """
    self.send_removeDraftDeal(buyerId, sellerId)
    self.recv_removeDraftDeal()

  def send_removeDraftDeal(self, buyerId, sellerId):
    self._oprot.writeMessageBegin('removeDraftDeal', TMessageType.CALL, self._seqid)
    args = removeDraftDeal_args()
    args.buyerId = buyerId
    args.sellerId = sellerId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeDraftDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeDraftDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    return

  def getDealById(self, dealId):
    """
    *************
     LISTINGS API *
    **************

    Parameters:
     - dealId
    """
    self.send_getDealById(dealId)
    return self.recv_getDealById()

  def send_getDealById(self, dealId):
    self._oprot.writeMessageBegin('getDealById', TMessageType.CALL, self._seqid)
    args = getDealById_args()
    args.dealId = dealId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDealById(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDealById_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDealById failed: unknown result");

  def getAllDeals(self, userId, state):
    """
    Parameters:
     - userId
     - state
    """
    self.send_getAllDeals(userId, state)
    return self.recv_getAllDeals()

  def send_getAllDeals(self, userId, state):
    self._oprot.writeMessageBegin('getAllDeals', TMessageType.CALL, self._seqid)
    args = getAllDeals_args()
    args.userId = userId
    args.state = state
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllDeals(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllDeals_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllDeals failed: unknown result");

  def getDealsCounters(self, userId):
    """
    Parameters:
     - userId
    """
    self.send_getDealsCounters(userId)
    return self.recv_getDealsCounters()

  def send_getDealsCounters(self, userId):
    self._oprot.writeMessageBegin('getDealsCounters', TMessageType.CALL, self._seqid)
    args = getDealsCounters_args()
    args.userId = userId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDealsCounters(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDealsCounters_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDealsCounters failed: unknown result");

  def sendPriceResponse(self, dealId, changes):
    """
    ****************
     NEGOTIATION API *
    ****************

    Parameters:
     - dealId
     - changes
    """
    self.send_sendPriceResponse(dealId, changes)
    return self.recv_sendPriceResponse()

  def send_sendPriceResponse(self, dealId, changes):
    self._oprot.writeMessageBegin('sendPriceResponse', TMessageType.CALL, self._seqid)
    args = sendPriceResponse_args()
    args.dealId = dealId
    args.changes = changes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendPriceResponse(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendPriceResponse_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendPriceResponse failed: unknown result");

  def sendOffer(self, dealId, changes, sender):
    """
    Parameters:
     - dealId
     - changes
     - sender
    """
    self.send_sendOffer(dealId, changes, sender)
    return self.recv_sendOffer()

  def send_sendOffer(self, dealId, changes, sender):
    self._oprot.writeMessageBegin('sendOffer', TMessageType.CALL, self._seqid)
    args = sendOffer_args()
    args.dealId = dealId
    args.changes = changes
    args.sender = sender
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendOffer(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendOffer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendOffer failed: unknown result");

  def acceptOffer(self, dealId, sender):
    """
    Parameters:
     - dealId
     - sender
    """
    self.send_acceptOffer(dealId, sender)
    return self.recv_acceptOffer()

  def send_acceptOffer(self, dealId, sender):
    self._oprot.writeMessageBegin('acceptOffer', TMessageType.CALL, self._seqid)
    args = acceptOffer_args()
    args.dealId = dealId
    args.sender = sender
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_acceptOffer(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = acceptOffer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "acceptOffer failed: unknown result");

  def commitDeal(self, dealId):
    """
    Parameters:
     - dealId
    """
    self.send_commitDeal(dealId)
    return self.recv_commitDeal()

  def send_commitDeal(self, dealId):
    self._oprot.writeMessageBegin('commitDeal', TMessageType.CALL, self._seqid)
    args = commitDeal_args()
    args.dealId = dealId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_commitDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = commitDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "commitDeal failed: unknown result");

  def cancelDeal(self, dealId, sender):
    """
    Parameters:
     - dealId
     - sender
    """
    self.send_cancelDeal(dealId, sender)
    return self.recv_cancelDeal()

  def send_cancelDeal(self, dealId, sender):
    self._oprot.writeMessageBegin('cancelDeal', TMessageType.CALL, self._seqid)
    args = cancelDeal_args()
    args.dealId = dealId
    args.sender = sender
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_cancelDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = cancelDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nsre is not None:
      raise result.nsre
    if result.bre is not None:
      raise result.bre
    if result.me is not None:
      raise result.me
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "cancelDeal failed: unknown result");

  def getDealsStatistic(self, request):
    """
    ************
       REPORTS   *
    ************

    Parameters:
     - request
    """
    self.send_getDealsStatistic(request)
    return self.recv_getDealsStatistic()

  def send_getDealsStatistic(self, request):
    self._oprot.writeMessageBegin('getDealsStatistic', TMessageType.CALL, self._seqid)
    args = getDealsStatistic_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDealsStatistic(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDealsStatistic_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bre is not None:
      raise result.bre
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDealsStatistic failed: unknown result");

  def fakeHistoty(self):
    """
    ************
     HISTORY API *
    ************
    """
    self.send_fakeHistoty()
    self.recv_fakeHistoty()

  def send_fakeHistoty(self):
    self._oprot.writeMessageBegin('fakeHistoty', TMessageType.CALL, self._seqid)
    args = fakeHistoty_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_fakeHistoty(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = fakeHistoty_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def markAsRead(self, request):
    """
    ************
       OTHER    *
    ************

    Parameters:
     - request
    """
    self.send_markAsRead(request)
    self.recv_markAsRead()

  def send_markAsRead(self, request):
    self._oprot.writeMessageBegin('markAsRead', TMessageType.CALL, self._seqid)
    args = markAsRead_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_markAsRead(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = markAsRead_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.bre is not None:
      raise result.bre
    if result.ue is not None:
      raise result.ue
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["isWareInDraftDeal"] = Processor.process_isWareInDraftDeal
    self._processMap["addWareToDraftDeal"] = Processor.process_addWareToDraftDeal
    self._processMap["updateDraftDealItem"] = Processor.process_updateDraftDealItem
    self._processMap["removeWareFromDraftDeal"] = Processor.process_removeWareFromDraftDeal
    self._processMap["getDraftDeal"] = Processor.process_getDraftDeal
    self._processMap["submitDraftDeal"] = Processor.process_submitDraftDeal
    self._processMap["removeDraftDeal"] = Processor.process_removeDraftDeal
    self._processMap["getDealById"] = Processor.process_getDealById
    self._processMap["getAllDeals"] = Processor.process_getAllDeals
    self._processMap["getDealsCounters"] = Processor.process_getDealsCounters
    self._processMap["sendPriceResponse"] = Processor.process_sendPriceResponse
    self._processMap["sendOffer"] = Processor.process_sendOffer
    self._processMap["acceptOffer"] = Processor.process_acceptOffer
    self._processMap["commitDeal"] = Processor.process_commitDeal
    self._processMap["cancelDeal"] = Processor.process_cancelDeal
    self._processMap["getDealsStatistic"] = Processor.process_getDealsStatistic
    self._processMap["fakeHistoty"] = Processor.process_fakeHistoty
    self._processMap["markAsRead"] = Processor.process_markAsRead

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_isWareInDraftDeal(self, seqid, iprot, oprot):
    args = isWareInDraftDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isWareInDraftDeal_result()
    try:
      result.success = self._handler.isWareInDraftDeal(args.buyerId, args.wareId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("isWareInDraftDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addWareToDraftDeal(self, seqid, iprot, oprot):
    args = addWareToDraftDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addWareToDraftDeal_result()
    try:
      result.success = self._handler.addWareToDraftDeal(args.buyerId, args.wareId, args.amount)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    except Exceptions.ttypes.AlreadyExistsException, aee:
      result.aee = aee
    oprot.writeMessageBegin("addWareToDraftDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateDraftDealItem(self, seqid, iprot, oprot):
    args = updateDraftDealItem_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateDraftDealItem_result()
    try:
      result.success = self._handler.updateDraftDealItem(args.buyerId, args.wareId, args.amount)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("updateDraftDealItem", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeWareFromDraftDeal(self, seqid, iprot, oprot):
    args = removeWareFromDraftDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeWareFromDraftDeal_result()
    try:
      result.success = self._handler.removeWareFromDraftDeal(args.buyerId, args.wareId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    except Exceptions.ttypes.NullResultException, nre:
      result.nre = nre
    oprot.writeMessageBegin("removeWareFromDraftDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDraftDeal(self, seqid, iprot, oprot):
    args = getDraftDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDraftDeal_result()
    try:
      result.success = self._handler.getDraftDeal(args.buyerId, args.sellerId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    except Exceptions.ttypes.NullResultException, nre:
      result.nre = nre
    oprot.writeMessageBegin("getDraftDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_submitDraftDeal(self, seqid, iprot, oprot):
    args = submitDraftDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = submitDraftDeal_result()
    try:
      result.success = self._handler.submitDraftDeal(args.buyerId, args.sellerId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("submitDraftDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeDraftDeal(self, seqid, iprot, oprot):
    args = removeDraftDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeDraftDeal_result()
    try:
      self._handler.removeDraftDeal(args.buyerId, args.sellerId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("removeDraftDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDealById(self, seqid, iprot, oprot):
    args = getDealById_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDealById_result()
    try:
      result.success = self._handler.getDealById(args.dealId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getDealById", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllDeals(self, seqid, iprot, oprot):
    args = getAllDeals_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllDeals_result()
    try:
      result.success = self._handler.getAllDeals(args.userId, args.state)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getAllDeals", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDealsCounters(self, seqid, iprot, oprot):
    args = getDealsCounters_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDealsCounters_result()
    try:
      result.success = self._handler.getDealsCounters(args.userId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getDealsCounters", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendPriceResponse(self, seqid, iprot, oprot):
    args = sendPriceResponse_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendPriceResponse_result()
    try:
      result.success = self._handler.sendPriceResponse(args.dealId, args.changes)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("sendPriceResponse", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendOffer(self, seqid, iprot, oprot):
    args = sendOffer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendOffer_result()
    try:
      result.success = self._handler.sendOffer(args.dealId, args.changes, args.sender)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("sendOffer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_acceptOffer(self, seqid, iprot, oprot):
    args = acceptOffer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = acceptOffer_result()
    try:
      result.success = self._handler.acceptOffer(args.dealId, args.sender)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("acceptOffer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_commitDeal(self, seqid, iprot, oprot):
    args = commitDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = commitDeal_result()
    try:
      result.success = self._handler.commitDeal(args.dealId)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("commitDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_cancelDeal(self, seqid, iprot, oprot):
    args = cancelDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = cancelDeal_result()
    try:
      result.success = self._handler.cancelDeal(args.dealId, args.sender)
    except Exceptions.ttypes.NoSuchResourceException, nsre:
      result.nsre = nsre
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.MalformedException, me:
      result.me = me
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("cancelDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDealsStatistic(self, seqid, iprot, oprot):
    args = getDealsStatistic_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDealsStatistic_result()
    try:
      result.success = self._handler.getDealsStatistic(args.request)
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("getDealsStatistic", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_fakeHistoty(self, seqid, iprot, oprot):
    args = fakeHistoty_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = fakeHistoty_result()
    self._handler.fakeHistoty()
    oprot.writeMessageBegin("fakeHistoty", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_markAsRead(self, seqid, iprot, oprot):
    args = markAsRead_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = markAsRead_result()
    try:
      self._handler.markAsRead(args.request)
    except Exceptions.ttypes.BadRequestException, bre:
      result.bre = bre
    except Exceptions.ttypes.UnavailableException, ue:
      result.ue = ue
    oprot.writeMessageBegin("markAsRead", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class isWareInDraftDeal_args:
  """
  Attributes:
   - buyerId
   - wareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.STRING, 'wareId', None, None, ), # 2
  )

  def __init__(self, buyerId=None, wareId=None,):
    self.buyerId = buyerId
    self.wareId = wareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isWareInDraftDeal_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 2)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isWareInDraftDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isWareInDraftDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addWareToDraftDeal_args:
  """
  Attributes:
   - buyerId
   - wareId
   - amount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.STRING, 'wareId', None, None, ), # 2
    (3, TType.I32, 'amount', None, None, ), # 3
  )

  def __init__(self, buyerId=None, wareId=None, amount=None,):
    self.buyerId = buyerId
    self.wareId = wareId
    self.amount = amount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.amount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addWareToDraftDeal_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 2)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 3)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addWareToDraftDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
   - aee
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'aee', (Exceptions.ttypes.AlreadyExistsException, Exceptions.ttypes.AlreadyExistsException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None, aee=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue
    self.aee = aee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.aee = Exceptions.ttypes.AlreadyExistsException()
          self.aee.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addWareToDraftDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    if self.aee is not None:
      oprot.writeFieldBegin('aee', TType.STRUCT, 5)
      self.aee.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDraftDealItem_args:
  """
  Attributes:
   - buyerId
   - wareId
   - amount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.STRING, 'wareId', None, None, ), # 2
    (3, TType.I32, 'amount', None, None, ), # 3
  )

  def __init__(self, buyerId=None, wareId=None, amount=None,):
    self.buyerId = buyerId
    self.wareId = wareId
    self.amount = amount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.amount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDraftDealItem_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 2)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 3)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDraftDealItem_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDraftDealItem_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeWareFromDraftDeal_args:
  """
  Attributes:
   - buyerId
   - wareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.STRING, 'wareId', None, None, ), # 2
  )

  def __init__(self, buyerId=None, wareId=None,):
    self.buyerId = buyerId
    self.wareId = wareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeWareFromDraftDeal_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 2)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeWareFromDraftDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
   - nre
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'nre', (Exceptions.ttypes.NullResultException, Exceptions.ttypes.NullResultException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None, nre=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue
    self.nre = nre

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.nre = Exceptions.ttypes.NullResultException()
          self.nre.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeWareFromDraftDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    if self.nre is not None:
      oprot.writeFieldBegin('nre', TType.STRUCT, 5)
      self.nre.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDraftDeal_args:
  """
  Attributes:
   - buyerId
   - sellerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.I32, 'sellerId', None, None, ), # 2
  )

  def __init__(self, buyerId=None, sellerId=None,):
    self.buyerId = buyerId
    self.sellerId = sellerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sellerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDraftDeal_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.sellerId is not None:
      oprot.writeFieldBegin('sellerId', TType.I32, 2)
      oprot.writeI32(self.sellerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDraftDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
   - nre
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'nre', (Exceptions.ttypes.NullResultException, Exceptions.ttypes.NullResultException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None, nre=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue
    self.nre = nre

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.nre = Exceptions.ttypes.NullResultException()
          self.nre.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDraftDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    if self.nre is not None:
      oprot.writeFieldBegin('nre', TType.STRUCT, 5)
      self.nre.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class submitDraftDeal_args:
  """
  Attributes:
   - buyerId
   - sellerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.I32, 'sellerId', None, None, ), # 2
  )

  def __init__(self, buyerId=None, sellerId=None,):
    self.buyerId = buyerId
    self.sellerId = sellerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sellerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('submitDraftDeal_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.sellerId is not None:
      oprot.writeFieldBegin('sellerId', TType.I32, 2)
      oprot.writeI32(self.sellerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class submitDraftDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('submitDraftDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeDraftDeal_args:
  """
  Attributes:
   - buyerId
   - sellerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'buyerId', None, None, ), # 1
    (2, TType.I32, 'sellerId', None, None, ), # 2
  )

  def __init__(self, buyerId=None, sellerId=None,):
    self.buyerId = buyerId
    self.sellerId = sellerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.buyerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sellerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeDraftDeal_args')
    if self.buyerId is not None:
      oprot.writeFieldBegin('buyerId', TType.I32, 1)
      oprot.writeI32(self.buyerId)
      oprot.writeFieldEnd()
    if self.sellerId is not None:
      oprot.writeFieldBegin('sellerId', TType.I32, 2)
      oprot.writeI32(self.sellerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeDraftDeal_result:
  """
  Attributes:
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, nsre=None, bre=None, me=None, ue=None,):
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeDraftDeal_result')
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDealById_args:
  """
  Attributes:
   - dealId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dealId', None, None, ), # 1
  )

  def __init__(self, dealId=None,):
    self.dealId = dealId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dealId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDealById_args')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.I64, 1)
      oprot.writeI64(self.dealId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDealById_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDealById_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllDeals_args:
  """
  Attributes:
   - userId
   - state
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.I32, 'state', None, None, ), # 2
  )

  def __init__(self, userId=None, state=None,):
    self.userId = userId
    self.state = state

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllDeals_args')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 2)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllDeals_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(DealDto, DealDto.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = DealDto()
            _elem19.read(iprot)
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllDeals_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter20 in self.success:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDealsCounters_args:
  """
  Attributes:
   - userId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
  )

  def __init__(self, userId=None,):
    self.userId = userId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDealsCounters_args')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDealsCounters_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin()
          for _i25 in xrange(_size21):
            _key26 = iprot.readI32();
            _val27 = iprot.readI64();
            self.success[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDealsCounters_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.success))
      for kiter28,viter29 in self.success.items():
        oprot.writeI32(kiter28)
        oprot.writeI64(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPriceResponse_args:
  """
  Attributes:
   - dealId
   - changes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dealId', None, None, ), # 1
    (2, TType.LIST, 'changes', (TType.STRUCT,(DealItemDto, DealItemDto.thrift_spec)), None, ), # 2
  )

  def __init__(self, dealId=None, changes=None,):
    self.dealId = dealId
    self.changes = changes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dealId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.changes = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = DealItemDto()
            _elem35.read(iprot)
            self.changes.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPriceResponse_args')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.I64, 1)
      oprot.writeI64(self.dealId)
      oprot.writeFieldEnd()
    if self.changes is not None:
      oprot.writeFieldBegin('changes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.changes))
      for iter36 in self.changes:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendPriceResponse_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendPriceResponse_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendOffer_args:
  """
  Attributes:
   - dealId
   - changes
   - sender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dealId', None, None, ), # 1
    (2, TType.LIST, 'changes', (TType.STRUCT,(DealItemDto, DealItemDto.thrift_spec)), None, ), # 2
    (3, TType.I32, 'sender', None, None, ), # 3
  )

  def __init__(self, dealId=None, changes=None, sender=None,):
    self.dealId = dealId
    self.changes = changes
    self.sender = sender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dealId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.changes = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = DealItemDto()
            _elem42.read(iprot)
            self.changes.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sender = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendOffer_args')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.I64, 1)
      oprot.writeI64(self.dealId)
      oprot.writeFieldEnd()
    if self.changes is not None:
      oprot.writeFieldBegin('changes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.changes))
      for iter43 in self.changes:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.I32, 3)
      oprot.writeI32(self.sender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendOffer_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendOffer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class acceptOffer_args:
  """
  Attributes:
   - dealId
   - sender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dealId', None, None, ), # 1
    (2, TType.I32, 'sender', None, None, ), # 2
  )

  def __init__(self, dealId=None, sender=None,):
    self.dealId = dealId
    self.sender = sender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dealId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sender = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('acceptOffer_args')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.I64, 1)
      oprot.writeI64(self.dealId)
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.I32, 2)
      oprot.writeI32(self.sender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class acceptOffer_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('acceptOffer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class commitDeal_args:
  """
  Attributes:
   - dealId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dealId', None, None, ), # 1
  )

  def __init__(self, dealId=None,):
    self.dealId = dealId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dealId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('commitDeal_args')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.I64, 1)
      oprot.writeI64(self.dealId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class commitDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('commitDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class cancelDeal_args:
  """
  Attributes:
   - dealId
   - sender
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dealId', None, None, ), # 1
    (2, TType.I32, 'sender', None, None, ), # 2
  )

  def __init__(self, dealId=None, sender=None,):
    self.dealId = dealId
    self.sender = sender

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dealId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sender = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('cancelDeal_args')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.I64, 1)
      oprot.writeI64(self.dealId)
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.I32, 2)
      oprot.writeI32(self.sender)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class cancelDeal_result:
  """
  Attributes:
   - success
   - nsre
   - bre
   - me
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealDto, DealDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'nsre', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'me', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, nsre=None, bre=None, me=None, ue=None,):
    self.success = success
    self.nsre = nsre
    self.bre = bre
    self.me = me
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nsre = Exceptions.ttypes.NoSuchResourceException()
          self.nsre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.me = Exceptions.ttypes.MalformedException()
          self.me.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('cancelDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.nsre is not None:
      oprot.writeFieldBegin('nsre', TType.STRUCT, 1)
      self.nsre.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 2)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.me is not None:
      oprot.writeFieldBegin('me', TType.STRUCT, 3)
      self.me.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 4)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDealsStatistic_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (DealsReportRequest, DealsReportRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = DealsReportRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDealsStatistic_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDealsStatistic_result:
  """
  Attributes:
   - success
   - bre
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DealReportResponse, DealReportResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, bre=None, ue=None,):
    self.success = success
    self.bre = bre
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DealReportResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDealsStatistic_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 1)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 2)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class fakeHistoty_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fakeHistoty_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class fakeHistoty_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fakeHistoty_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class markAsRead_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (DealIdRequest, DealIdRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = DealIdRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('markAsRead_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class markAsRead_result:
  """
  Attributes:
   - bre
   - ue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'bre', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ue', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 2
  )

  def __init__(self, bre=None, ue=None,):
    self.bre = bre
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.bre = Exceptions.ttypes.BadRequestException()
          self.bre.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ue = Exceptions.ttypes.UnavailableException()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('markAsRead_result')
    if self.bre is not None:
      oprot.writeFieldBegin('bre', TType.STRUCT, 1)
      self.bre.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 2)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
