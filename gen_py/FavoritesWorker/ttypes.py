# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import gen_py.Exceptions.ttypes
import gen_py.Common.ttypes
import gen_py.FavoritesConstants.ttypes
import gen_py.AccountingWorker.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FavoriteContentDto:
  """
  Attributes:
   - userId
   - type
   - favUserId
   - favWareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'favUserId', None, None, ), # 3
    (4, TType.STRING, 'favWareId', None, None, ), # 4
  )

  def __init__(self, userId=None, type=None, favUserId=None, favWareId=None,):
    self.userId = userId
    self.type = type
    self.favUserId = favUserId
    self.favWareId = favWareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.favUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.favWareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FavoriteContentDto')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.favUserId is not None:
      oprot.writeFieldBegin('favUserId', TType.I32, 3)
      oprot.writeI32(self.favUserId)
      oprot.writeFieldEnd()
    if self.favWareId is not None:
      oprot.writeFieldBegin('favWareId', TType.STRING, 4)
      oprot.writeString(self.favWareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FavoriteDto:
  """
  Attributes:
   - creationTimestamp
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'creationTimestamp', None, None, ), # 1
    (2, TType.STRUCT, 'content', (FavoriteContentDto, FavoriteContentDto.thrift_spec), None, ), # 2
  )

  def __init__(self, creationTimestamp=None, content=None,):
    self.creationTimestamp = creationTimestamp
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.creationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.content = FavoriteContentDto()
          self.content.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FavoriteDto')
    if self.creationTimestamp is not None:
      oprot.writeFieldBegin('creationTimestamp', TType.I64, 1)
      oprot.writeI64(self.creationTimestamp)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRUCT, 2)
      self.content.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FavoritesAddRequest:
  """
  REQUESTS


  Attributes:
   - contentDtoList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'contentDtoList', (TType.STRUCT,(FavoriteContentDto, FavoriteContentDto.thrift_spec)), None, ), # 1
  )

  def __init__(self, contentDtoList=None,):
    self.contentDtoList = contentDtoList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.contentDtoList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = FavoriteContentDto()
            _elem5.read(iprot)
            self.contentDtoList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FavoritesAddRequest')
    if self.contentDtoList is not None:
      oprot.writeFieldBegin('contentDtoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.contentDtoList))
      for iter6 in self.contentDtoList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FavoritesRemoveRequest:
  """
  Attributes:
   - type
   - userId
   - favUsrIds
   - favWareIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'userId', None, None, ), # 2
    (3, TType.SET, 'favUsrIds', (TType.I32,None), None, ), # 3
    (4, TType.SET, 'favWareIds', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, type=None, userId=None, favUsrIds=None, favWareIds=None,):
    self.type = type
    self.userId = userId
    self.favUsrIds = favUsrIds
    self.favWareIds = favWareIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.favUsrIds = set()
          (_etype10, _size7) = iprot.readSetBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.favUsrIds.add(_elem12)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.favWareIds = set()
          (_etype16, _size13) = iprot.readSetBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString();
            self.favWareIds.add(_elem18)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FavoritesRemoveRequest')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 2)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.favUsrIds is not None:
      oprot.writeFieldBegin('favUsrIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I32, len(self.favUsrIds))
      for iter19 in self.favUsrIds:
        oprot.writeI32(iter19)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.favWareIds is not None:
      oprot.writeFieldBegin('favWareIds', TType.SET, 4)
      oprot.writeSetBegin(TType.STRING, len(self.favWareIds))
      for iter20 in self.favWareIds:
        oprot.writeString(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PagingRequest:
  """
  Attributes:
   - offset
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'offset', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, offset=None, count=None,):
    self.offset = offset
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PagingRequest')
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 1)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsersFavoritesRequest:
  """
  Attributes:
   - pagingRequest
   - userId
   - type
   - favUserIdSet
   - favWareIdSet
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pagingRequest', (PagingRequest, PagingRequest.thrift_spec), None, ), # 1
    (2, TType.I32, 'userId', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.SET, 'favUserIdSet', (TType.I32,None), None, ), # 4
    (5, TType.SET, 'favWareIdSet', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, pagingRequest=None, userId=None, type=None, favUserIdSet=None, favWareIdSet=None,):
    self.pagingRequest = pagingRequest
    self.userId = userId
    self.type = type
    self.favUserIdSet = favUserIdSet
    self.favWareIdSet = favWareIdSet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pagingRequest = PagingRequest()
          self.pagingRequest.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.favUserIdSet = set()
          (_etype24, _size21) = iprot.readSetBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.favUserIdSet.add(_elem26)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.favWareIdSet = set()
          (_etype30, _size27) = iprot.readSetBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString();
            self.favWareIdSet.add(_elem32)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsersFavoritesRequest')
    if self.pagingRequest is not None:
      oprot.writeFieldBegin('pagingRequest', TType.STRUCT, 1)
      self.pagingRequest.write(oprot)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 2)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.favUserIdSet is not None:
      oprot.writeFieldBegin('favUserIdSet', TType.SET, 4)
      oprot.writeSetBegin(TType.I32, len(self.favUserIdSet))
      for iter33 in self.favUserIdSet:
        oprot.writeI32(iter33)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.favWareIdSet is not None:
      oprot.writeFieldBegin('favWareIdSet', TType.SET, 5)
      oprot.writeSetBegin(TType.STRING, len(self.favWareIdSet))
      for iter34 in self.favWareIdSet:
        oprot.writeString(iter34)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FavoritesUsersRequest:
  """
  Attributes:
   - pagingRequest
   - type
   - favUserId
   - favWareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pagingRequest', (PagingRequest, PagingRequest.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I32, 'favUserId', None, None, ), # 4
    (5, TType.STRING, 'favWareId', None, None, ), # 5
  )

  def __init__(self, pagingRequest=None, type=None, favUserId=None, favWareId=None,):
    self.pagingRequest = pagingRequest
    self.type = type
    self.favUserId = favUserId
    self.favWareId = favWareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pagingRequest = PagingRequest()
          self.pagingRequest.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.favUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.favWareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FavoritesUsersRequest')
    if self.pagingRequest is not None:
      oprot.writeFieldBegin('pagingRequest', TType.STRUCT, 1)
      self.pagingRequest.write(oprot)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.favUserId is not None:
      oprot.writeFieldBegin('favUserId', TType.I32, 4)
      oprot.writeI32(self.favUserId)
      oprot.writeFieldEnd()
    if self.favWareId is not None:
      oprot.writeFieldBegin('favWareId', TType.STRING, 5)
      oprot.writeString(self.favWareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FavoriteListResponse:
  """
  RESPONSES


  Attributes:
   - dtoList
   - totalCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'dtoList', (TType.STRUCT,(FavoriteDto, FavoriteDto.thrift_spec)), None, ), # 1
    (2, TType.I32, 'totalCount', None, None, ), # 2
  )

  def __init__(self, dtoList=None, totalCount=None,):
    self.dtoList = dtoList
    self.totalCount = totalCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.dtoList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = FavoriteDto()
            _elem40.read(iprot)
            self.dtoList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FavoriteListResponse')
    if self.dtoList is not None:
      oprot.writeFieldBegin('dtoList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.dtoList))
      for iter41 in self.dtoList:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 2)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
