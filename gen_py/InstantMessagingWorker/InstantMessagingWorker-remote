# -*- coding: utf-8 -*-
#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from gen_py.InstantMessagingWorker import InstantMessagingWorker
from gen_py.InstantMessagingWorker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void markMessagesAsRead(MarkMessagesAsReadRequestDto request)'
  print '  void markDialogAsRead(MarkDialogAsReadRequestDto request)'
  print '   getMessageHistory(MessageHistoryRequestDto request)'
  print '  DialogInfoDto getChatWithUser(OwnerId ownerId, OpponentId opponentId)'
  print '  DealInfoDto getDealById(string dealId, OwnerId ownerId)'
  print '  InstantMessageDto sendChatMessageToUser(BaseInstantMessageDto message, OpponentId opponentId)'
  print '   getConversationsByUser(ConversationsRequest request)'
  print '  UnreadReportDto getUnreadReport(OwnerId ownerId)'
  print '  UserDealsDto getUserDeals(UserDealsRequestDto request)'
  print '   getDealsWithUser(DealsWithUserRequest request)'
  print '  InstantMessageDto sendDealMessage(BaseInstantMessageDto message, OpponentId opponentId, string wareId)'
  print '  DealInfoDto moveDealToArchive(DialogId dialogId, OwnerId ownerId)'
  print '  MessagesReport getAllWaresDeal(FilterByUserRequest userDealsByWareRequest)'
  print '  UserDialogsDto getUserChats(FilterByUserRequest filter)'
  print '   findAllOpponents(UserId userId)'
  print '  UserDealsDto getBuyerDeals(UserId buyerId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = InstantMessagingWorker.Client(protocol)
transport.open()

if cmd == 'markMessagesAsRead':
  if len(args) != 1:
    print 'markMessagesAsRead requires 1 args'
    sys.exit(1)
  pp.pprint(client.markMessagesAsRead(eval(args[0]),))

elif cmd == 'markDialogAsRead':
  if len(args) != 1:
    print 'markDialogAsRead requires 1 args'
    sys.exit(1)
  pp.pprint(client.markDialogAsRead(eval(args[0]),))

elif cmd == 'getMessageHistory':
  if len(args) != 1:
    print 'getMessageHistory requires 1 args'
    sys.exit(1)
  pp.pprint(client.getMessageHistory(eval(args[0]),))

elif cmd == 'getChatWithUser':
  if len(args) != 2:
    print 'getChatWithUser requires 2 args'
    sys.exit(1)
  pp.pprint(client.getChatWithUser(eval(args[0]),eval(args[1]),))

elif cmd == 'getDealById':
  if len(args) != 2:
    print 'getDealById requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDealById(args[0],eval(args[1]),))

elif cmd == 'sendChatMessageToUser':
  if len(args) != 2:
    print 'sendChatMessageToUser requires 2 args'
    sys.exit(1)
  pp.pprint(client.sendChatMessageToUser(eval(args[0]),eval(args[1]),))

elif cmd == 'getConversationsByUser':
  if len(args) != 1:
    print 'getConversationsByUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.getConversationsByUser(eval(args[0]),))

elif cmd == 'getUnreadReport':
  if len(args) != 1:
    print 'getUnreadReport requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUnreadReport(eval(args[0]),))

elif cmd == 'getUserDeals':
  if len(args) != 1:
    print 'getUserDeals requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUserDeals(eval(args[0]),))

elif cmd == 'getDealsWithUser':
  if len(args) != 1:
    print 'getDealsWithUser requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDealsWithUser(eval(args[0]),))

elif cmd == 'sendDealMessage':
  if len(args) != 3:
    print 'sendDealMessage requires 3 args'
    sys.exit(1)
  pp.pprint(client.sendDealMessage(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'moveDealToArchive':
  if len(args) != 2:
    print 'moveDealToArchive requires 2 args'
    sys.exit(1)
  pp.pprint(client.moveDealToArchive(eval(args[0]),eval(args[1]),))

elif cmd == 'getAllWaresDeal':
  if len(args) != 1:
    print 'getAllWaresDeal requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllWaresDeal(eval(args[0]),))

elif cmd == 'getUserChats':
  if len(args) != 1:
    print 'getUserChats requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUserChats(eval(args[0]),))

elif cmd == 'findAllOpponents':
  if len(args) != 1:
    print 'findAllOpponents requires 1 args'
    sys.exit(1)
  pp.pprint(client.findAllOpponents(eval(args[0]),))

elif cmd == 'getBuyerDeals':
  if len(args) != 1:
    print 'getBuyerDeals requires 1 args'
    sys.exit(1)
  pp.pprint(client.getBuyerDeals(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
