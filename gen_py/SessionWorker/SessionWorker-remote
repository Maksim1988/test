# -*- coding: utf-8 -*-
#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from gen_py.SessionWorker import SessionWorker
from gen_py.SessionWorker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  SessionDto initSession(SessionContextRequestDto sessionRequest)'
  print '  SessionContextDto initContext(SessionContextRequestDto contextRequest)'
  print '  SessionDto getSessionById(string sessionId, bool onlyActive)'
  print '  SessionContextDto getContextForSession(string sessionId, string contextType, bool onlyActive)'
  print '  SessionContextDto getContextById(string contextId, bool onlyActive)'
  print '  void replaceContextData(string contextId, ContextData newContextData)'
  print '  void replaceContextsData( contextsToReplace)'
  print '  void invalidateContext(string contextId)'
  print '  void invalidateSession(string sessionId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SessionWorker.Client(protocol)
transport.open()

if cmd == 'initSession':
  if len(args) != 1:
    print 'initSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.initSession(eval(args[0]),))

elif cmd == 'initContext':
  if len(args) != 1:
    print 'initContext requires 1 args'
    sys.exit(1)
  pp.pprint(client.initContext(eval(args[0]),))

elif cmd == 'getSessionById':
  if len(args) != 2:
    print 'getSessionById requires 2 args'
    sys.exit(1)
  pp.pprint(client.getSessionById(args[0],eval(args[1]),))

elif cmd == 'getContextForSession':
  if len(args) != 3:
    print 'getContextForSession requires 3 args'
    sys.exit(1)
  pp.pprint(client.getContextForSession(args[0],args[1],eval(args[2]),))

elif cmd == 'getContextById':
  if len(args) != 2:
    print 'getContextById requires 2 args'
    sys.exit(1)
  pp.pprint(client.getContextById(args[0],eval(args[1]),))

elif cmd == 'replaceContextData':
  if len(args) != 2:
    print 'replaceContextData requires 2 args'
    sys.exit(1)
  pp.pprint(client.replaceContextData(args[0],eval(args[1]),))

elif cmd == 'replaceContextsData':
  if len(args) != 1:
    print 'replaceContextsData requires 1 args'
    sys.exit(1)
  pp.pprint(client.replaceContextsData(eval(args[0]),))

elif cmd == 'invalidateContext':
  if len(args) != 1:
    print 'invalidateContext requires 1 args'
    sys.exit(1)
  pp.pprint(client.invalidateContext(args[0],))

elif cmd == 'invalidateSession':
  if len(args) != 1:
    print 'invalidateSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.invalidateSession(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
