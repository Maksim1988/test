# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import gen_py.Exceptions.ttypes
import gen_py.Common.ttypes
import gen_py.SessionWorkerConstants.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class SessionContextDto:
  """
  Пользовательский контекст, часть пользовательской сессии.
  Несет в себе данные контекста - ContextData.
  Имеет срок годности, который автоматически продляется при обращении к контексту.
  Имеет статус, индицирующий свежесть контекста.
  Для поддержки транзакционности изменений контекст имеет ревизию, которая увеличивается на 1 при каждом изменении.
  Это позволяет реализовать CAS.


  Attributes:
   - sessionId: ID сессии, к которой прикреплен контекст

   - contextId: ID самого контекста. Генерируется при создании

   - contextType: Тип контекста, указывается при создании.

   - revision: Ревизия для поддержки версионирования и CAS. Стартует с 1. При каждом изменении увеличивается на 1.

   - creationTimestamp: Время создания контекста, Unix Time ms.

   - expirationTimestamp: Время истечения срока годности контекста, Unix Time ms.
  При каждом обращении к контексту его дата истечения устанавливается в lastAccessTimestamp + expirationTime.

   - lastAccessTimestamp: Время последнего обращения к контексту, Unix Time ms.
  Обновляется при каждом фиксируемом обращении.
  Фиксируемое обращение - это когда refresh == true (см. методы SessionWorker'а).

   - expirationTime: Срок годности контекста, в мс. См. expirationTimestamp.

   - status: Статус контекста.

   - contextData: Данные контекста.
  Представляют собой map<string, string>, никак не интерпретируются SessionWorker'ом.
  Могут быть изменены по частям, см. методы SessionWorker'а.

  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.STRING, 'contextId', None, None, ), # 2
    (3, TType.STRING, 'contextType', None, None, ), # 3
    (4, TType.I32, 'revision', None, None, ), # 4
    (5, TType.I64, 'creationTimestamp', None, None, ), # 5
    (6, TType.I64, 'expirationTimestamp', None, None, ), # 6
    (7, TType.I64, 'lastAccessTimestamp', None, None, ), # 7
    (8, TType.I64, 'expirationTime', None, None, ), # 8
    (9, TType.I32, 'status', None, None, ), # 9
    (10, TType.MAP, 'contextData', (TType.STRING,None,TType.STRING,None), None, ), # 10
  )

  def __init__(self, sessionId=None, contextId=None, contextType=None, revision=None, creationTimestamp=None, expirationTimestamp=None, lastAccessTimestamp=None, expirationTime=None, status=None, contextData=None,):
    self.sessionId = sessionId
    self.contextId = contextId
    self.contextType = contextType
    self.revision = revision
    self.creationTimestamp = creationTimestamp
    self.expirationTimestamp = expirationTimestamp
    self.lastAccessTimestamp = lastAccessTimestamp
    self.expirationTime = expirationTime
    self.status = status
    self.contextData = contextData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.contextId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.contextType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.revision = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.expirationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.lastAccessTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.expirationTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.contextData = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.contextData[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SessionContextDto')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.contextId is not None:
      oprot.writeFieldBegin('contextId', TType.STRING, 2)
      oprot.writeString(self.contextId)
      oprot.writeFieldEnd()
    if self.contextType is not None:
      oprot.writeFieldBegin('contextType', TType.STRING, 3)
      oprot.writeString(self.contextType)
      oprot.writeFieldEnd()
    if self.revision is not None:
      oprot.writeFieldBegin('revision', TType.I32, 4)
      oprot.writeI32(self.revision)
      oprot.writeFieldEnd()
    if self.creationTimestamp is not None:
      oprot.writeFieldBegin('creationTimestamp', TType.I64, 5)
      oprot.writeI64(self.creationTimestamp)
      oprot.writeFieldEnd()
    if self.expirationTimestamp is not None:
      oprot.writeFieldBegin('expirationTimestamp', TType.I64, 6)
      oprot.writeI64(self.expirationTimestamp)
      oprot.writeFieldEnd()
    if self.lastAccessTimestamp is not None:
      oprot.writeFieldBegin('lastAccessTimestamp', TType.I64, 7)
      oprot.writeI64(self.lastAccessTimestamp)
      oprot.writeFieldEnd()
    if self.expirationTime is not None:
      oprot.writeFieldBegin('expirationTime', TType.I64, 8)
      oprot.writeI64(self.expirationTime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.contextData is not None:
      oprot.writeFieldBegin('contextData', TType.MAP, 10)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.contextData))
      for kiter7,viter8 in self.contextData.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SessionDto:
  """
  Пользовательская сессия. Представляет собой связку пользовательских контекстов.
  Никогда не протухает. Привязывается к браузеру пользователя с помощью cookie.
  Создается с помощью SessionWorker.initSession()


  Attributes:
   - sessionId: ID сессии. Должен закапываться пользователю в cookies.

   - creationTimestamp: Время создания сессии. Unix Time ms.

   - lastAccessTimestamp: Время последнего обращения к сессии. Unix Time ms.
  Обновляется при каждом фиксируемом обращении к контекстам сессии.

   - contexts: Список имеющихся контекстов.

  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.I64, 'creationTimestamp', None, None, ), # 2
    (3, TType.I64, 'lastAccessTimestamp', None, None, ), # 3
    (4, TType.LIST, 'contexts', (TType.STRUCT,(SessionContextDto, SessionContextDto.thrift_spec)), None, ), # 4
  )

  def __init__(self, sessionId=None, creationTimestamp=None, lastAccessTimestamp=None, contexts=None,):
    self.sessionId = sessionId
    self.creationTimestamp = creationTimestamp
    self.lastAccessTimestamp = lastAccessTimestamp
    self.contexts = contexts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.creationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.lastAccessTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.contexts = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = SessionContextDto()
            _elem14.read(iprot)
            self.contexts.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SessionDto')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.creationTimestamp is not None:
      oprot.writeFieldBegin('creationTimestamp', TType.I64, 2)
      oprot.writeI64(self.creationTimestamp)
      oprot.writeFieldEnd()
    if self.lastAccessTimestamp is not None:
      oprot.writeFieldBegin('lastAccessTimestamp', TType.I64, 3)
      oprot.writeI64(self.lastAccessTimestamp)
      oprot.writeFieldEnd()
    if self.contexts is not None:
      oprot.writeFieldBegin('contexts', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.contexts))
      for iter15 in self.contexts:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SessionContextRequestDto:
  """
  Запрос на создание пользовательского контекста.


  Attributes:
   - sessionId
   - contextType
   - expirationPeriodMillis
   - contextData
   - refreshOnGet
   - refreshOnSet
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.STRING, 'contextType', None, None, ), # 2
    (3, TType.I64, 'expirationPeriodMillis', None, None, ), # 3
    (4, TType.MAP, 'contextData', (TType.STRING,None,TType.STRING,None), None, ), # 4
    (5, TType.BOOL, 'refreshOnGet', None, True, ), # 5
    (6, TType.BOOL, 'refreshOnSet', None, True, ), # 6
  )

  def __init__(self, sessionId=None, contextType=None, expirationPeriodMillis=None, contextData=None, refreshOnGet=thrift_spec[5][4], refreshOnSet=thrift_spec[6][4],):
    self.sessionId = sessionId
    self.contextType = contextType
    self.expirationPeriodMillis = expirationPeriodMillis
    self.contextData = contextData
    self.refreshOnGet = refreshOnGet
    self.refreshOnSet = refreshOnSet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.contextType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.expirationPeriodMillis = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.contextData = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin()
          for _i20 in xrange(_size16):
            _key21 = iprot.readString();
            _val22 = iprot.readString();
            self.contextData[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.refreshOnGet = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.refreshOnSet = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SessionContextRequestDto')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.contextType is not None:
      oprot.writeFieldBegin('contextType', TType.STRING, 2)
      oprot.writeString(self.contextType)
      oprot.writeFieldEnd()
    if self.expirationPeriodMillis is not None:
      oprot.writeFieldBegin('expirationPeriodMillis', TType.I64, 3)
      oprot.writeI64(self.expirationPeriodMillis)
      oprot.writeFieldEnd()
    if self.contextData is not None:
      oprot.writeFieldBegin('contextData', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.contextData))
      for kiter23,viter24 in self.contextData.items():
        oprot.writeString(kiter23)
        oprot.writeString(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.refreshOnGet is not None:
      oprot.writeFieldBegin('refreshOnGet', TType.BOOL, 5)
      oprot.writeBool(self.refreshOnGet)
      oprot.writeFieldEnd()
    if self.refreshOnSet is not None:
      oprot.writeFieldBegin('refreshOnSet', TType.BOOL, 6)
      oprot.writeBool(self.refreshOnSet)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
