# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import gen_py.Exceptions.ttypes
import gen_py.StaticStorageWorkerConstants.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FileRefDto:
  """
  Attributes:
   - id
   - format
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'format', None, None, ), # 2
  )

  def __init__(self, id=None, format=None,):
    self.id = id
    self.format = format

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.format = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileRefDto')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.format is not None:
      oprot.writeFieldBegin('format', TType.STRING, 2)
      oprot.writeString(self.format)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InputFileDto:
  """
  Данные о типе и названии будут сохранены в мета-информацию объекта и доступны через HTTP-заголовки
  Content-Type & Content-Disposition.


  Attributes:
   - data
   - mimeType
   - fileName
   - fileId: Желаемый идентификатор ресурса, по которому его можно найти на статик сервере

  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'data', None, None, ), # 1
    (2, TType.STRING, 'mimeType', None, None, ), # 2
    (3, TType.STRING, 'fileName', None, None, ), # 3
    (4, TType.STRING, 'fileId', None, None, ), # 4
  )

  def __init__(self, data=None, mimeType=None, fileName=None, fileId=None,):
    self.data = data
    self.mimeType = mimeType
    self.fileName = fileName
    self.fileId = fileId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mimeType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fileId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InputFileDto')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 1)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    if self.mimeType is not None:
      oprot.writeFieldBegin('mimeType', TType.STRING, 2)
      oprot.writeString(self.mimeType)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 3)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.fileId is not None:
      oprot.writeFieldBegin('fileId', TType.STRING, 4)
      oprot.writeString(self.fileId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RotationTransformationDto:
  """
  Attributes:
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
  )

  def __init__(self, type=None,):
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RotationTransformationDto')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CropTransformationDto:
  """
  Attributes:
   - leftTopXPercent
   - leftTopYPercent
   - widthPercent
   - heightPercent
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'leftTopXPercent', None, None, ), # 1
    (2, TType.DOUBLE, 'leftTopYPercent', None, None, ), # 2
    (3, TType.DOUBLE, 'widthPercent', None, None, ), # 3
    (4, TType.DOUBLE, 'heightPercent', None, None, ), # 4
  )

  def __init__(self, leftTopXPercent=None, leftTopYPercent=None, widthPercent=None, heightPercent=None,):
    self.leftTopXPercent = leftTopXPercent
    self.leftTopYPercent = leftTopYPercent
    self.widthPercent = widthPercent
    self.heightPercent = heightPercent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.leftTopXPercent = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.leftTopYPercent = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.widthPercent = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.heightPercent = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CropTransformationDto')
    if self.leftTopXPercent is not None:
      oprot.writeFieldBegin('leftTopXPercent', TType.DOUBLE, 1)
      oprot.writeDouble(self.leftTopXPercent)
      oprot.writeFieldEnd()
    if self.leftTopYPercent is not None:
      oprot.writeFieldBegin('leftTopYPercent', TType.DOUBLE, 2)
      oprot.writeDouble(self.leftTopYPercent)
      oprot.writeFieldEnd()
    if self.widthPercent is not None:
      oprot.writeFieldBegin('widthPercent', TType.DOUBLE, 3)
      oprot.writeDouble(self.widthPercent)
      oprot.writeFieldEnd()
    if self.heightPercent is not None:
      oprot.writeFieldBegin('heightPercent', TType.DOUBLE, 4)
      oprot.writeDouble(self.heightPercent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FullTransformationDto:
  """
  Attributes:
   - crop
   - rotation
   - profile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'crop', (CropTransformationDto, CropTransformationDto.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'rotation', (RotationTransformationDto, RotationTransformationDto.thrift_spec), None, ), # 2
    (3, TType.STRING, 'profile', None, None, ), # 3
  )

  def __init__(self, crop=None, rotation=None, profile=None,):
    self.crop = crop
    self.rotation = rotation
    self.profile = profile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.crop = CropTransformationDto()
          self.crop.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rotation = RotationTransformationDto()
          self.rotation.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.profile = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FullTransformationDto')
    if self.crop is not None:
      oprot.writeFieldBegin('crop', TType.STRUCT, 1)
      self.crop.write(oprot)
      oprot.writeFieldEnd()
    if self.rotation is not None:
      oprot.writeFieldBegin('rotation', TType.STRUCT, 2)
      self.rotation.write(oprot)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRING, 3)
      oprot.writeString(self.profile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FileMetadataDto:
  """
  Attributes:
   - fileName
   - mimeType
   - length
   - lastModified
   - profile
   - formats
   - crop
   - rotation
   - customHeaders
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fileName', None, None, ), # 1
    (2, TType.STRING, 'mimeType', None, None, ), # 2
    (3, TType.I64, 'length', None, None, ), # 3
    (4, TType.I64, 'lastModified', None, None, ), # 4
    (5, TType.STRING, 'profile', None, None, ), # 5
    (6, TType.LIST, 'formats', (TType.STRING,None), None, ), # 6
    (7, TType.STRUCT, 'crop', (CropTransformationDto, CropTransformationDto.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'rotation', (RotationTransformationDto, RotationTransformationDto.thrift_spec), None, ), # 8
    (9, TType.MAP, 'customHeaders', (TType.STRING,None,TType.STRING,None), None, ), # 9
  )

  def __init__(self, fileName=None, mimeType=None, length=None, lastModified=None, profile=None, formats=None, crop=None, rotation=None, customHeaders=None,):
    self.fileName = fileName
    self.mimeType = mimeType
    self.length = length
    self.lastModified = lastModified
    self.profile = profile
    self.formats = formats
    self.crop = crop
    self.rotation = rotation
    self.customHeaders = customHeaders

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mimeType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.length = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.lastModified = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.profile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.formats = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.formats.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.crop = CropTransformationDto()
          self.crop.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.rotation = RotationTransformationDto()
          self.rotation.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.customHeaders = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin()
          for _i10 in xrange(_size6):
            _key11 = iprot.readString();
            _val12 = iprot.readString();
            self.customHeaders[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileMetadataDto')
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 1)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.mimeType is not None:
      oprot.writeFieldBegin('mimeType', TType.STRING, 2)
      oprot.writeString(self.mimeType)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.I64, 3)
      oprot.writeI64(self.length)
      oprot.writeFieldEnd()
    if self.lastModified is not None:
      oprot.writeFieldBegin('lastModified', TType.I64, 4)
      oprot.writeI64(self.lastModified)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRING, 5)
      oprot.writeString(self.profile)
      oprot.writeFieldEnd()
    if self.formats is not None:
      oprot.writeFieldBegin('formats', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.formats))
      for iter13 in self.formats:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.crop is not None:
      oprot.writeFieldBegin('crop', TType.STRUCT, 7)
      self.crop.write(oprot)
      oprot.writeFieldEnd()
    if self.rotation is not None:
      oprot.writeFieldBegin('rotation', TType.STRUCT, 8)
      self.rotation.write(oprot)
      oprot.writeFieldEnd()
    if self.customHeaders is not None:
      oprot.writeFieldBegin('customHeaders', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.customHeaders))
      for kiter14,viter15 in self.customHeaders.items():
        oprot.writeString(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RefreshAllResultDto:
  """
  Attributes:
   - total
   - refreshed
   - failed
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total', None, None, ), # 1
    (2, TType.I64, 'refreshed', None, None, ), # 2
    (3, TType.I64, 'failed', None, None, ), # 3
  )

  def __init__(self, total=None, refreshed=None, failed=None,):
    self.total = total
    self.refreshed = refreshed
    self.failed = failed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.refreshed = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.failed = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RefreshAllResultDto')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I64, 1)
      oprot.writeI64(self.total)
      oprot.writeFieldEnd()
    if self.refreshed is not None:
      oprot.writeFieldBegin('refreshed', TType.I64, 2)
      oprot.writeI64(self.refreshed)
      oprot.writeFieldEnd()
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.I64, 3)
      oprot.writeI64(self.failed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FileUploadException(TException):
  """
  Attributes:
   - reason
   - failure
   - givenValue
   - requiredValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'reason', None, None, ), # 1
    (2, TType.I32, 'failure', None, None, ), # 2
    (3, TType.STRING, 'givenValue', None, None, ), # 3
    (4, TType.STRING, 'requiredValue', None, None, ), # 4
  )

  def __init__(self, reason=None, failure=None, givenValue=None, requiredValue=None,):
    self.reason = reason
    self.failure = failure
    self.givenValue = givenValue
    self.requiredValue = requiredValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.failure = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.givenValue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.requiredValue = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileUploadException')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 1)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.failure is not None:
      oprot.writeFieldBegin('failure', TType.I32, 2)
      oprot.writeI32(self.failure)
      oprot.writeFieldEnd()
    if self.givenValue is not None:
      oprot.writeFieldBegin('givenValue', TType.STRING, 3)
      oprot.writeString(self.givenValue)
      oprot.writeFieldEnd()
    if self.requiredValue is not None:
      oprot.writeFieldBegin('requiredValue', TType.STRING, 4)
      oprot.writeString(self.requiredValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
