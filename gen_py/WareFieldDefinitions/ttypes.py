# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import gen_py.Common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class FieldDefinitionBaseDto:
  """
  Attributes:
   - name
   - require
   - priority
   - hint
   - visibleForCustomer
   - visibleForOwner
   - visibleForModerator
   - editingPriority
   - localizedName
   - localizedDimension
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'localizedName', None, None, ), # 2
    (3, TType.BOOL, 'require', None, False, ), # 3
    (4, TType.I32, 'priority', None, None, ), # 4
    (5, TType.STRING, 'hint', None, None, ), # 5
    (6, TType.BOOL, 'visibleForCustomer', None, True, ), # 6
    (7, TType.BOOL, 'visibleForOwner', None, True, ), # 7
    (8, TType.BOOL, 'visibleForModerator', None, True, ), # 8
    (9, TType.I32, 'editingPriority', None, None, ), # 9
    (10, TType.STRING, 'localizedDimension', None, None, ), # 10
  )

  def __init__(self, name=None, require=thrift_spec[3][4], priority=None, hint=None, visibleForCustomer=thrift_spec[6][4], visibleForOwner=thrift_spec[7][4], visibleForModerator=thrift_spec[8][4], editingPriority=None, localizedName=None, localizedDimension=None,):
    self.name = name
    self.require = require
    self.priority = priority
    self.hint = hint
    self.visibleForCustomer = visibleForCustomer
    self.visibleForOwner = visibleForOwner
    self.visibleForModerator = visibleForModerator
    self.editingPriority = editingPriority
    self.localizedName = localizedName
    self.localizedDimension = localizedDimension

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.require = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.priority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.hint = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.visibleForCustomer = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.visibleForOwner = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.visibleForModerator = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.editingPriority = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.localizedName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.localizedDimension = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FieldDefinitionBaseDto')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.localizedName is not None:
      oprot.writeFieldBegin('localizedName', TType.STRING, 2)
      oprot.writeString(self.localizedName)
      oprot.writeFieldEnd()
    if self.require is not None:
      oprot.writeFieldBegin('require', TType.BOOL, 3)
      oprot.writeBool(self.require)
      oprot.writeFieldEnd()
    if self.priority is not None:
      oprot.writeFieldBegin('priority', TType.I32, 4)
      oprot.writeI32(self.priority)
      oprot.writeFieldEnd()
    if self.hint is not None:
      oprot.writeFieldBegin('hint', TType.STRING, 5)
      oprot.writeString(self.hint)
      oprot.writeFieldEnd()
    if self.visibleForCustomer is not None:
      oprot.writeFieldBegin('visibleForCustomer', TType.BOOL, 6)
      oprot.writeBool(self.visibleForCustomer)
      oprot.writeFieldEnd()
    if self.visibleForOwner is not None:
      oprot.writeFieldBegin('visibleForOwner', TType.BOOL, 7)
      oprot.writeBool(self.visibleForOwner)
      oprot.writeFieldEnd()
    if self.visibleForModerator is not None:
      oprot.writeFieldBegin('visibleForModerator', TType.BOOL, 8)
      oprot.writeBool(self.visibleForModerator)
      oprot.writeFieldEnd()
    if self.editingPriority is not None:
      oprot.writeFieldBegin('editingPriority', TType.I32, 9)
      oprot.writeI32(self.editingPriority)
      oprot.writeFieldEnd()
    if self.localizedDimension is not None:
      oprot.writeFieldBegin('localizedDimension', TType.STRING, 10)
      oprot.writeString(self.localizedDimension)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IntegerFieldDefinitionDto:
  """
  Attributes:
   - base
   - minValue
   - maxValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.I32, 'minValue', None, None, ), # 5
    (6, TType.I32, 'maxValue', None, None, ), # 6
  )

  def __init__(self, base=None, minValue=None, maxValue=None,):
    self.base = base
    self.minValue = minValue
    self.maxValue = maxValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.minValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.maxValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IntegerFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.minValue is not None:
      oprot.writeFieldBegin('minValue', TType.I32, 5)
      oprot.writeI32(self.minValue)
      oprot.writeFieldEnd()
    if self.maxValue is not None:
      oprot.writeFieldBegin('maxValue', TType.I32, 6)
      oprot.writeI32(self.maxValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IntegerRangeFieldDefinitionDto:
  """
  Attributes:
   - base
   - minLeftValue
   - maxLeftValue
   - minRightValue
   - maxRightValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.I32, 'minLeftValue', None, None, ), # 5
    (6, TType.I32, 'maxLeftValue', None, None, ), # 6
    (7, TType.I32, 'minRightValue', None, None, ), # 7
    (8, TType.I32, 'maxRightValue', None, None, ), # 8
  )

  def __init__(self, base=None, minLeftValue=None, maxLeftValue=None, minRightValue=None, maxRightValue=None,):
    self.base = base
    self.minLeftValue = minLeftValue
    self.maxLeftValue = maxLeftValue
    self.minRightValue = minRightValue
    self.maxRightValue = maxRightValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.minLeftValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.maxLeftValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.minRightValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.maxRightValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IntegerRangeFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.minLeftValue is not None:
      oprot.writeFieldBegin('minLeftValue', TType.I32, 5)
      oprot.writeI32(self.minLeftValue)
      oprot.writeFieldEnd()
    if self.maxLeftValue is not None:
      oprot.writeFieldBegin('maxLeftValue', TType.I32, 6)
      oprot.writeI32(self.maxLeftValue)
      oprot.writeFieldEnd()
    if self.minRightValue is not None:
      oprot.writeFieldBegin('minRightValue', TType.I32, 7)
      oprot.writeI32(self.minRightValue)
      oprot.writeFieldEnd()
    if self.maxRightValue is not None:
      oprot.writeFieldBegin('maxRightValue', TType.I32, 8)
      oprot.writeI32(self.maxRightValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EnumFieldDefinitionDto:
  """
  Attributes:
   - base
   - values
   - localizedValues
   - otherEnabled
   - otherMaxLength
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.SET, 'values', (TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'localizedValues', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.BOOL, 'otherEnabled', None, False, ), # 7
    (8, TType.I32, 'otherMaxLength', None, None, ), # 8
  )

  def __init__(self, base=None, values=None, localizedValues=None, otherEnabled=thrift_spec[7][4], otherMaxLength=None,):
    self.base = base
    self.values = values
    self.localizedValues = localizedValues
    self.otherEnabled = otherEnabled
    self.otherMaxLength = otherMaxLength

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.values = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.values.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.localizedValues = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin()
          for _i10 in xrange(_size6):
            _key11 = iprot.readString();
            _val12 = iprot.readString();
            self.localizedValues[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.otherEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.otherMaxLength = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EnumFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.values is not None:
      oprot.writeFieldBegin('values', TType.SET, 5)
      oprot.writeSetBegin(TType.STRING, len(self.values))
      for iter13 in self.values:
        oprot.writeString(iter13)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.localizedValues is not None:
      oprot.writeFieldBegin('localizedValues', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.localizedValues))
      for kiter14,viter15 in self.localizedValues.items():
        oprot.writeString(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.otherEnabled is not None:
      oprot.writeFieldBegin('otherEnabled', TType.BOOL, 7)
      oprot.writeBool(self.otherEnabled)
      oprot.writeFieldEnd()
    if self.otherMaxLength is not None:
      oprot.writeFieldBegin('otherMaxLength', TType.I32, 8)
      oprot.writeI32(self.otherMaxLength)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CurrencyFieldDefinitionDto:
  """
  Attributes:
   - base
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
  )

  def __init__(self, base=None,):
    self.base = base

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CurrencyFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TextFieldDefinitionDto:
  """
  Attributes:
   - base
   - maxLength
   - isMultiline
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.I32, 'maxLength', None, None, ), # 5
    (6, TType.BOOL, 'isMultiline', None, False, ), # 6
  )

  def __init__(self, base=None, maxLength=None, isMultiline=thrift_spec[6][4],):
    self.base = base
    self.maxLength = maxLength
    self.isMultiline = isMultiline

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.maxLength = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.isMultiline = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TextFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.maxLength is not None:
      oprot.writeFieldBegin('maxLength', TType.I32, 5)
      oprot.writeI32(self.maxLength)
      oprot.writeFieldEnd()
    if self.isMultiline is not None:
      oprot.writeFieldBegin('isMultiline', TType.BOOL, 6)
      oprot.writeBool(self.isMultiline)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScaleDefinitionDto:
  """
  Attributes:
   - name
   - localizedName
   - valuesMapping
   - localizedValues
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'localizedName', None, None, ), # 2
    None, # 3
    None, # 4
    (5, TType.MAP, 'valuesMapping', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'localizedValues', (TType.STRING,None,TType.STRING,None), None, ), # 6
  )

  def __init__(self, name=None, localizedName=None, valuesMapping=None, localizedValues=None,):
    self.name = name
    self.localizedName = localizedName
    self.valuesMapping = valuesMapping
    self.localizedValues = localizedValues

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.localizedName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.valuesMapping = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin()
          for _i20 in xrange(_size16):
            _key21 = iprot.readString();
            _val22 = iprot.readString();
            self.valuesMapping[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.localizedValues = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin()
          for _i27 in xrange(_size23):
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            self.localizedValues[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScaleDefinitionDto')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.localizedName is not None:
      oprot.writeFieldBegin('localizedName', TType.STRING, 2)
      oprot.writeString(self.localizedName)
      oprot.writeFieldEnd()
    if self.valuesMapping is not None:
      oprot.writeFieldBegin('valuesMapping', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.valuesMapping))
      for kiter30,viter31 in self.valuesMapping.items():
        oprot.writeString(kiter30)
        oprot.writeString(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.localizedValues is not None:
      oprot.writeFieldBegin('localizedValues', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.localizedValues))
      for kiter32,viter33 in self.localizedValues.items():
        oprot.writeString(kiter32)
        oprot.writeString(viter33)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScaleFieldDefinitionDto:
  """
  Attributes:
   - base
   - baseScale
   - scales
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.STRING, 'baseScale', None, None, ), # 5
    (6, TType.MAP, 'scales', (TType.STRING,None,TType.STRUCT,(ScaleDefinitionDto, ScaleDefinitionDto.thrift_spec)), None, ), # 6
  )

  def __init__(self, base=None, baseScale=None, scales=None,):
    self.base = base
    self.baseScale = baseScale
    self.scales = scales

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.baseScale = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.scales = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin()
          for _i38 in xrange(_size34):
            _key39 = iprot.readString();
            _val40 = ScaleDefinitionDto()
            _val40.read(iprot)
            self.scales[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScaleFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.baseScale is not None:
      oprot.writeFieldBegin('baseScale', TType.STRING, 5)
      oprot.writeString(self.baseScale)
      oprot.writeFieldEnd()
    if self.scales is not None:
      oprot.writeFieldBegin('scales', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.scales))
      for kiter41,viter42 in self.scales.items():
        oprot.writeString(kiter41)
        viter42.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FileFieldDefinitionDto:
  """
  Attributes:
   - base
   - maxFiles
   - profileName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (FieldDefinitionBaseDto, FieldDefinitionBaseDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.I32, 'maxFiles', None, 1, ), # 5
    None, # 6
    (7, TType.STRING, 'profileName', None, None, ), # 7
  )

  def __init__(self, base=None, maxFiles=thrift_spec[5][4], profileName=None,):
    self.base = base
    self.maxFiles = maxFiles
    self.profileName = profileName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = FieldDefinitionBaseDto()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.maxFiles = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.profileName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileFieldDefinitionDto')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.maxFiles is not None:
      oprot.writeFieldBegin('maxFiles', TType.I32, 5)
      oprot.writeI32(self.maxFiles)
      oprot.writeFieldEnd()
    if self.profileName is not None:
      oprot.writeFieldBegin('profileName', TType.STRING, 7)
      oprot.writeString(self.profileName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareFieldDefinitionsDto:
  """
  Attributes:
   - integerFields
   - integerRangeFields
   - enumFields
   - multiEnumFields
   - currencyFields
   - textFields
   - multiTextFields
   - scaleFields
   - fileFields
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'integerFields', (TType.STRING,None,TType.STRUCT,(IntegerFieldDefinitionDto, IntegerFieldDefinitionDto.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'integerRangeFields', (TType.STRING,None,TType.STRUCT,(IntegerRangeFieldDefinitionDto, IntegerRangeFieldDefinitionDto.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'enumFields', (TType.STRING,None,TType.STRUCT,(EnumFieldDefinitionDto, EnumFieldDefinitionDto.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'multiEnumFields', (TType.STRING,None,TType.STRUCT,(EnumFieldDefinitionDto, EnumFieldDefinitionDto.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'currencyFields', (TType.STRING,None,TType.STRUCT,(CurrencyFieldDefinitionDto, CurrencyFieldDefinitionDto.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'textFields', (TType.STRING,None,TType.STRUCT,(TextFieldDefinitionDto, TextFieldDefinitionDto.thrift_spec)), None, ), # 6
    (7, TType.MAP, 'multiTextFields', (TType.STRING,None,TType.STRUCT,(TextFieldDefinitionDto, TextFieldDefinitionDto.thrift_spec)), None, ), # 7
    (8, TType.MAP, 'scaleFields', (TType.STRING,None,TType.STRUCT,(ScaleFieldDefinitionDto, ScaleFieldDefinitionDto.thrift_spec)), None, ), # 8
    (9, TType.MAP, 'fileFields', (TType.STRING,None,TType.STRUCT,(FileFieldDefinitionDto, FileFieldDefinitionDto.thrift_spec)), None, ), # 9
  )

  def __init__(self, integerFields=None, integerRangeFields=None, enumFields=None, multiEnumFields=None, currencyFields=None, textFields=None, multiTextFields=None, scaleFields=None, fileFields=None,):
    self.integerFields = integerFields
    self.integerRangeFields = integerRangeFields
    self.enumFields = enumFields
    self.multiEnumFields = multiEnumFields
    self.currencyFields = currencyFields
    self.textFields = textFields
    self.multiTextFields = multiTextFields
    self.scaleFields = scaleFields
    self.fileFields = fileFields

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.integerFields = {}
          (_ktype44, _vtype45, _size43 ) = iprot.readMapBegin()
          for _i47 in xrange(_size43):
            _key48 = iprot.readString();
            _val49 = IntegerFieldDefinitionDto()
            _val49.read(iprot)
            self.integerFields[_key48] = _val49
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.integerRangeFields = {}
          (_ktype51, _vtype52, _size50 ) = iprot.readMapBegin()
          for _i54 in xrange(_size50):
            _key55 = iprot.readString();
            _val56 = IntegerRangeFieldDefinitionDto()
            _val56.read(iprot)
            self.integerRangeFields[_key55] = _val56
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.enumFields = {}
          (_ktype58, _vtype59, _size57 ) = iprot.readMapBegin()
          for _i61 in xrange(_size57):
            _key62 = iprot.readString();
            _val63 = EnumFieldDefinitionDto()
            _val63.read(iprot)
            self.enumFields[_key62] = _val63
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.multiEnumFields = {}
          (_ktype65, _vtype66, _size64 ) = iprot.readMapBegin()
          for _i68 in xrange(_size64):
            _key69 = iprot.readString();
            _val70 = EnumFieldDefinitionDto()
            _val70.read(iprot)
            self.multiEnumFields[_key69] = _val70
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.currencyFields = {}
          (_ktype72, _vtype73, _size71 ) = iprot.readMapBegin()
          for _i75 in xrange(_size71):
            _key76 = iprot.readString();
            _val77 = CurrencyFieldDefinitionDto()
            _val77.read(iprot)
            self.currencyFields[_key76] = _val77
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.textFields = {}
          (_ktype79, _vtype80, _size78 ) = iprot.readMapBegin()
          for _i82 in xrange(_size78):
            _key83 = iprot.readString();
            _val84 = TextFieldDefinitionDto()
            _val84.read(iprot)
            self.textFields[_key83] = _val84
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.multiTextFields = {}
          (_ktype86, _vtype87, _size85 ) = iprot.readMapBegin()
          for _i89 in xrange(_size85):
            _key90 = iprot.readString();
            _val91 = TextFieldDefinitionDto()
            _val91.read(iprot)
            self.multiTextFields[_key90] = _val91
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.scaleFields = {}
          (_ktype93, _vtype94, _size92 ) = iprot.readMapBegin()
          for _i96 in xrange(_size92):
            _key97 = iprot.readString();
            _val98 = ScaleFieldDefinitionDto()
            _val98.read(iprot)
            self.scaleFields[_key97] = _val98
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.fileFields = {}
          (_ktype100, _vtype101, _size99 ) = iprot.readMapBegin()
          for _i103 in xrange(_size99):
            _key104 = iprot.readString();
            _val105 = FileFieldDefinitionDto()
            _val105.read(iprot)
            self.fileFields[_key104] = _val105
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareFieldDefinitionsDto')
    if self.integerFields is not None:
      oprot.writeFieldBegin('integerFields', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.integerFields))
      for kiter106,viter107 in self.integerFields.items():
        oprot.writeString(kiter106)
        viter107.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.integerRangeFields is not None:
      oprot.writeFieldBegin('integerRangeFields', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.integerRangeFields))
      for kiter108,viter109 in self.integerRangeFields.items():
        oprot.writeString(kiter108)
        viter109.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.enumFields is not None:
      oprot.writeFieldBegin('enumFields', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.enumFields))
      for kiter110,viter111 in self.enumFields.items():
        oprot.writeString(kiter110)
        viter111.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.multiEnumFields is not None:
      oprot.writeFieldBegin('multiEnumFields', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.multiEnumFields))
      for kiter112,viter113 in self.multiEnumFields.items():
        oprot.writeString(kiter112)
        viter113.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.currencyFields is not None:
      oprot.writeFieldBegin('currencyFields', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.currencyFields))
      for kiter114,viter115 in self.currencyFields.items():
        oprot.writeString(kiter114)
        viter115.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.textFields is not None:
      oprot.writeFieldBegin('textFields', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.textFields))
      for kiter116,viter117 in self.textFields.items():
        oprot.writeString(kiter116)
        viter117.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.multiTextFields is not None:
      oprot.writeFieldBegin('multiTextFields', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.multiTextFields))
      for kiter118,viter119 in self.multiTextFields.items():
        oprot.writeString(kiter118)
        viter119.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.scaleFields is not None:
      oprot.writeFieldBegin('scaleFields', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.scaleFields))
      for kiter120,viter121 in self.scaleFields.items():
        oprot.writeString(kiter120)
        viter121.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.fileFields is not None:
      oprot.writeFieldBegin('fileFields', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.fileFields))
      for kiter122,viter123 in self.fileFields.items():
        oprot.writeString(kiter122)
        viter123.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
