# -*- coding: utf-8 -*-
#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from gen_py.WarehouseWorker import WarehouseWorker
from gen_py.WarehouseWorker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  WareDto getWare(string wareId)'
  print '   getWaresBatch( wareIds)'
  print '   getWaresFilter(WaresFilterDto filter)'
  print '  WareDto getWareByImportId(string wareImportId)'
  print '  i32 countWaresFilter(WaresFilterDto filter)'
  print '  WareDto updateWare(UpdateWareRequestDto request)'
  print '   updateWares( requests)'
  print '  WareDto createWare(CreateWareRequestDto request)'
  print '  WareDto importWare(ImportWareRequestDto request)'
  print '   createWares( requests)'
  print '  WareDto registerSuccessfulDeal(string wareId)'
  print '  WareDto registerNewDeal(string wareId)'
  print '  WareDto makeModeration(string wareId, bool passed, UserId moderatorId)'
  print '  WareDto makePublication(string wareId, StockState wantedStockState)'
  print '  PriceChangeResponse changeWaresPrice(PriceChangeRequest request)'
  print '  ModerateWareResponse moderateWare(ModerateWareRequest request)'
  print '  ReIndexResponse reIndex(ReIndexRequest request)'
  print '  i64 getTotalWares()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = WarehouseWorker.Client(protocol)
transport.open()

if cmd == 'getWare':
  if len(args) != 1:
    print 'getWare requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWare(args[0],))

elif cmd == 'getWaresBatch':
  if len(args) != 1:
    print 'getWaresBatch requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWaresBatch(eval(args[0]),))

elif cmd == 'getWaresFilter':
  if len(args) != 1:
    print 'getWaresFilter requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWaresFilter(eval(args[0]),))

elif cmd == 'getWareByImportId':
  if len(args) != 1:
    print 'getWareByImportId requires 1 args'
    sys.exit(1)
  pp.pprint(client.getWareByImportId(args[0],))

elif cmd == 'countWaresFilter':
  if len(args) != 1:
    print 'countWaresFilter requires 1 args'
    sys.exit(1)
  pp.pprint(client.countWaresFilter(eval(args[0]),))

elif cmd == 'updateWare':
  if len(args) != 1:
    print 'updateWare requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateWare(eval(args[0]),))

elif cmd == 'updateWares':
  if len(args) != 1:
    print 'updateWares requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateWares(eval(args[0]),))

elif cmd == 'createWare':
  if len(args) != 1:
    print 'createWare requires 1 args'
    sys.exit(1)
  pp.pprint(client.createWare(eval(args[0]),))

elif cmd == 'importWare':
  if len(args) != 1:
    print 'importWare requires 1 args'
    sys.exit(1)
  pp.pprint(client.importWare(eval(args[0]),))

elif cmd == 'createWares':
  if len(args) != 1:
    print 'createWares requires 1 args'
    sys.exit(1)
  pp.pprint(client.createWares(eval(args[0]),))

elif cmd == 'registerSuccessfulDeal':
  if len(args) != 1:
    print 'registerSuccessfulDeal requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerSuccessfulDeal(args[0],))

elif cmd == 'registerNewDeal':
  if len(args) != 1:
    print 'registerNewDeal requires 1 args'
    sys.exit(1)
  pp.pprint(client.registerNewDeal(args[0],))

elif cmd == 'makeModeration':
  if len(args) != 3:
    print 'makeModeration requires 3 args'
    sys.exit(1)
  pp.pprint(client.makeModeration(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'makePublication':
  if len(args) != 2:
    print 'makePublication requires 2 args'
    sys.exit(1)
  pp.pprint(client.makePublication(args[0],eval(args[1]),))

elif cmd == 'changeWaresPrice':
  if len(args) != 1:
    print 'changeWaresPrice requires 1 args'
    sys.exit(1)
  pp.pprint(client.changeWaresPrice(eval(args[0]),))

elif cmd == 'moderateWare':
  if len(args) != 1:
    print 'moderateWare requires 1 args'
    sys.exit(1)
  pp.pprint(client.moderateWare(eval(args[0]),))

elif cmd == 'reIndex':
  if len(args) != 1:
    print 'reIndex requires 1 args'
    sys.exit(1)
  pp.pprint(client.reIndex(eval(args[0]),))

elif cmd == 'getTotalWares':
  if len(args) != 0:
    print 'getTotalWares requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTotalWares())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
