# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import Exceptions
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  **********************************
               SERVICE
  ***********************************
  """
  def getWare(self, wareId):
    """
    Parameters:
     - wareId
    """
    pass

  def getWaresBatch(self, wareIds):
    """
    Parameters:
     - wareIds
    """
    pass

  def getWaresFilter(self, filter):
    """
    Parameters:
     - filter
    """
    pass

  def getWareByImportId(self, wareImportId):
    """
    Parameters:
     - wareImportId
    """
    pass

  def countWaresFilter(self, filter):
    """
    Parameters:
     - filter
    """
    pass

  def updateWare(self, request):
    """
    Parameters:
     - request
    """
    pass

  def updateWares(self, requests):
    """
    Parameters:
     - requests
    """
    pass

  def createWare(self, request):
    """
    Parameters:
     - request
    """
    pass

  def importWare(self, request):
    """
    Parameters:
     - request
    """
    pass

  def createWares(self, requests):
    """
    Parameters:
     - requests
    """
    pass

  def registerSuccessfulDeal(self, wareId):
    """
    Parameters:
     - wareId
    """
    pass

  def registerNewDeal(self, wareId):
    """
    Parameters:
     - wareId
    """
    pass

  def makeModeration(self, wareId, passed, moderatorId):
    """
    Parameters:
     - wareId
     - passed
     - moderatorId
    """
    pass

  def makePublication(self, wareId, wantedStockState):
    """
    Parameters:
     - wareId
     - wantedStockState
    """
    pass

  def changeWaresPrice(self, request):
    """
    Parameters:
     - request
    """
    pass

  def moderateWare(self, request):
    """
    Parameters:
     - request
    """
    pass

  def reIndex(self, request):
    """
    Переиндексировать индекс товаров.
    При асинхронном использовании ReIndexResponse вернет только totalCount.
    При синхронном использовании ReIndexResponse вернет totalCount и wareIds.


    Parameters:
     - request
    """
    pass

  def getTotalWares(self):
    pass


class Client(Iface):
  """
  **********************************
               SERVICE
  ***********************************
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getWare(self, wareId):
    """
    Parameters:
     - wareId
    """
    self.send_getWare(wareId)
    return self.recv_getWare()

  def send_getWare(self, wareId):
    self._oprot.writeMessageBegin('getWare', TMessageType.CALL, self._seqid)
    args = getWare_args()
    args.wareId = wareId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWare(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getWare_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWare failed: unknown result");

  def getWaresBatch(self, wareIds):
    """
    Parameters:
     - wareIds
    """
    self.send_getWaresBatch(wareIds)
    return self.recv_getWaresBatch()

  def send_getWaresBatch(self, wareIds):
    self._oprot.writeMessageBegin('getWaresBatch', TMessageType.CALL, self._seqid)
    args = getWaresBatch_args()
    args.wareIds = wareIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWaresBatch(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getWaresBatch_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWaresBatch failed: unknown result");

  def getWaresFilter(self, filter):
    """
    Parameters:
     - filter
    """
    self.send_getWaresFilter(filter)
    return self.recv_getWaresFilter()

  def send_getWaresFilter(self, filter):
    self._oprot.writeMessageBegin('getWaresFilter', TMessageType.CALL, self._seqid)
    args = getWaresFilter_args()
    args.filter = filter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWaresFilter(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getWaresFilter_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWaresFilter failed: unknown result");

  def getWareByImportId(self, wareImportId):
    """
    Parameters:
     - wareImportId
    """
    self.send_getWareByImportId(wareImportId)
    return self.recv_getWareByImportId()

  def send_getWareByImportId(self, wareImportId):
    self._oprot.writeMessageBegin('getWareByImportId', TMessageType.CALL, self._seqid)
    args = getWareByImportId_args()
    args.wareImportId = wareImportId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getWareByImportId(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getWareByImportId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.bEx is not None:
      raise result.bEx
    if result.mEx is not None:
      raise result.mEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getWareByImportId failed: unknown result");

  def countWaresFilter(self, filter):
    """
    Parameters:
     - filter
    """
    self.send_countWaresFilter(filter)
    return self.recv_countWaresFilter()

  def send_countWaresFilter(self, filter):
    self._oprot.writeMessageBegin('countWaresFilter', TMessageType.CALL, self._seqid)
    args = countWaresFilter_args()
    args.filter = filter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_countWaresFilter(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = countWaresFilter_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "countWaresFilter failed: unknown result");

  def updateWare(self, request):
    """
    Parameters:
     - request
    """
    self.send_updateWare(request)
    return self.recv_updateWare()

  def send_updateWare(self, request):
    self._oprot.writeMessageBegin('updateWare', TMessageType.CALL, self._seqid)
    args = updateWare_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateWare(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateWare_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateWare failed: unknown result");

  def updateWares(self, requests):
    """
    Parameters:
     - requests
    """
    self.send_updateWares(requests)
    return self.recv_updateWares()

  def send_updateWares(self, requests):
    self._oprot.writeMessageBegin('updateWares', TMessageType.CALL, self._seqid)
    args = updateWares_args()
    args.requests = requests
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateWares(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateWares_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateWares failed: unknown result");

  def createWare(self, request):
    """
    Parameters:
     - request
    """
    self.send_createWare(request)
    return self.recv_createWare()

  def send_createWare(self, request):
    self._oprot.writeMessageBegin('createWare', TMessageType.CALL, self._seqid)
    args = createWare_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createWare(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createWare_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createWare failed: unknown result");

  def importWare(self, request):
    """
    Parameters:
     - request
    """
    self.send_importWare(request)
    return self.recv_importWare()

  def send_importWare(self, request):
    self._oprot.writeMessageBegin('importWare', TMessageType.CALL, self._seqid)
    args = importWare_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_importWare(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = importWare_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "importWare failed: unknown result");

  def createWares(self, requests):
    """
    Parameters:
     - requests
    """
    self.send_createWares(requests)
    return self.recv_createWares()

  def send_createWares(self, requests):
    self._oprot.writeMessageBegin('createWares', TMessageType.CALL, self._seqid)
    args = createWares_args()
    args.requests = requests
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createWares(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createWares_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createWares failed: unknown result");

  def registerSuccessfulDeal(self, wareId):
    """
    Parameters:
     - wareId
    """
    self.send_registerSuccessfulDeal(wareId)
    return self.recv_registerSuccessfulDeal()

  def send_registerSuccessfulDeal(self, wareId):
    self._oprot.writeMessageBegin('registerSuccessfulDeal', TMessageType.CALL, self._seqid)
    args = registerSuccessfulDeal_args()
    args.wareId = wareId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerSuccessfulDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = registerSuccessfulDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerSuccessfulDeal failed: unknown result");

  def registerNewDeal(self, wareId):
    """
    Parameters:
     - wareId
    """
    self.send_registerNewDeal(wareId)
    return self.recv_registerNewDeal()

  def send_registerNewDeal(self, wareId):
    self._oprot.writeMessageBegin('registerNewDeal', TMessageType.CALL, self._seqid)
    args = registerNewDeal_args()
    args.wareId = wareId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerNewDeal(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = registerNewDeal_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerNewDeal failed: unknown result");

  def makeModeration(self, wareId, passed, moderatorId):
    """
    Parameters:
     - wareId
     - passed
     - moderatorId
    """
    self.send_makeModeration(wareId, passed, moderatorId)
    return self.recv_makeModeration()

  def send_makeModeration(self, wareId, passed, moderatorId):
    self._oprot.writeMessageBegin('makeModeration', TMessageType.CALL, self._seqid)
    args = makeModeration_args()
    args.wareId = wareId
    args.passed = passed
    args.moderatorId = moderatorId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_makeModeration(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = makeModeration_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "makeModeration failed: unknown result");

  def makePublication(self, wareId, wantedStockState):
    """
    Parameters:
     - wareId
     - wantedStockState
    """
    self.send_makePublication(wareId, wantedStockState)
    return self.recv_makePublication()

  def send_makePublication(self, wareId, wantedStockState):
    self._oprot.writeMessageBegin('makePublication', TMessageType.CALL, self._seqid)
    args = makePublication_args()
    args.wareId = wareId
    args.wantedStockState = wantedStockState
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_makePublication(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = makePublication_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "makePublication failed: unknown result");

  def changeWaresPrice(self, request):
    """
    Parameters:
     - request
    """
    self.send_changeWaresPrice(request)
    return self.recv_changeWaresPrice()

  def send_changeWaresPrice(self, request):
    self._oprot.writeMessageBegin('changeWaresPrice', TMessageType.CALL, self._seqid)
    args = changeWaresPrice_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeWaresPrice(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeWaresPrice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.bEx is not None:
      raise result.bEx
    if result.mEx is not None:
      raise result.mEx
    if result.nEx is not None:
      raise result.nEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeWaresPrice failed: unknown result");

  def moderateWare(self, request):
    """
    Parameters:
     - request
    """
    self.send_moderateWare(request)
    return self.recv_moderateWare()

  def send_moderateWare(self, request):
    self._oprot.writeMessageBegin('moderateWare', TMessageType.CALL, self._seqid)
    args = moderateWare_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_moderateWare(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = moderateWare_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.nEx is not None:
      raise result.nEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "moderateWare failed: unknown result");

  def reIndex(self, request):
    """
    Переиндексировать индекс товаров.
    При асинхронном использовании ReIndexResponse вернет только totalCount.
    При синхронном использовании ReIndexResponse вернет totalCount и wareIds.


    Parameters:
     - request
    """
    self.send_reIndex(request)
    return self.recv_reIndex()

  def send_reIndex(self, request):
    self._oprot.writeMessageBegin('reIndex', TMessageType.CALL, self._seqid)
    args = reIndex_args()
    args.request = request
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reIndex(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reIndex_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    if result.nEx is not None:
      raise result.nEx
    if result.mEx is not None:
      raise result.mEx
    if result.bEx is not None:
      raise result.bEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reIndex failed: unknown result");

  def getTotalWares(self):
    self.send_getTotalWares()
    return self.recv_getTotalWares()

  def send_getTotalWares(self):
    self._oprot.writeMessageBegin('getTotalWares', TMessageType.CALL, self._seqid)
    args = getTotalWares_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTotalWares(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTotalWares_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.uEx is not None:
      raise result.uEx
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTotalWares failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getWare"] = Processor.process_getWare
    self._processMap["getWaresBatch"] = Processor.process_getWaresBatch
    self._processMap["getWaresFilter"] = Processor.process_getWaresFilter
    self._processMap["getWareByImportId"] = Processor.process_getWareByImportId
    self._processMap["countWaresFilter"] = Processor.process_countWaresFilter
    self._processMap["updateWare"] = Processor.process_updateWare
    self._processMap["updateWares"] = Processor.process_updateWares
    self._processMap["createWare"] = Processor.process_createWare
    self._processMap["importWare"] = Processor.process_importWare
    self._processMap["createWares"] = Processor.process_createWares
    self._processMap["registerSuccessfulDeal"] = Processor.process_registerSuccessfulDeal
    self._processMap["registerNewDeal"] = Processor.process_registerNewDeal
    self._processMap["makeModeration"] = Processor.process_makeModeration
    self._processMap["makePublication"] = Processor.process_makePublication
    self._processMap["changeWaresPrice"] = Processor.process_changeWaresPrice
    self._processMap["moderateWare"] = Processor.process_moderateWare
    self._processMap["reIndex"] = Processor.process_reIndex
    self._processMap["getTotalWares"] = Processor.process_getTotalWares

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getWare(self, seqid, iprot, oprot):
    args = getWare_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWare_result()
    try:
      result.success = self._handler.getWare(args.wareId)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NullResultException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("getWare", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWaresBatch(self, seqid, iprot, oprot):
    args = getWaresBatch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWaresBatch_result()
    try:
      result.success = self._handler.getWaresBatch(args.wareIds)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("getWaresBatch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWaresFilter(self, seqid, iprot, oprot):
    args = getWaresFilter_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWaresFilter_result()
    try:
      result.success = self._handler.getWaresFilter(args.filter)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("getWaresFilter", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getWareByImportId(self, seqid, iprot, oprot):
    args = getWareByImportId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getWareByImportId_result()
    try:
      result.success = self._handler.getWareByImportId(args.wareImportId)
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.NullResultException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("getWareByImportId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_countWaresFilter(self, seqid, iprot, oprot):
    args = countWaresFilter_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = countWaresFilter_result()
    try:
      result.success = self._handler.countWaresFilter(args.filter)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("countWaresFilter", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateWare(self, seqid, iprot, oprot):
    args = updateWare_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateWare_result()
    try:
      result.success = self._handler.updateWare(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("updateWare", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateWares(self, seqid, iprot, oprot):
    args = updateWares_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateWares_result()
    try:
      result.success = self._handler.updateWares(args.requests)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("updateWares", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWare(self, seqid, iprot, oprot):
    args = createWare_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWare_result()
    try:
      result.success = self._handler.createWare(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("createWare", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_importWare(self, seqid, iprot, oprot):
    args = importWare_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = importWare_result()
    try:
      result.success = self._handler.importWare(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("importWare", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWares(self, seqid, iprot, oprot):
    args = createWares_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWares_result()
    try:
      result.success = self._handler.createWares(args.requests)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("createWares", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerSuccessfulDeal(self, seqid, iprot, oprot):
    args = registerSuccessfulDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerSuccessfulDeal_result()
    try:
      result.success = self._handler.registerSuccessfulDeal(args.wareId)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("registerSuccessfulDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerNewDeal(self, seqid, iprot, oprot):
    args = registerNewDeal_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerNewDeal_result()
    try:
      result.success = self._handler.registerNewDeal(args.wareId)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("registerNewDeal", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_makeModeration(self, seqid, iprot, oprot):
    args = makeModeration_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = makeModeration_result()
    try:
      result.success = self._handler.makeModeration(args.wareId, args.passed, args.moderatorId)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("makeModeration", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_makePublication(self, seqid, iprot, oprot):
    args = makePublication_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = makePublication_result()
    try:
      result.success = self._handler.makePublication(args.wareId, args.wantedStockState)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("makePublication", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeWaresPrice(self, seqid, iprot, oprot):
    args = changeWaresPrice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeWaresPrice_result()
    try:
      result.success = self._handler.changeWaresPrice(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    oprot.writeMessageBegin("changeWaresPrice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_moderateWare(self, seqid, iprot, oprot):
    args = moderateWare_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = moderateWare_result()
    try:
      result.success = self._handler.moderateWare(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("moderateWare", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reIndex(self, seqid, iprot, oprot):
    args = reIndex_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reIndex_result()
    try:
      result.success = self._handler.reIndex(args.request)
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    except Exceptions.ttypes.NoSuchResourceException, nEx:
      result.nEx = nEx
    except Exceptions.ttypes.MalformedException, mEx:
      result.mEx = mEx
    except Exceptions.ttypes.BadRequestException, bEx:
      result.bEx = bEx
    oprot.writeMessageBegin("reIndex", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTotalWares(self, seqid, iprot, oprot):
    args = getTotalWares_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTotalWares_result()
    try:
      result.success = self._handler.getTotalWares()
    except Exceptions.ttypes.UnavailableException, uEx:
      result.uEx = uEx
    oprot.writeMessageBegin("getTotalWares", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getWare_args:
  """
  Attributes:
   - wareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
  )

  def __init__(self, wareId=None,):
    self.wareId = wareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWare_args')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWare_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'nEx', (Exceptions.ttypes.NullResultException, Exceptions.ttypes.NullResultException.thrift_spec), None, ), # 10
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NullResultException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWare_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 10)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWaresBatch_args:
  """
  Attributes:
   - wareIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'wareIds', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, wareIds=None,):
    self.wareIds = wareIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.wareIds = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readString();
            self.wareIds.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWaresBatch_args')
    if self.wareIds is not None:
      oprot.writeFieldBegin('wareIds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.wareIds))
      for iter61 in self.wareIds:
        oprot.writeString(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWaresBatch_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(WareDto, WareDto.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = WareDto()
            _elem67.read(iprot)
            self.success.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWaresBatch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter68 in self.success:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWaresFilter_args:
  """
  Attributes:
   - filter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter', (WaresFilterDto, WaresFilterDto.thrift_spec), None, ), # 1
  )

  def __init__(self, filter=None,):
    self.filter = filter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter = WaresFilterDto()
          self.filter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWaresFilter_args')
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.STRUCT, 1)
      self.filter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWaresFilter_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(WareDto, WareDto.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = WareDto()
            _elem74.read(iprot)
            self.success.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWaresFilter_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter75 in self.success:
        iter75.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWareByImportId_args:
  """
  Attributes:
   - wareImportId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareImportId', None, None, ), # 1
  )

  def __init__(self, wareImportId=None,):
    self.wareImportId = wareImportId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareImportId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWareByImportId_args')
    if self.wareImportId is not None:
      oprot.writeFieldBegin('wareImportId', TType.STRING, 1)
      oprot.writeString(self.wareImportId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getWareByImportId_result:
  """
  Attributes:
   - success
   - bEx
   - mEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'nEx', (Exceptions.ttypes.NullResultException, Exceptions.ttypes.NullResultException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, bEx=None, mEx=None, nEx=None,):
    self.success = success
    self.bEx = bEx
    self.mEx = mEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NullResultException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getWareByImportId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 1)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 3)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class countWaresFilter_args:
  """
  Attributes:
   - filter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'filter', (WaresFilterDto, WaresFilterDto.thrift_spec), None, ), # 1
  )

  def __init__(self, filter=None,):
    self.filter = filter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.filter = WaresFilterDto()
          self.filter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('countWaresFilter_args')
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.STRUCT, 1)
      self.filter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class countWaresFilter_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('countWaresFilter_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWare_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (UpdateWareRequestDto, UpdateWareRequestDto.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = UpdateWareRequestDto()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWare_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWare_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWare_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWares_args:
  """
  Attributes:
   - requests
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'requests', (TType.STRUCT,(UpdateWareRequestDto, UpdateWareRequestDto.thrift_spec)), None, ), # 1
  )

  def __init__(self, requests=None,):
    self.requests = requests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.requests = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = UpdateWareRequestDto()
            _elem81.read(iprot)
            self.requests.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWares_args')
    if self.requests is not None:
      oprot.writeFieldBegin('requests', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.requests))
      for iter82 in self.requests:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateWares_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(WareDto, WareDto.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype86, _size83) = iprot.readListBegin()
          for _i87 in xrange(_size83):
            _elem88 = WareDto()
            _elem88.read(iprot)
            self.success.append(_elem88)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateWares_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter89 in self.success:
        iter89.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWare_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (CreateWareRequestDto, CreateWareRequestDto.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = CreateWareRequestDto()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWare_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWare_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWare_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class importWare_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ImportWareRequestDto, ImportWareRequestDto.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ImportWareRequestDto()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('importWare_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class importWare_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('importWare_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWares_args:
  """
  Attributes:
   - requests
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'requests', (TType.STRUCT,(CreateWareRequestDto, CreateWareRequestDto.thrift_spec)), None, ), # 1
  )

  def __init__(self, requests=None,):
    self.requests = requests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.requests = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = CreateWareRequestDto()
            _elem95.read(iprot)
            self.requests.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWares_args')
    if self.requests is not None:
      oprot.writeFieldBegin('requests', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.requests))
      for iter96 in self.requests:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWares_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(WareDto, WareDto.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = WareDto()
            _elem102.read(iprot)
            self.success.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWares_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter103 in self.success:
        iter103.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerSuccessfulDeal_args:
  """
  Attributes:
   - wareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
  )

  def __init__(self, wareId=None,):
    self.wareId = wareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerSuccessfulDeal_args')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerSuccessfulDeal_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerSuccessfulDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerNewDeal_args:
  """
  Attributes:
   - wareId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
  )

  def __init__(self, wareId=None,):
    self.wareId = wareId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerNewDeal_args')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerNewDeal_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerNewDeal_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class makeModeration_args:
  """
  Attributes:
   - wareId
   - passed
   - moderatorId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
    (2, TType.BOOL, 'passed', None, None, ), # 2
    (3, TType.I32, 'moderatorId', None, None, ), # 3
  )

  def __init__(self, wareId=None, passed=None, moderatorId=None,):
    self.wareId = wareId
    self.passed = passed
    self.moderatorId = moderatorId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.passed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.moderatorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('makeModeration_args')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.passed is not None:
      oprot.writeFieldBegin('passed', TType.BOOL, 2)
      oprot.writeBool(self.passed)
      oprot.writeFieldEnd()
    if self.moderatorId is not None:
      oprot.writeFieldBegin('moderatorId', TType.I32, 3)
      oprot.writeI32(self.moderatorId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class makeModeration_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('makeModeration_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class makePublication_args:
  """
  Attributes:
   - wareId
   - wantedStockState
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
    (2, TType.I32, 'wantedStockState', None, None, ), # 2
  )

  def __init__(self, wareId=None, wantedStockState=None,):
    self.wareId = wareId
    self.wantedStockState = wantedStockState

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.wantedStockState = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('makePublication_args')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.wantedStockState is not None:
      oprot.writeFieldBegin('wantedStockState', TType.I32, 2)
      oprot.writeI32(self.wantedStockState)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class makePublication_result:
  """
  Attributes:
   - success
   - uEx
   - mEx
   - bEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (WareDto, WareDto.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, mEx=None, bEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.mEx = mEx
    self.bEx = bEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = WareDto()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('makePublication_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 2)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 3)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeWaresPrice_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (PriceChangeRequest, PriceChangeRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = PriceChangeRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeWaresPrice_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeWaresPrice_result:
  """
  Attributes:
   - success
   - uEx
   - bEx
   - mEx
   - nEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PriceChangeResponse, PriceChangeResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, bEx=None, mEx=None, nEx=None,):
    self.success = success
    self.uEx = uEx
    self.bEx = bEx
    self.mEx = mEx
    self.nEx = nEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PriceChangeResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeWaresPrice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 2)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 3)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 4)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class moderateWare_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ModerateWareRequest, ModerateWareRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ModerateWareRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('moderateWare_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class moderateWare_result:
  """
  Attributes:
   - success
   - uEx
   - nEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ModerateWareResponse, ModerateWareResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, nEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.nEx = nEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ModerateWareResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('moderateWare_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 2)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 3)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 4)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reIndex_args:
  """
  Attributes:
   - request
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'request', (ReIndexRequest, ReIndexRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, request=None,):
    self.request = request

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.request = ReIndexRequest()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reIndex_args')
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 1)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reIndex_result:
  """
  Attributes:
   - success
   - uEx
   - nEx
   - mEx
   - bEx
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ReIndexResponse, ReIndexResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nEx', (Exceptions.ttypes.NoSuchResourceException, Exceptions.ttypes.NoSuchResourceException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'mEx', (Exceptions.ttypes.MalformedException, Exceptions.ttypes.MalformedException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'bEx', (Exceptions.ttypes.BadRequestException, Exceptions.ttypes.BadRequestException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, uEx=None, nEx=None, mEx=None, bEx=None,):
    self.success = success
    self.uEx = uEx
    self.nEx = nEx
    self.mEx = mEx
    self.bEx = bEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ReIndexResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nEx = Exceptions.ttypes.NoSuchResourceException()
          self.nEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.mEx = Exceptions.ttypes.MalformedException()
          self.mEx.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.bEx = Exceptions.ttypes.BadRequestException()
          self.bEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reIndex_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    if self.nEx is not None:
      oprot.writeFieldBegin('nEx', TType.STRUCT, 2)
      self.nEx.write(oprot)
      oprot.writeFieldEnd()
    if self.mEx is not None:
      oprot.writeFieldBegin('mEx', TType.STRUCT, 3)
      self.mEx.write(oprot)
      oprot.writeFieldEnd()
    if self.bEx is not None:
      oprot.writeFieldBegin('bEx', TType.STRUCT, 4)
      self.bEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTotalWares_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTotalWares_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTotalWares_result:
  """
  Attributes:
   - success
   - uEx
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'uEx', (Exceptions.ttypes.UnavailableException, Exceptions.ttypes.UnavailableException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, uEx=None,):
    self.success = success
    self.uEx = uEx

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.uEx = Exceptions.ttypes.UnavailableException()
          self.uEx.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTotalWares_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.uEx is not None:
      oprot.writeFieldBegin('uEx', TType.STRUCT, 1)
      self.uEx.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
