# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from gen_py import WareFields
import gen_py.Exceptions.ttypes
import gen_py.Common.ttypes
import gen_py.WareFields.ttypes
import gen_py.WarehouseWorkerConstants.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
from gen_py import Common

try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class WaresFilterDto:
  """
  Attributes:
   - userId
   - allowedStockStates
   - allowedModerationStates
   - allowedCategories
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userId', None, None, ), # 1
    (2, TType.SET, 'allowedStockStates', (TType.I32,None), None, ), # 2
    (3, TType.SET, 'allowedModerationStates', (TType.I32,None), None, ), # 3
    (4, TType.SET, 'allowedCategories', (TType.I32,None), None, ), # 4
    (5, TType.I32, 'limit', None, None, ), # 5
    (6, TType.I32, 'offset', None, None, ), # 6
  )

  def __init__(self, userId=None, allowedStockStates=None, allowedModerationStates=None, allowedCategories=None, limit=None, offset=None,):
    self.userId = userId
    self.allowedStockStates = allowedStockStates
    self.allowedModerationStates = allowedModerationStates
    self.allowedCategories = allowedCategories
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.allowedStockStates = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.allowedStockStates.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.allowedModerationStates = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI32();
            self.allowedModerationStates.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.allowedCategories = set()
          (_etype15, _size12) = iprot.readSetBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI32();
            self.allowedCategories.add(_elem17)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WaresFilterDto')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 1)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.allowedStockStates is not None:
      oprot.writeFieldBegin('allowedStockStates', TType.SET, 2)
      oprot.writeSetBegin(TType.I32, len(self.allowedStockStates))
      for iter18 in self.allowedStockStates:
        oprot.writeI32(iter18)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.allowedModerationStates is not None:
      oprot.writeFieldBegin('allowedModerationStates', TType.SET, 3)
      oprot.writeSetBegin(TType.I32, len(self.allowedModerationStates))
      for iter19 in self.allowedModerationStates:
        oprot.writeI32(iter19)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.allowedCategories is not None:
      oprot.writeFieldBegin('allowedCategories', TType.SET, 4)
      oprot.writeSetBegin(TType.I32, len(self.allowedCategories))
      for iter20 in self.allowedCategories:
        oprot.writeI32(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I32, 5)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 6)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateWareRequestDto:
  """
  Attributes:
   - shopId
   - category
   - content
   - stockState
   - wareImportId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shopId', None, None, ), # 1
    (2, TType.I32, 'category', None, None, ), # 2
    (3, TType.STRUCT, 'content', (WareFields.ttypes.WareContentDto, WareFields.ttypes.WareContentDto.thrift_spec), None, ), # 3
    (4, TType.I32, 'stockState', None, None, ), # 4
    (5, TType.STRING, 'wareImportId', None, None, ), # 5
  )

  def __init__(self, shopId=None, category=None, content=None, stockState=None, wareImportId=None,):
    self.shopId = shopId
    self.category = category
    self.content = content
    self.stockState = stockState
    self.wareImportId = wareImportId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shopId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.content = WareFields.ttypes.WareContentDto()
          self.content.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.stockState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.wareImportId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateWareRequestDto')
    if self.shopId is not None:
      oprot.writeFieldBegin('shopId', TType.I32, 1)
      oprot.writeI32(self.shopId)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 2)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRUCT, 3)
      self.content.write(oprot)
      oprot.writeFieldEnd()
    if self.stockState is not None:
      oprot.writeFieldBegin('stockState', TType.I32, 4)
      oprot.writeI32(self.stockState)
      oprot.writeFieldEnd()
    if self.wareImportId is not None:
      oprot.writeFieldBegin('wareImportId', TType.STRING, 5)
      oprot.writeString(self.wareImportId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ImportWareRequestDto:
  """
  Attributes:
   - shopId
   - category
   - content
   - wareImportId
   - moderatorId
   - wantedStockState
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'shopId', None, None, ), # 1
    (2, TType.I32, 'category', None, None, ), # 2
    (3, TType.STRUCT, 'content', (WareFields.ttypes.WareContentDto, WareFields.ttypes.WareContentDto.thrift_spec), None, ), # 3
    (4, TType.STRING, 'wareImportId', None, None, ), # 4
    (5, TType.I32, 'moderatorId', None, None, ), # 5
    (6, TType.I32, 'wantedStockState', None, None, ), # 6
  )

  def __init__(self, shopId=None, category=None, content=None, wareImportId=None, moderatorId=None, wantedStockState=None,):
    self.shopId = shopId
    self.category = category
    self.content = content
    self.wareImportId = wareImportId
    self.moderatorId = moderatorId
    self.wantedStockState = wantedStockState

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.shopId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.content = WareFields.ttypes.WareContentDto()
          self.content.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.wareImportId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.moderatorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.wantedStockState = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ImportWareRequestDto')
    if self.shopId is not None:
      oprot.writeFieldBegin('shopId', TType.I32, 1)
      oprot.writeI32(self.shopId)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I32, 2)
      oprot.writeI32(self.category)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRUCT, 3)
      self.content.write(oprot)
      oprot.writeFieldEnd()
    if self.wareImportId is not None:
      oprot.writeFieldBegin('wareImportId', TType.STRING, 4)
      oprot.writeString(self.wareImportId)
      oprot.writeFieldEnd()
    if self.moderatorId is not None:
      oprot.writeFieldBegin('moderatorId', TType.I32, 5)
      oprot.writeI32(self.moderatorId)
      oprot.writeFieldEnd()
    if self.wantedStockState is not None:
      oprot.writeFieldBegin('wantedStockState', TType.I32, 6)
      oprot.writeI32(self.wantedStockState)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateWareRequestDto:
  """
  Attributes:
   - wareId
   - expectedRevision
   - newCategory
   - newWareContent
   - retainModeration
   - shopOrderNumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
    (2, TType.I32, 'expectedRevision', None, 0, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    (13, TType.I32, 'newCategory', None, None, ), # 13
    (14, TType.STRUCT, 'newWareContent', (WareFields.ttypes.WareContentDto, WareFields.ttypes.WareContentDto.thrift_spec), None, ), # 14
    (15, TType.BOOL, 'retainModeration', None, None, ), # 15
    (16, TType.DOUBLE, 'shopOrderNumber', None, None, ), # 16
  )

  def __init__(self, wareId=None, expectedRevision=thrift_spec[2][4], newCategory=None, newWareContent=None, retainModeration=None, shopOrderNumber=None,):
    self.wareId = wareId
    self.expectedRevision = expectedRevision
    self.newCategory = newCategory
    self.newWareContent = newWareContent
    self.retainModeration = retainModeration
    self.shopOrderNumber = shopOrderNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.expectedRevision = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.newCategory = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.newWareContent = WareFields.ttypes.WareContentDto()
          self.newWareContent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.retainModeration = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.shopOrderNumber = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateWareRequestDto')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.expectedRevision is not None:
      oprot.writeFieldBegin('expectedRevision', TType.I32, 2)
      oprot.writeI32(self.expectedRevision)
      oprot.writeFieldEnd()
    if self.newCategory is not None:
      oprot.writeFieldBegin('newCategory', TType.I32, 13)
      oprot.writeI32(self.newCategory)
      oprot.writeFieldEnd()
    if self.newWareContent is not None:
      oprot.writeFieldBegin('newWareContent', TType.STRUCT, 14)
      self.newWareContent.write(oprot)
      oprot.writeFieldEnd()
    if self.retainModeration is not None:
      oprot.writeFieldBegin('retainModeration', TType.BOOL, 15)
      oprot.writeBool(self.retainModeration)
      oprot.writeFieldEnd()
    if self.shopOrderNumber is not None:
      oprot.writeFieldBegin('shopOrderNumber', TType.DOUBLE, 16)
      oprot.writeDouble(self.shopOrderNumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WareDto:
  """
  Attributes:
   - wareId
   - wareImportId
   - shopId
   - wareIdSalt
   - revision
   - creationTimestamp
   - lastModifiedTimestamp
   - lastPublishedTimestamp
   - lastModerationTimestamp
   - lastModeratorId
   - lastDealTimestamp
   - startedDealsCount
   - successfulDealsCount
   - moderationState
   - stockState
   - rejectReason
   - managedCategory
   - content
   - shopOrderNumber
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'wareId', None, None, ), # 2
    (3, TType.I32, 'shopId', None, None, ), # 3
    (4, TType.I32, 'revision', None, None, ), # 4
    (5, TType.I64, 'creationTimestamp', None, None, ), # 5
    (6, TType.I64, 'lastModifiedTimestamp', None, None, ), # 6
    (7, TType.I64, 'lastPublishedTimestamp', None, None, ), # 7
    (8, TType.I32, 'moderationState', None, None, ), # 8
    (9, TType.I32, 'stockState', None, None, ), # 9
    (10, TType.STRING, 'wareIdSalt', None, None, ), # 10
    (11, TType.I32, 'managedCategory', None, None, ), # 11
    (12, TType.STRUCT, 'content', (WareFields.ttypes.WareContentDto, WareFields.ttypes.WareContentDto.thrift_spec), None, ), # 12
    (13, TType.I64, 'lastModerationTimestamp', None, None, ), # 13
    (14, TType.I32, 'lastModeratorId', None, None, ), # 14
    (15, TType.I64, 'lastDealTimestamp', None, None, ), # 15
    (16, TType.I32, 'startedDealsCount', None, None, ), # 16
    (17, TType.I32, 'successfulDealsCount', None, None, ), # 17
    (18, TType.STRING, 'wareImportId', None, None, ), # 18
    (19, TType.I32, 'rejectReason', None, None, ), # 19
    (20, TType.DOUBLE, 'shopOrderNumber', None, None, ), # 20
  )

  def __init__(self, wareId=None, wareImportId=None, shopId=None, wareIdSalt=None, revision=None, creationTimestamp=None, lastModifiedTimestamp=None, lastPublishedTimestamp=None, lastModerationTimestamp=None, lastModeratorId=None, lastDealTimestamp=None, startedDealsCount=None, successfulDealsCount=None, moderationState=None, stockState=None, rejectReason=None, managedCategory=None, content=None, shopOrderNumber=None,):
    self.wareId = wareId
    self.wareImportId = wareImportId
    self.shopId = shopId
    self.wareIdSalt = wareIdSalt
    self.revision = revision
    self.creationTimestamp = creationTimestamp
    self.lastModifiedTimestamp = lastModifiedTimestamp
    self.lastPublishedTimestamp = lastPublishedTimestamp
    self.lastModerationTimestamp = lastModerationTimestamp
    self.lastModeratorId = lastModeratorId
    self.lastDealTimestamp = lastDealTimestamp
    self.startedDealsCount = startedDealsCount
    self.successfulDealsCount = successfulDealsCount
    self.moderationState = moderationState
    self.stockState = stockState
    self.rejectReason = rejectReason
    self.managedCategory = managedCategory
    self.content = content
    self.shopOrderNumber = shopOrderNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.wareImportId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.shopId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.wareIdSalt = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.revision = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastModifiedTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.lastPublishedTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.lastModerationTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.lastModeratorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.lastDealTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.startedDealsCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.successfulDealsCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.moderationState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.stockState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.rejectReason = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.managedCategory = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.content = WareFields.ttypes.WareContentDto()
          self.content.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.shopOrderNumber = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WareDto')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 2)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.shopId is not None:
      oprot.writeFieldBegin('shopId', TType.I32, 3)
      oprot.writeI32(self.shopId)
      oprot.writeFieldEnd()
    if self.revision is not None:
      oprot.writeFieldBegin('revision', TType.I32, 4)
      oprot.writeI32(self.revision)
      oprot.writeFieldEnd()
    if self.creationTimestamp is not None:
      oprot.writeFieldBegin('creationTimestamp', TType.I64, 5)
      oprot.writeI64(self.creationTimestamp)
      oprot.writeFieldEnd()
    if self.lastModifiedTimestamp is not None:
      oprot.writeFieldBegin('lastModifiedTimestamp', TType.I64, 6)
      oprot.writeI64(self.lastModifiedTimestamp)
      oprot.writeFieldEnd()
    if self.lastPublishedTimestamp is not None:
      oprot.writeFieldBegin('lastPublishedTimestamp', TType.I64, 7)
      oprot.writeI64(self.lastPublishedTimestamp)
      oprot.writeFieldEnd()
    if self.moderationState is not None:
      oprot.writeFieldBegin('moderationState', TType.I32, 8)
      oprot.writeI32(self.moderationState)
      oprot.writeFieldEnd()
    if self.stockState is not None:
      oprot.writeFieldBegin('stockState', TType.I32, 9)
      oprot.writeI32(self.stockState)
      oprot.writeFieldEnd()
    if self.wareIdSalt is not None:
      oprot.writeFieldBegin('wareIdSalt', TType.STRING, 10)
      oprot.writeString(self.wareIdSalt)
      oprot.writeFieldEnd()
    if self.managedCategory is not None:
      oprot.writeFieldBegin('managedCategory', TType.I32, 11)
      oprot.writeI32(self.managedCategory)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRUCT, 12)
      self.content.write(oprot)
      oprot.writeFieldEnd()
    if self.lastModerationTimestamp is not None:
      oprot.writeFieldBegin('lastModerationTimestamp', TType.I64, 13)
      oprot.writeI64(self.lastModerationTimestamp)
      oprot.writeFieldEnd()
    if self.lastModeratorId is not None:
      oprot.writeFieldBegin('lastModeratorId', TType.I32, 14)
      oprot.writeI32(self.lastModeratorId)
      oprot.writeFieldEnd()
    if self.lastDealTimestamp is not None:
      oprot.writeFieldBegin('lastDealTimestamp', TType.I64, 15)
      oprot.writeI64(self.lastDealTimestamp)
      oprot.writeFieldEnd()
    if self.startedDealsCount is not None:
      oprot.writeFieldBegin('startedDealsCount', TType.I32, 16)
      oprot.writeI32(self.startedDealsCount)
      oprot.writeFieldEnd()
    if self.successfulDealsCount is not None:
      oprot.writeFieldBegin('successfulDealsCount', TType.I32, 17)
      oprot.writeI32(self.successfulDealsCount)
      oprot.writeFieldEnd()
    if self.wareImportId is not None:
      oprot.writeFieldBegin('wareImportId', TType.STRING, 18)
      oprot.writeString(self.wareImportId)
      oprot.writeFieldEnd()
    if self.rejectReason is not None:
      oprot.writeFieldBegin('rejectReason', TType.I32, 19)
      oprot.writeI32(self.rejectReason)
      oprot.writeFieldEnd()
    if self.shopOrderNumber is not None:
      oprot.writeFieldBegin('shopOrderNumber', TType.DOUBLE, 20)
      oprot.writeDouble(self.shopOrderNumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WaresAnalyticsReport:
  """
  Attributes:
   - total
   - active
   - inactive
   - moderated
   - declined
   - managementCategory
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total', None, None, ), # 1
    (2, TType.I64, 'active', None, None, ), # 2
    (3, TType.I64, 'inactive', None, None, ), # 3
    (4, TType.I64, 'moderated', None, None, ), # 4
    (5, TType.I64, 'declined', None, None, ), # 5
    (6, TType.MAP, 'managementCategory', (TType.I32,None,TType.I64,None), None, ), # 6
  )

  def __init__(self, total=None, active=None, inactive=None, moderated=None, declined=None, managementCategory=None,):
    self.total = total
    self.active = active
    self.inactive = inactive
    self.moderated = moderated
    self.declined = declined
    self.managementCategory = managementCategory

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.active = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.inactive = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.moderated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.declined = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.managementCategory = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin()
          for _i25 in xrange(_size21):
            _key26 = iprot.readI32();
            _val27 = iprot.readI64();
            self.managementCategory[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WaresAnalyticsReport')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I64, 1)
      oprot.writeI64(self.total)
      oprot.writeFieldEnd()
    if self.active is not None:
      oprot.writeFieldBegin('active', TType.I64, 2)
      oprot.writeI64(self.active)
      oprot.writeFieldEnd()
    if self.inactive is not None:
      oprot.writeFieldBegin('inactive', TType.I64, 3)
      oprot.writeI64(self.inactive)
      oprot.writeFieldEnd()
    if self.moderated is not None:
      oprot.writeFieldBegin('moderated', TType.I64, 4)
      oprot.writeI64(self.moderated)
      oprot.writeFieldEnd()
    if self.declined is not None:
      oprot.writeFieldBegin('declined', TType.I64, 5)
      oprot.writeI64(self.declined)
      oprot.writeFieldEnd()
    if self.managementCategory is not None:
      oprot.writeFieldBegin('managementCategory', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.managementCategory))
      for kiter28,viter29 in self.managementCategory.items():
        oprot.writeI32(kiter28)
        oprot.writeI64(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceChangeDto:
  """
  **********************************
               DTO
  ***********************************

  Attributes:
   - wareId
   - amount
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
    (2, TType.I64, 'amount', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
  )

  def __init__(self, wareId=None, amount=None, type=None,):
    self.wareId = wareId
    self.amount = amount
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceChangeDto')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I64, 2)
      oprot.writeI64(self.amount)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceChangeResultDto:
  """
  Attributes:
   - wareId
   - result
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'wareId', None, None, ), # 1
    (2, TType.I32, 'result', None, None, ), # 2
  )

  def __init__(self, wareId=None, result=None,):
    self.wareId = wareId
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceChangeResultDto')
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 1)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 2)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceChangeRequest:
  """
  **********************************
               REQUESTS
  ***********************************

  Attributes:
   - priceChanges
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'priceChanges', (TType.STRING,None,TType.STRUCT,(PriceChangeDto, PriceChangeDto.thrift_spec)), None, ), # 1
  )

  def __init__(self, priceChanges=None,):
    self.priceChanges = priceChanges

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.priceChanges = {}
          (_ktype31, _vtype32, _size30 ) = iprot.readMapBegin()
          for _i34 in xrange(_size30):
            _key35 = iprot.readString();
            _val36 = PriceChangeDto()
            _val36.read(iprot)
            self.priceChanges[_key35] = _val36
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceChangeRequest')
    if self.priceChanges is not None:
      oprot.writeFieldBegin('priceChanges', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.priceChanges))
      for kiter37,viter38 in self.priceChanges.items():
        oprot.writeString(kiter37)
        viter38.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ModerateWareRequest:
  """
  Attributes:
   - sig
   - moderatorId
   - wareId
   - passed
   - rejectReason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'moderatorId', None, None, ), # 1
    (2, TType.STRING, 'wareId', None, None, ), # 2
    (3, TType.BOOL, 'passed', None, None, ), # 3
    (4, TType.I32, 'rejectReason', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, moderatorId=None, wareId=None, passed=None, rejectReason=None,):
    self.sig = sig
    self.moderatorId = moderatorId
    self.wareId = wareId
    self.passed = passed
    self.rejectReason = rejectReason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.I32:
          self.moderatorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.wareId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.passed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.rejectReason = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ModerateWareRequest')
    if self.moderatorId is not None:
      oprot.writeFieldBegin('moderatorId', TType.I32, 1)
      oprot.writeI32(self.moderatorId)
      oprot.writeFieldEnd()
    if self.wareId is not None:
      oprot.writeFieldBegin('wareId', TType.STRING, 2)
      oprot.writeString(self.wareId)
      oprot.writeFieldEnd()
    if self.passed is not None:
      oprot.writeFieldBegin('passed', TType.BOOL, 3)
      oprot.writeBool(self.passed)
      oprot.writeFieldEnd()
    if self.rejectReason is not None:
      oprot.writeFieldBegin('rejectReason', TType.I32, 4)
      oprot.writeI32(self.rejectReason)
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReIndexRequest:
  """
  Attributes:
   - sig
   - stepSize
   - doClearIndex
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'stepSize', None, None, ), # 1
    (2, TType.BOOL, 'doClearIndex', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, stepSize=None, doClearIndex=None,):
    self.sig = sig
    self.stepSize = stepSize
    self.doClearIndex = doClearIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.I32:
          self.stepSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.doClearIndex = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReIndexRequest')
    if self.stepSize is not None:
      oprot.writeFieldBegin('stepSize', TType.I32, 1)
      oprot.writeI32(self.stepSize)
      oprot.writeFieldEnd()
    if self.doClearIndex is not None:
      oprot.writeFieldBegin('doClearIndex', TType.BOOL, 2)
      oprot.writeBool(self.doClearIndex)
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriceChangeResponse:
  """
  **********************************
               RESPONSES
  ***********************************

  Attributes:
   - results
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'results', (TType.STRING,None,TType.STRUCT,(PriceChangeResultDto, PriceChangeResultDto.thrift_spec)), None, ), # 1
  )

  def __init__(self, results=None,):
    self.results = results

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.results = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readString();
            _val45 = PriceChangeResultDto()
            _val45.read(iprot)
            self.results[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriceChangeResponse')
    if self.results is not None:
      oprot.writeFieldBegin('results', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.results))
      for kiter46,viter47 in self.results.items():
        oprot.writeString(kiter46)
        viter47.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ModerateWareResponse:
  """
  Attributes:
   - sig
   - ware
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ware', (WareDto, WareDto.thrift_spec), None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, ware=None,):
    self.sig = sig
    self.ware = ware

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ware = WareDto()
          self.ware.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ModerateWareResponse')
    if self.ware is not None:
      oprot.writeFieldBegin('ware', TType.STRUCT, 1)
      self.ware.write(oprot)
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReIndexResponse:
  """
  Attributes:
   - sig
   - totalCount
   - wareIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'wareIds', (TType.STRING,None), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    (127, TType.STRUCT, 'sig', (Common.ttypes.Signature, Common.ttypes.Signature.thrift_spec), None, ), # 127
  )

  def __init__(self, sig=None, totalCount=None, wareIds=None,):
    self.sig = sig
    self.totalCount = totalCount
    self.wareIds = wareIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 127:
        if ftype == TType.STRUCT:
          self.sig = Common.ttypes.Signature()
          self.sig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.wareIds = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readString();
            self.wareIds.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReIndexResponse')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.wareIds is not None:
      oprot.writeFieldBegin('wareIds', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.wareIds))
      for iter54 in self.wareIds:
        oprot.writeString(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sig is not None:
      oprot.writeFieldBegin('sig', TType.STRUCT, 127)
      self.sig.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
